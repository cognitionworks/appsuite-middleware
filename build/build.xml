<?xml version="1.0" encoding="UTF-8"?>
<project name="Bundle Builder" basedir=".">

    <description>
        Reads a ProjectSet file and builds all bundles referenced in that ProjectSet file.
    </description>

    <!-- customizable values -->
    <property name="destDir" value=""/><!-- Necessary to build the bundles into a distro package -->
    <property name="prefix" value="/opt/open-xchange"/><!-- Installation path on destination system -->
    <property name="tmpDir" value="tmp"/><!-- Directory for temporary file storage -->
    <property name="distDir" value=""/><!-- Use some tmpDir -->

    <property name="branch" value="master"/>

    <!-- Constants -->
    <property name="mainDir" value=".."/>
    <property name="checkoutDir" value="${mainDir}"/>
    <property name="logDir" value="${mainDir}/log"/>

    <!-- Install Constants -->
    <property name="bundlesDir" value="${prefix}/bundles"/>
    <property name="bundle.dDir" value="${prefix}/etc/osgi/bundle.d"/>

    <target name="antExtensions" description="Compiles our additional Ant tasks and defines them for this build.">
        <path id="ant3rdPartyLib">
            <fileset dir="lib" includes="*.jar"/>
        </path>
        <property name="build" value="build"/>
        <mkdir dir="${build}"/>
        <javac srcdir="src" destdir="${build}" debug="true" debuglevel="lines,vars,source" encoding="US-ASCII" source="1.5" compiler="javac1.5" target="1.5" includeantruntime="true">
            <classpath refid="ant3rdPartyLib"/>
        </javac>
        <copy file="src/tasks.properties" todir="${build}"/>
        <path id="antClasspath">
            <path refid="ant3rdPartyLib"/>
            <pathelement location="${build}"/>
        </path>
        <taskdef resource="tasks.properties" classpathref="antClasspath"/>
        <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    </target>

    <target name="clean" description="Removes the build artifacts.">
        <delete dir="${build}"/>
        <delete dir="${tmpDir}"/>
    </target>

    <target name="prepare" depends="antExtensions" description="Reads the ProjectSet PSF file and generates the repository properties for each project listed there.">
        <!-- TODO Have a property that defines the exact path to the PSF file. This helps locating the checkoutDir inside the ProjectSet project. -->
        <fail message="Please define package to build." unless="packageName"/>
        <createProjectList name="projectsList">
            <projectSets>
                <fileset dir="${checkoutDir}/${packageName}" includes="*.psf"/>
            </projectSets>
        </createProjectList>
    </target>

    <target name="updateProject" description="This task should be able to fetch sources from repositories.">
        <!-- TODO Fetching bundles from other repositories needs to be implemented. -->
        <if>
            <not>
                <available file="${checkoutDir}/${projectName}" type="dir"/>
            </not>
            <then>
                <fail message="Project ${projectName} can not be checked out."/>
            </then>
        </if>
    </target>

    <target name="buildProject" description="Copies the build.xml to the bundle if there is not already one and executes it.">
        <echo message="Build bundle ${projectName}"/>
        <setBundleProperties dir="${checkoutDir}" currentBundle="${projectName}">
            <classpath>
                <fileset dir="${bundlesDir}" includes="*.jar"/>
                <dirset dir="${bundlesDir}" includes="*"/>
            </classpath>
        </setBundleProperties>
        <if>
            <available file="${checkoutDir}/${projectName}/build.xml" type="file"/>
        	<then>
        		<copy file="build-project.xml" tofile="${checkoutDir}/${projectName}/build-project.xml" overwrite="true"/>
                <property name="deleteBuildXML" value="build-project.xml"/>
        	</then>
            <else>
                <copy file="build-project.xml" tofile="${checkoutDir}/${projectName}/build.xml" overwrite="true"/>
                <property name="deleteBuildXML" value="build.xml"/>
            </else>
        </if>
        <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="clean"/>
        <!-- TODO include the dist build as a normal buildType in build-project.xml -->
        <if>
            <equals arg1="dist" arg2="${buildType}"/>
            <then>
                <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="dist"/>
            </then>
            <else>
                <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="build" />
            </else>
        </if>
        <if>
            <isset property="deleteBuildXML"/>
            <then>
                <delete file="${checkoutDir}/${projectName}/${deleteBuildXML}"/>
            </then>
        </if>
    </target>

    <target name="buildProjects" depends="antExtensions,prepare" description="Fetches projects from repository, computes build order and builds then each project.">
        <foreach list="${projectsList}" target="updateProject" param="projectName"/>
        <mkdir dir="${bundlesDir}"/> <!-- TODO remove this -->
        <!-- Computes the dependencies and sorts the projects accordingly -->
        <computeBuildOrder dir="${checkoutDir}" propertyName="projectsOrdered" projectList="${projectsList}">
            <classpath>
                <fileset dir="${bundlesDir}" includes="*.jar"/>
                <dirset dir="${bundlesDir}" includes="*"/>
            </classpath>
        </computeBuildOrder>
        <foreach list="${projectsOrdered}" target="buildProject" param="projectName" inheritAll="true"/>
    </target>

    <target name="setBuild" description="Sets the build type to build and install all bundles.">
        <property name="buildType" value="bundle"/>
    </target>

    <target name="build" depends="setBuild,buildProjects" description="Builds and installs all bundles for the specified ProjectSet."/>

    <target name="distBuild" description="Sets the build type to create a tar.gz for uploading to build service.">
        <property name="buildType" value="dist"/>
    </target>

    <target name="dist" depends="distBuild" description="Creates the tar.gz for uploading to the build service.">
        <!-- Packaging files -->
        <property name="packageDir" value="${basedir}/${tmpDir}/${packageName}"/>
        <mkdir dir="${packageDir}"/>
        <copy todir="${packageDir}">
            <fileset dir="${checkoutDir}/${packageName}">
                <exclude name="**${tmpDir}/**"/>
                <exclude name="Todo"/>
            </fileset>
        </copy>
        <!-- Buildsystem -->
        <property name="buildDir" value="${packageDir}/build"/>
        <mkdir dir="${buildDir}"/>
        <copy todir="${buildDir}">
            <fileset dir="${checkoutDir}/build">
                <exclude name="**${tmpDir}/**"/>
                <exclude name="build/**"/>
                <exclude name="Todo"/>
            </fileset>
        </copy>
        <antcall target="buildProjects">
            <param name="packageDir" value="${packageDir}"/>
         </antcall>
        <!-- dpkg-source does not like anything else -->
        <tar destfile="${tmpDir}/${packageName}.tar.gz" compression="gzip">
            <fileset dir="${tmpDir}">
                <include name="${packageName}/**"/>
                <exclude name="${packageName}.tar.gz"/>
            </fileset>
        </tar>
    </target>

    <target name="cpd" description="Find copied and pasted code.">
        <mkdir dir="${logDir}"/>
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"/>
        <cpd minimumTokenCount="100" encoding="US-ASCII" format="xml" outputFile="${logDir}/cpd.xml">
            <fileset dir="${checkoutDir}">
                <include name="**/*.java"/>
            </fileset>
        </cpd>
    </target>

</project>
