<?xml version="1.0" encoding="UTF-8"?>
<project name="Bundle Builder" basedir=".">

    <description>
        Reads a ProjectSet file and builds or uploads all bundles referenced in that ProjectSet file.
    </description>

    <!-- customizable values -->
    <property name="destDir" value=""/><!-- Necessary to build the bundles into a distro package -->
    <property name="prefix" value="/opt/open-xchange"/><!-- Installation path on destination system -->
    <property name="tmpDir" value="tmp"/><!-- Directory for temporary file storage -->
    <property name="distDir" value=""/><!-- Use some tmpDir -->

    <property name="bsProject" value="open-xchange-7-test"/><!-- project name in buildservice -->
    <property name="bsApiUrl" value="http://buildapi.netline.de"/>
    <property name="bsUser" value="oxbuilduser"/>
    <property name="bsPassword" value="openxchange"/>

    <property name="branch" value="master"/>

    <!-- Constants -->
    <property name="mainDir" value=".."/>
    <property name="checkoutDir" value="${mainDir}"/>

    <!-- Install Constants -->
    <property name="bundlesDir" value="${prefix}/bundles"/>

    <import file="antExtensions.xml"/>

    <target name="clean" description="Removes the build artifacts.">
        <delete dir="${build}"/>
        <delete dir="${tmpDir}"/>
    </target>

    <target name="prepare" depends="antExtensions" description="Reads the ProjectSet PSF file and generates the repository properties for each project listed there.">
        <!-- TODO Have a property that defines the exact path to the PSF file. This helps locating the checkoutDir inside the ProjectSet project. -->
        <fail message="Please define package to build." unless="packageName"/>
        <createProjectList name="projectsList">
            <projectSets>
                <fileset dir="${checkoutDir}/${packageName}" includes="*.psf"/>
            </projectSets>
        </createProjectList>
    </target>

    <target name="updateProject" description="This task should be able to fetch sources from repositories.">
        <!-- TODO Fetching bundles from other repositories needs to be implemented. -->
        <if>
            <not>
                <available file="${checkoutDir}/${projectName}" type="dir"/>
            </not>
            <then>
                <fail message="Project ${projectName} can not be checked out."/>
            </then>
        </if>
    </target>

    <target name="buildProject" description="Copies the build.xml to the bundle if there is not already one and executes it.">
        <echo message="Build bundle ${projectName} ${buildType}"/>
        <trycatch>
            <try>
                <if>
                    <available file="${checkoutDir}/${projectName}/build.xml" type="file"/>
                    <then>
                        <copy file="build-project.xml" tofile="${checkoutDir}/${projectName}/build-project.xml" overwrite="true"/>
                        <property name="deleteBuildXML" value="build-project.xml"/>
                    </then>
                    <else>
                        <copy file="build-project.xml" tofile="${checkoutDir}/${projectName}/build.xml" overwrite="true"/>
                        <property name="deleteBuildXML" value="build.xml"/>
                    </else>
                </if>
                <!-- ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="clean"/ -->
                <if>
                    <available file="${destDir}/${bundlesDir}" type="dir"/>
                    <then>
                        <path id="buildClasspath">
                            <path refid="classpath"/>
                            <fileset dir="${destDir}/${bundlesDir}" includes="*.jar"/>
                            <dirset dir="${destDir}/${bundlesDir}" includes="*"/>
                        </path>
                    </then>
                    <else>
                        <path id="buildClasspath" refid="classpath"/>
                    </else>
                </if>
                <!-- TODO include the dist build as a normal buildType in build-project.xml -->
                <if>
                    <equals arg1="dist" arg2="${buildType}"/>
                    <then>
                        <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="dist"/>
                    </then>
                    <else>
                        <setBundleProperties dir="${checkoutDir}" currentBundle="${projectName}">
                            <classpath refid="buildClasspath"/>
                        </setBundleProperties>
                        <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="build"/>
                    </else>
                </if>
            </try>
            <finally>
                <if>
                    <isset property="deleteBuildXML"/>
                    <then>
                        <delete file="${checkoutDir}/${projectName}/${deleteBuildXML}"/>
                    </then>
                </if>
            </finally>
        </trycatch>
    </target>

    <target name="buildProjects" depends="antExtensions,prepare" description="Fetches projects from repository, computes build order and builds then each project.">
        <foreach list="${projectsList}" target="updateProject" param="projectName"/>
        <if>
            <available file="${bundlesDir}" type="dir"/>
            <then>
                <path id="classpath">
                    <fileset dir="${bundlesDir}" includes="*.jar"/>
                    <dirset dir="${bundlesDir}" includes="*"/>
                </path>
            </then>
            <else>
                <path id="classpath"/>
            </else>
        </if>
        <!-- Computes the dependencies and sorts the projects accordingly -->
        <computeBuildOrder dir="${checkoutDir}" propertyName="projectsOrdered" projectList="${projectsList}" strict="false">
            <classpath refid="classpath"/>
        </computeBuildOrder>
        <foreach list="${projectsOrdered}" target="buildProject" param="projectName" inheritAll="true" inheritRefs="true"/>
    </target>

    <target name="setBuild" description="Sets the build type to build and install all bundles.">
        <property name="buildType" value="bundle"/>
    </target>

    <target name="build" depends="setBuild,buildProjects" description="Builds and installs all bundles for the specified ProjectSet."/>

    <target name="setDist" description="Sets the build type to create a tar.gz for uploading to build service.">
        <property name="buildType" value="dist"/>
    </target>

    <target name="readVersion" depends="antExtensions" description="Reads the latest version from the changelog of the package.">
        <loadfile property="firstChangeLogLine" srcFile="${checkoutDir}/${packageName}/debian/changelog">
            <filterchain>
                <headfilter lines="1"/>
            </filterchain>
        </loadfile>
        <propertyregex property="version" input="${firstChangeLogLine}" regexp="^[\w-]+ \(([\d\.]+)-\d+\).*$" select="\1"/>
    </target>

    <target name="dist" depends="setDist,readVersion" description="Creates the tar.gz for uploading to the build service.">
        <!-- Packaging files -->
        <property name="packageDir" value="${basedir}/${tmpDir}/${packageName}-${version}"/>
        <mkdir dir="${packageDir}"/>
        <copy todir="${packageDir}">
            <fileset dir="${checkoutDir}">
                <include name="${packageName}/**"/>
            </fileset>
        </copy>
        <replace file="${packageDir}/${packageName}/debian/control">
            <replacefilter token="@OXVERSION@" value="${version}"/>
        </replace>
        <move todir="${packageDir}">
            <fileset dir="${packageDir}/${packageName}">
                <include name="**"/>
                <exclude name=".*"/>
                <exclude name="*.psf"/>
            </fileset>
        </move>
        <!-- Buildsystem -->
        <property name="buildDir" value="${packageDir}/build"/>
        <mkdir dir="${buildDir}"/>
        <copy todir="${buildDir}">
            <fileset dir="${checkoutDir}/build">
                <include name="**"/>
                <exclude name="${tmpDir}/**"/>
                <exclude name="build/**"/>
                <exclude name="launcher/**"/>
            </fileset>
        </copy>
        <antcall target="buildProjects">
            <param name="packageDir" value="${packageDir}"/>
         </antcall>
        <!-- dpkg-source does not like anything else -->
        <tar destfile="${tmpDir}/${packageName}_${version}.orig.tar.bz2" compression="bzip2" longfile="gnu">
            <fileset dir="${tmpDir}">
                <include name="${packageName}-${version}/**"/>
                <exclude name="${packageName}-${version}.tar.gz"/>
            </fileset>
        </tar>
    </target>

    <target name="debianSource" depends="dist,readVersion" description="Generates the source files for building Debian packages.">
        <exec executable="dpkg-source" dir="${tmpDir}">
            <arg value="-b"/>
            <arg value="-Zbzip2"/>
            <arg path="${tmpDir}/${packageName}-${version}"/>
        </exec>
    </target>

    <target name="upload" depends="debianSource" description="Uploads a package to the build system.">
        <!-- TODO project must be defined somewhere -->
        <uploadSource url="${bsApiUrl}" user="${bsUser}" pass="${bsPassword}" project="${bsProject}" packageName="${packageName}">
            <files>
                <fileset dir="${tmpDir}">
                    <exclude name="${packageName}-${version}/**"/>
                    <include name="${packageName}_${version}*"/>
                </fileset>
            </files>
        </uploadSource>
    </target>

</project>
