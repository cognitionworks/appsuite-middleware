<?xml version="1.0" encoding="UTF-8"?>
<project name="Bundle Builder" basedir=".">

    <!-- customizable values -->
    <property name="prefix" value="/opt/open-xchange"/>
	<property name="distDir" value=""/>

    <property name="packageName" value="open-xchange-common"/>
	<property name="branch" value="master"/>

	<!-- Constants -->
    <property name="mainDir" value=".."/>
    <property name="checkoutDir" value="${mainDir}"/>
    <property name="logDir" value="${mainDir}/log"/>

    <!-- Install Constants -->
    <property name="bundlesDir" value="${prefix}/bundles"/>

	<target name="antExtensions">
        <path id="ant3rdPartyLib">
            <fileset dir="lib" includes="*.jar"/>
        </path>
        <property name="build" value="build"/>
        <mkdir dir="${build}"/>
        <javac srcdir="src" destdir="${build}" debug="true" debuglevel="lines,vars,source" encoding="US-ASCII" source="1.5" compiler="javac1.5" target="1.5" includeantruntime="false">
            <classpath refid="ant3rdPartyLib"/>
        </javac>
        <copy file="src/tasks.properties" todir="${build}"/>
        <path id="antClasspath">
            <path refid="ant3rdPartyLib"/>
            <pathelement location="${build}"/>
        </path>
        <taskdef resource="tasks.properties" classpathref="antClasspath"/>
		<taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
    </target>

    <target name="clean">
        <delete dir="${build}"/>
    </target>

    <target name="prepare" depends="antExtensions">
        <!-- reads the project sets and generates the ant properties for each project -->
        <createProjectList name="projectsList">
            <projectSets>
                <fileset dir="${checkoutDir}/${packageName}" includes="*.psf"/>
            </projectSets>
        </createProjectList>
    </target>

    <target name="updateProject">
    	<!-- TODO Fetching bundles from other repositories needs to be implemented. --> 
    </target>

    <target name="buildProject">
    	<!-- TODO only copy if build.xml is not there for custom builds -->
        <if>
            <not>
                <available file="${checkoutDir}/${projectName}/build.xml" type="file"/>
            </not>
            <then>
                <copy file="build-project.xml" tofile="${checkoutDir}/${projectName}/build.xml" overwrite="true"/>
                <property name="deleteBuildXML" value="true"/>
            </then>
        </if>
        <ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="clean"/>
    	<if>
    		<equals arg1="dist" arg2="${buildType}"/>
    		<then>
    			<ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="dist"/>
    		</then>
			<else>
				<ant dir="${checkoutDir}/${projectName}" antfile="build.xml" target="build"/>
    		</else>
    	</if>
        <if>
            <equals arg1="${deleteBuildXML" arg2="true"/>
            <then>
                <delete file="${checkoutDir}/${projectName}/build.xml" />
            </then>
        </if>
    </target>

	<target name="buildProjects" depends="antExtensions,prepare">
        <foreach list="${projectsList}" target="updateProject" param="projectName"/>
        <!-- Computes the dependencies and sorts the projects accordingly -->
		<mkdir dir="${bundlesDir}"/>
        <computeBuildOrder dir="${checkoutDir}" propertyName="projectsOrdered" projectList="${projectsList}">
            <classpath>
                <dirset dir="${bundlesDir}" includes="com.openexchange.*"/>
                <fileset dir="${bundlesDir}" includes="*.jar"/>
            </classpath>
        </computeBuildOrder>
        <foreach list="${projectsOrdered}" target="buildProject" param="projectName" inheritAll="true"/>
    </target>

    <target name="setBuild">
        <property name="buildType" value="bundle"/>
    </target>

    <target name="build" depends="setBuild,buildProjects"/>

	<target name="distBuild">
        <property name="buildType" value="dist"/>
    </target>

    <target name="dist" depends="distBuild">
    	<!-- Packaging files -->
    	<property name="packageDir" value="${distDir}/${packageName}"/>
        <mkdir dir="${packageDir}"/>
		<copy todir="${packageDir}">
            <fileset dir="${mainDir}/${packageName}">
                <exclude name="**${distDir}/**"/>
                <exclude name="Todo"/>
            </fileset>
		</copy>
    	<!-- Buildsystem -->
    	<property name="buildDir" value="${distDir}/${packageName}/build"/>
        <mkdir dir="${buildDir}"/>
        <copy todir="${buildDir}">
            <fileset dir=".">
                <exclude name="**${distDir}/**"/>
                <exclude name="Todo"/>
            </fileset>
        </copy>
    	<antcall target="buildProjects"/>
        <delete file="${packageName}.tar.gz"/>
        <tar destfile="${packageName}.tar.gz" basedir="${distDir}" compression="gzip">
        	<fileset dir="${distDir}">
    			<include name="**"/>
			    <exclude name="exclude"/>
			</fileset>
    	</tar>
		<fail message="Todo"/>
        <!-- dpkg-source does not like anything else -->
        <delete dir="${distDir}"/>
	</target>

	<target name="cpd">
        <mkdir dir="${logDir}"/>
        <taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask"/>
        <cpd minimumTokenCount="100" encoding="US-ASCII" format="xml" outputFile="${logDir}/cpd.xml">
            <fileset dir="${checkoutDir}">
                <include name="**/*.java"/>
            </fileset>
        </cpd>
    </target>

</project>
