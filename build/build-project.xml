<?xml version="1.0" encoding="UTF-8"?>
<project name="Build bundle">

    <!-- Constants -->
	<property name="mainSrcDir" value="src"/>
    <property name="mainBinDir" value="build"/>
    <property name="simSrcDir" value="sim"/>
    <property name="simBinDir" value="sim-build"/>
    <property name="testSrcDir" value="test"/>
    <property name="testBinDir" value="test-build"/>
    <property name="libDir" value="lib"/>
    <property name="jarsDir" value="jars"/>
    <property file="META-INF/MANIFEST.MF"/>
    <property file="build.properties"/>
    <property name="testJarFile" value="${bundlesDir}/${Bundle-SymbolicName}-test.jar"/>

    <target name="prepareClasspath" depends="testForMainBuild">
        <propertycopy name="reqClasspath" from="${projectName}.requiredClasspath" override="true"/>
        <!-- echo message="${reqClasspath}"/ -->
        <setProjectDependencies projectName="${projectName}" binDir="${mainBinDir}" pathId="mainDependencies" deepPathId="mainDeepDependencies"/>
        <setProjectDependencies projectName="${projectName}" binDir="${simBinDir}" pathId="simDependencies" deepPathId="simDeepDependencies"/>
        <setProjectDependencies projectName="${projectName}" binDir="${testBinDir}" pathId="testDependencies" deepPathId="testDeepDependencies"/>
        <path id="mainCompileClasspath">
            <path refid="mainDependencies"/>
        </path>
        <!-- property name="printablePath" refid="mainCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <path id="simCompileClasspath">
            <path refid="mainCompileClasspath"/>
            <path refid="simDependencies"/>
            <path refid="mainBinClasses"/>
        </path>
        <!-- property name="printablePath" refid="simCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <path id="testCompileClasspath">
            <path refid="simCompileClasspath"/>
            <path refid="testDependencies"/>
            <pathelement location="${simBinDir}"/>
        </path>
        <!-- property name="printablePath" refid="testCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <path id="testRunClasspath">
            <path refid="testCompileClasspath"/>
            <path refid="testDeepDependencies"/>
            <pathelement location="${bundlesDir}/${Bundle-SymbolicName}-test.jar"/>
        </path>
    </target>

    <target name="compile">
        <mkdir dir="${binDir}"/>
        <javac srcdir="${srcDir}" destdir="${binDir}" debug="true" encoding="US-ASCII" source="1.5" target="1.5" includeAntRuntime="false">
            <classpath refid="${compileClasspath}"/>
        </javac>
    </target>

    <target name="testFor3rdPartyLib">
        <condition property="3rdPartyLib">
            <contains string="${reqClasspath}" substring="${projectName}/${libDir}"/>
        </condition>
    </target>

    <target name="bundle" depends="testFor3rdPartyLib">
        <delete file="${jarsDir}/${Bundle-SymbolicName}.jar"/>
        <delete dir="${jarsDir}/${Bundle-SymbolicName}"/>
        <if>
            <istrue value="${3rdPartyLib}"/>
            <then>
                <mkdir dir="${jarsDir}/${Bundle-SymbolicName}"/>
                <jar jarfile="${jarsDir}/${Bundle-SymbolicName}/${Bundle-SymbolicName}.jar">
                    <fileset dir="${binDir}"/>
                </jar>
                <copy todir="${jarsDir}/${Bundle-SymbolicName}">
                    <fileset dir=".">
                        <include name="META-INF/MANIFEST.MF"/>
                    </fileset>
                </copy>
                <foreach list="${reqClasspath}" target="add3rdPartyLibToBundle" param="lib" inheritAll="true"/>
                <!-- Eclipse puts "." as path into MANIFEST.MF. We need to replace this with Bundle-SymbolicName.jar -->
                <replace file="${jarsDir}/${Bundle-SymbolicName}/META-INF/MANIFEST.MF">
                    <replacefilter token="Bundle-ClassPath: .," value="Bundle-ClassPath: ${Bundle-SymbolicName}.jar,"/>
                </replace>
            </then>
            <else>
                <jar jarfile="${jarsDir}/${Bundle-SymbolicName}.jar" manifest="META-INF/MANIFEST.MF">
                    <fileset dir="${binDir}"/>
                </jar>
            </else>
        </if>
    </target>

    <target name="add3rdPartyLibToBundle">
        <if>
            <matches string="${lib}" pattern="${projectName}/${libDir}/.*\.jar"/>
            <then>
                <propertyregex property="jarFile" input="${lib}" regexp=".*/(${libDir}/.*\.jar)" select="\1"/>
                <copy todir="${jarsDir}/${Bundle-SymbolicName}">
                    <fileset dir=".">
                        <include name="${jarFile}"/>
                    </fileset>
                </copy>
            </then>
        </if>
    </target>

    <target name="installBundle">
        <mkdir dir="${destDir}/${bundlesDir}"/>
        <copy todir="${destDir}/${bundlesDir}">
            <fileset dir="${jarsDir}">
                <!-- OSGi platform only contains jars directory and all *.jar from there must be installed. -->
                <include name="*.jar"/>
                <!-- Bundle is generated as a directory due to 3rd party libs -->
                <include name="${Bundle-SymbolicName}/**"/>
            </fileset>
        </copy>
    </target>

    <target name="makeIni">
        <!-- TODO fragment without @start -->
        <propertyregex property="bundleName" input="${bundleFileOrDir}" regexp="^.*/(.*?)(\.jar)?$" select="\1"/>
        <propertyregex property="fileOrDir" input="${bundleFileOrDir}" regexp="^.*/(.*?(\.jar)?)$" select="\1"/>
        <echo file="${destDir}/${bundle.dDir}/${bundleName}.ini" message="${bundlesDir}/${fileOrDir}@start${line.separator}"/>
    </target>

    <target name="installConfig">
        <mkdir dir="${destDir}/${bundle.dDir}"/>
        <foreach target="makeIni" param="bundleFileOrDir" inheritAll="true">
            <path>
                <!-- OSGi platform only contains jars directory and all *.jar from there must be installed. -->
                <fileset dir="${jarsDir}" >
                    <include name="*.jar"/>
                </fileset>
                <!-- Bundle is generated as a directory due to 3rd party libs -->
                <dirset dir="${jarsDir}">
                    <include name="${Bundle-SymbolicName}"/>
                </dirset>
            </path>
        </foreach>
        <!-- TODO configuration files -->
    </target>

    <target name="install" depends="installBundle,installConfig"/>

    <target name="testForMainBuild">
        <if>
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
                <available file="${mainSrcDir}" type="dir"/>
            </and>
            <then>
                <property name="buildMain" value="true"/>
                <path id="mainBinClasses">
                    <pathelement location="${mainBinDir}"/>
                </path>
            </then>
            <else>
                <path id="mainBinClasses">
                    <pathelement location="${bundlesDir}/${projectName}.jar"/>
                </path>
            </else>
        </if>
    </target>

    <target name="buildMain" depends="testForMainBuild" if="buildMain">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${mainSrcDir}"/>
            <param name="binDir" value="${mainBinDir}"/>
            <param name="compileClasspath" value="mainCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForBundleMain">
        <condition property="bundleMain">
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
                <available file="${mainBinDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="bundleMain" depends="testForBundleMain" if="bundleMain">
        <antcall target="bundle" inheritrefs="true">
            <param name="binDir" value="${mainBinDir}"/>
        </antcall>
    </target>

    <target name="testForMainInstall">
        <condition property="installMain">
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
                <available file="${jarsDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="installMain" depends="testForMainInstall" if="installMain">
        <antcall target="install" inheritrefs="true">
            <param name="binDir" value="${mainBinDir}"/>
        </antcall>
    </target>

    <target name="testForSimBuild">
        <condition property="buildSim">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <available file="${simSrcDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="buildSim" depends="testForSimBuild" if="buildSim">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${simSrcDir}"/>
            <param name="binDir" value="${simBinDir}"/>
            <param name="compileClasspath" value="simCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForTestBuild">
        <condition property="buildTest">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <available file="${testSrcDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="buildTest" depends="testForTestBuild" if="buildTest">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${testSrcDir}"/>
            <param name="binDir" value="${testBinDir}"/>
            <param name="compileClasspath" value="testCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForTestJar">
        <condition property="testJar">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <or>
                    <available file="${simSrcDir}" type="dir"/>
                    <available file="${testSrcDir}" type="dir"/>
                </or>
            </and>
        </condition>
    </target>

    <target name="addSimToJar" if="buildSim">
        <jar jarfile="${testJarFile}">
            <fileset dir="${simBinDir}"/>
        </jar>
    </target>

    <target name="addTestToJar" if="buildTest">
        <jar jarfile="${testJarFile}" update="true">
            <fileset dir="${testBinDir}"/>
        </jar>
    </target>

    <target name="testJar" depends="testForTestJar,addSimToJar,addTestToJar" if="testJar">
        <fail message="not implemented"/>
    </target>

    <target name="testForTestRun">
        <condition property="runTests">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <or>
                    <available file="${simSrcDir}" type="dir"/>
                    <available file="${testSrcDir}" type="dir"/>
                </or>
            </and>
        </condition>
    </target>

    <target name="runTests" depends="testForTestRun" if="runTests">
        <mkdir dir="${logDir}"/>
        <junit errorProperty="testFailed" failureProperty="testFailed" showoutput="yes" printsummary="yes" fork="yes" dir="${basedir}">
            <classpath>
                <path refid="testRunClasspath"/>
                <!-- Code coverage with emma -->
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${logDir}">
                <zipfileset src="${testJarFile}" includes="**/UnitTests.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="build" depends="prepareClasspath,buildMain,bundleMain,installMain,buildSim,buildTest,testJar,runTests"/>

	<target name="dist">
		<property name="destDir" value="${distDir}/${packageName}/${projectName}"/>
        <mkdir dir="${destDir}"/>
        <copy todir="${destDir}">
            <fileset dir=".">
                <exclude name="**${distDir}/**"/>
                <exclude name="Todo"/>
            </fileset>
        </copy>
	</target>

    <target name="clean">
        <delete dir="${mainBinDir}"/>
        <delete dir="${simBinDir}"/>
        <delete dir="${testBinDir}"/>
        <delete file="${testJarFile}"/>
    </target>

</project>
