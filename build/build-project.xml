<?xml version="1.0" encoding="UTF-8"?>
<project name="Build bundle">

    <description>
        This is the universal build script to build all bundles.
    </description>

    <!-- customizable values -->
    <property name="destDir" value=""/><!-- Necessary to build the bundles into a distro package -->
    <property name="prefix" value="/opt/open-xchange"/><!-- Installation path on destination system -->

    <!-- Constants -->
	<property name="mainSrcDir" value="src"/>
    <property name="mainBinDir" value="build"/>
    <property name="simSrcDir" value="sim"/>
    <property name="simBinDir" value="sim-build"/>
    <property name="testSrcDir" value="test"/>
    <property name="testBinDir" value="test-build"/>
    <property name="libDir" value="lib"/>
    <property name="jarsDir" value="jars"/>
    <property file="META-INF/MANIFEST.MF"/>
    <property file="build.properties"/>
    <property name="testJarFile" value="${bundlesDir}/${Bundle-SymbolicName}-test.jar"/>

    <!-- Install Constants -->
    <property name="bundlesDir" value="${prefix}/bundles"/>
    <property name="confInstallDir" value="${prefix}/etc"/>
    <property name="bundle.dDir" value="${prefix}/osgi/bundle.d"/>

    <target name="prepareClasspath" depends="testForMainBuild" description="Prepares all the necessary class path for compiling or running.">
        <!-- Copies the required class path from the project specific property to an easier named one. -->
        <propertycopy name="requiredClasspath" from="${projectName}.requiredClasspath" override="true"/>
        <echo message="${requiredClasspath}"/>
        <!-- Defines the class path required for the main classes of the bundle. -->
        <setProjectDependencies projectName="${projectName}" binDir="${mainBinDir}" pathId="mainDependencies" projectProperty="requiredClasspath"/>
        <path id="mainCompileClasspath">
            <!-- Can only contain main source directories of other bundles or the already built required bundles -->
            <path refid="mainDependencies"/>
        </path>
        <!-- property name="printablePath" refid="mainCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <!-- Defines the class path required for the sim classes of the bundle. -->
        <setProjectDependencies projectName="${projectName}" binDir="${simBinDir}" pathId="simDependencies" projectProperty="requiredClasspath"/>
        <path id="simCompileClasspath">
            <!-- Can contain main and sim source directories of other bundles or the already built required bundles -->
            <path refid="mainCompileClasspath"/>
            <path refid="mainBinClasses"/><!-- Defined in testForMainBuild depending on wether the bundle is already installed and build -->
            <path refid="simDependencies"/>
        </path>
        <!-- property name="printablePath" refid="simCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <!-- Defines the class path required for the test classes of the bundle. -->
        <setProjectDependencies projectName="${projectName}" binDir="${testBinDir}" pathId="testDependencies" projectProperty="requiredClasspath"/>
        <path id="testCompileClasspath">
            <!-- Can contain main,sim and test source directories of other bundles or the already built required bundles -->
            <path refid="simCompileClasspath"/>
            <pathelement location="${simBinDir}"/>
            <path refid="testDependencies"/>
        </path>
        <!-- property name="printablePath" refid="testCompileClasspath"/>
        <echo message="${printablePath}"/ -->
        <!-- Defines the class path required to run the test classes of the bundle. -->
        <setProjectDependencies projectName="${projectName}" binDir="${testBinDir}" pathId="testDeepDependencies" projectProperty="deepClasspath"/>
        <path id="testRunClasspath">
            <!-- Deep dependencies are required because to run for tests required classes again their requirements are necessary. ;-) -->
            <path refid="testCompileClasspath"/>
            <path refid="testDeepDependencies"/>
            <pathelement location="${bundlesDir}/${Bundle-SymbolicName}-test.jar"/>
        </path>
    </target>

    <target name="prepare" description="Empty target that can be overwritten by some bundles."/>

    <target name="compile" description="Generic compile target used for compiling src, sim and test folder.">
        <mkdir dir="${binDir}"/>
        <javac srcdir="${srcDir}" destdir="${binDir}" debug="true" encoding="US-ASCII" source="1.5" target="1.5" includeAntRuntime="false">
            <classpath refid="${compileClasspath}"/>
        </javac>
    </target>

    <target name="testFor3rdPartyLib" description="Sets 3rdPartyLib to true if the bundle contains a lib directory containing JAR files.">
        <condition property="3rdPartyLib">
            <contains string="${requiredClasspath}" substring="${projectName}/${libDir}"/>
        </condition>
    </target>

    <target name="bundle" depends="testFor3rdPartyLib" description="Generates in the ${jarsDir} directory the final bundle.">
        <delete file="${jarsDir}/${Bundle-SymbolicName}.jar"/>
        <delete dir="${jarsDir}/${Bundle-SymbolicName}"/>
        <if>
            <istrue value="${3rdPartyLib}"/>
            <then>
                <mkdir dir="${jarsDir}/${Bundle-SymbolicName}"/>
            	<if>
            		<available file="${binDir}" type="dir"/>
            		<then>
		                <jar jarfile="${jarsDir}/${Bundle-SymbolicName}/${Bundle-SymbolicName}.jar">
		                    <fileset dir="${binDir}"/>
		                </jar>
        			</then>
        		</if>
                <copy todir="${jarsDir}/${Bundle-SymbolicName}">
                    <fileset dir=".">
                        <include name="META-INF/MANIFEST.MF"/>
                    </fileset>
                </copy>
                <foreach list="${requiredClasspath}" target="add3rdPartyLibToBundle" param="lib" inheritAll="true"/>
                <!-- Eclipse puts "." as path into MANIFEST.MF. We need to replace this with Bundle-SymbolicName.jar -->
                <replace file="${jarsDir}/${Bundle-SymbolicName}/META-INF/MANIFEST.MF">
                	<!-- TODO write a regex that is able to detect and replace the . path in every possible row of the Bundle-Classpath -->
                    <replacefilter token="Bundle-ClassPath: .," value="Bundle-ClassPath: ${Bundle-SymbolicName}.jar,"/>
                </replace>
            </then>
            <else>
                <jar jarfile="${jarsDir}/${Bundle-SymbolicName}.jar" manifest="META-INF/MANIFEST.MF">
                    <fileset dir="${binDir}"/>
                </jar>
            </else>
        </if>
    </target>

    <target name="add3rdPartyLibToBundle" description="Sub target to add JARs from the ${libDir} directory to the final bundle.">
        <if>
            <matches string="${lib}" pattern="${projectName}/${libDir}/.*\.jar"/>
            <then>
                <propertyregex property="jarFile" input="${lib}" regexp=".*/(${libDir}/.*\.jar)" select="\1"/>
                <copy todir="${jarsDir}/${Bundle-SymbolicName}">
                    <fileset dir=".">
                        <include name="${jarFile}"/>
                    </fileset>
                </copy>
            </then>
        </if>
    </target>

    <target name="installBundle" description="Installs all bundles located in the ${jarsDir} directory into the final destination.">
        <mkdir dir="${destDir}/${bundlesDir}"/>
        <copy todir="${destDir}/${bundlesDir}">
            <fileset dir="${jarsDir}">
                <!-- OSGi platform only contains jars directory and all *.jar from there must be installed. -->
                <include name="*.jar"/>
                <!-- Bundle is generated as a directory due to 3rd party libs -->
                <include name="${Bundle-SymbolicName}/**"/>
            </fileset>
        </copy>
    </target>

    <target name="makeIni" description="Creates the .ini file to include this bundle when starting the OSGi framework.">
        <!-- TODO fragment without @start -->
        <propertyregex property="bundleName" input="${bundleFileOrDir}" regexp="^.*/(.*?)(\.jar)?$" select="\1"/>
        <propertyregex property="fileOrDir" input="${bundleFileOrDir}" regexp="^.*/(.*?(\.jar)?)$" select="\1"/>
        <echo file="${destDir}/${bundle.dDir}/${bundleName}.ini" message="${bundlesDir}/${fileOrDir}@start${line.separator}"/>
    </target>

    <target name="installConfig" description="Installs the .ini file and the bundles configuration files.">
        <mkdir dir="${destDir}/${bundle.dDir}"/>
        <foreach target="makeIni" param="bundleFileOrDir" inheritAll="true">
            <path>
                <!-- OSGi platform only contains jars directory and all *.jar from there must be installed. -->
                <fileset dir="${jarsDir}" >
                    <include name="*.jar"/>
                </fileset>
                <!-- Bundle is generated as a directory due to 3rd party libs -->
                <dirset dir="${jarsDir}">
                    <include name="${Bundle-SymbolicName}"/>
                </dirset>
            </path>
        </foreach>
        <!-- TODO configuration files to confInstallDir -->
    </target>

    <target name="install" depends="installBundle,installConfig" description="Combines installBundle and installConfig targets."/>

	<target name="prepareBuild" description="Executes a currently empty and overwritable prepare step before building the sources.">
		<antcall target="prepare" inheritrefs="true">
		    <param name="srcDir" value="${mainSrcDir}"/>
	    </antcall>
	</target>

    <target name="testForMainBuild" description="Tests if the main sources need to be compiled.">
        <if>
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
                <available file="${mainSrcDir}" type="dir"/>
            </and>
            <then>
                <property name="buildMain" value="true"/>
                <path id="mainBinClasses">
                    <pathelement location="${mainBinDir}"/>
                </path>
            </then>
            <else>
                <path id="mainBinClasses">
                    <pathelement location="${bundlesDir}/${projectName}.jar"/>
                </path>
            </else>
        </if>
    </target>

    <target name="buildMain" depends="testForMainBuild" if="buildMain" description="Compiles the sources from the main source directory.">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${mainSrcDir}"/>
            <param name="binDir" value="${mainBinDir}"/>
            <param name="compileClasspath" value="mainCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForBundleMain" depends="testFor3rdPartyLib" description="Tests if the main classes need to be put into a bundle.">
        <condition property="bundleMain">
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
            	<or>
                	<available file="${mainBinDir}" type="dir"/>
            		<istrue value="${3rdPartyLib}"/>
        		</or>
            </and>
        </condition>
    </target>

    <target name="bundleMain" depends="testForBundleMain" if="bundleMain" description="Puts the main classes into a bundle file or directory.">
        <antcall target="bundle" inheritrefs="true">
            <param name="binDir" value="${mainBinDir}"/>
        </antcall>
    </target>

    <target name="testForMainInstall" description="Tests if the main bundle needs to be installed.">
        <condition property="installMain">
            <and>
                <equals arg1="${buildType}" arg2="bundle"/>
                <available file="${jarsDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="installMain" depends="testForMainInstall" if="installMain" description="Installs the main bundle in the target destination.">
        <antcall target="install" inheritrefs="true">
            <param name="binDir" value="${mainBinDir}"/>
        </antcall>
    </target>

    <target name="testForSimBuild" description="Tests if the sources in the sim source directory need to be compiled.">
        <condition property="buildSim">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <available file="${simSrcDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="buildSim" depends="testForSimBuild" if="buildSim" description="Compiles the sources from the sim source directory.">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${simSrcDir}"/>
            <param name="binDir" value="${simBinDir}"/>
            <param name="compileClasspath" value="simCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForTestBuild" description="Tests if the sources in the test source directory need to be compiled.">
        <condition property="buildTest">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <available file="${testSrcDir}" type="dir"/>
            </and>
        </condition>
    </target>

    <target name="buildTest" depends="testForTestBuild" if="buildTest" description="Compiles the sources from the test source directory.">
        <antcall target="compile" inheritrefs="true">
            <param name="srcDir" value="${testSrcDir}"/>
            <param name="binDir" value="${testBinDir}"/>
            <param name="compileClasspath" value="testCompileClasspath"/>
        </antcall>
    </target>

    <target name="testForTestJar" description="Tests if a JAR containing the sim and the test classes needs to be created.">
        <condition property="testJar">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <or>
                    <available file="${simBinDir}" type="dir"/>
                    <available file="${testBinDir}" type="dir"/>
                </or>
            </and>
        </condition>
    </target>

    <target name="addSimToJar" if="buildSim" description="Adds the classes from the sim source directory to the test JAR.">
        <jar jarfile="${testJarFile}">
            <fileset dir="${simBinDir}"/>
        </jar>
    </target>

    <target name="addTestToJar" if="buildTest" description="Adds the classes from the test source directory to the test JAR.">
        <jar jarfile="${testJarFile}" update="true">
            <fileset dir="${testBinDir}"/>
        </jar>
    </target>

    <target name="testJar" depends="testForTestJar,addSimToJar,addTestToJar" if="testJar" description="Creates the JAR file containing the sim and test classes.">
        <fail message="not implemented"/>
    </target>

    <target name="testForTestRun" description="Tests if the tests needs to be executed.">
        <condition property="runTests">
            <and>
                <equals arg1="${buildType}" arg2="tests"/>
                <or>
                    <available file="${simBinDir}" type="dir"/>
                    <available file="${testBinDir}" type="dir"/>
                </or>
            </and>
        </condition>
    </target>

    <target name="runTests" depends="testForTestRun" if="runTests" description="Runs the bundle internal JUnit tests.">
        <mkdir dir="${logDir}"/>
        <junit errorProperty="testFailed" failureProperty="testFailed" showoutput="yes" printsummary="yes" fork="yes" dir="${basedir}">
            <classpath>
                <path refid="testRunClasspath"/>
                <!-- Code coverage with emma -->
            </classpath>
            <formatter type="brief" usefile="false"/>
            <formatter type="xml"/>
            <batchtest todir="${logDir}">
                <zipfileset src="${testJarFile}" includes="**/UnitTests.class"/>
            </batchtest>
        </junit>
    </target>

    <target name="build" depends="prepareClasspath,prepareBuild,buildMain,bundleMain,installMain,buildSim,buildTest,testJar,runTests" description="Main build target combining all different possible build types."/>

	<target name="dist" description="Target to copy bundle for a build on the build service.">
		<property name="destinationDir" value="${packageDir}/${projectName}"/>
        <mkdir dir="${destinationDir}"/>
        <copy todir="${destinationDir}">
            <fileset dir="${basedir}">
                <exclude name="build.xml"/>
            </fileset>
        </copy>
	</target>

    <target name="clean" description="Cleans the build artifacts.">
        <delete dir="${mainBinDir}"/>
        <delete dir="${simBinDir}"/>
        <delete dir="${testBinDir}"/>
        <delete file="${testJarFile}"/>
    </target>

</project>
