<project name="Open-Xchange Groupware" default="default" basedir=".">

    <description>
        Open-Xchange Collaboration Suite Server
    </description>

    <!-- Customizable values -->
    <!-- This values must be changed for defining other installation places -->
    <property name="destdir" value=""/>
    <property name="prefix" location="/opt/open-xchange"/>
    <property name="log.install.dir" value="/var/log/open-xchange"/>
    <property name="distribution" value="debian"/>
    <property file="VERSION"/>
    <property file="PVERSION"/>

    <!-- Constants -->
    <property name="tmp.dir" value="tmp"/>
    <property name="conf.dir" value="conf/groupware"/>
    <property name="i18n.dir" location="i18n"/>
    <property name="bin.dir" value="sbin"/>

    <property name="buildnumber" value="${pversion}"/>

    <property file="META-INF/MANIFEST.MF"/>
    <property file="build.properties"/>

    <fileset dir="." id="metainf">
        <include name="META-INF/**"/>
        <exclude name="CVS"/>
    </fileset>

    <!-- Install Constants -->
    <property name="bundlesdir" value="${destdir}${prefix}/bundles"/>
	<property name="project.name" value="${Bundle-SymbolicName}" />
	<property name="version" value="${Bundle-Version}"/>
	<property name="composite.name" value="${project.name}_${version}" />
		
    <!-- Replacements -->
    <property name="lib.install.dir" value="${prefix}/lib"/>
    <property name="lib.install.copy.dir" location="${destdir}${lib.install.dir}"/>
    <property name="conf.install.dir" value="${prefix}/etc/groupware"/>
    <property name="conf.install.copy.dir" location="${destdir}${conf.install.dir}"/>
    <property name="log.install.copy.dir" location="${destdir}${log.install.dir}"/>
    <property name="bin.install.dir" value="${prefix}/sbin/"/>
    <property name="bin.install.copy.dir" location="${destdir}${bin.install.dir}"/>

    <!-- Replacements in Version.java.in -->
    <filterset id="version">
        <filter token="replaceVersion" value="${version}" />
        <filter token="replaceBuildnumber" value="${buildnumber}" />
        <filter token="replaceCodename" value="${codename}" />
    </filterset>

    <!-- Bundle dependencies -->
    <property name="commonBundle" value="com.openexchange.common"/>

    <!-- JAR names for classpath -->
    <property name="osgijar" value="org.eclipse.osgi_3.3.0.v20070530.jar"/>
    <property name="osgiservicesjar" value="org.eclipse.osgi.services_3.1.200.v20070605.jar"/>
    <property name="servletjar" value="javax.servlet_2.4.0.v200706111738.jar" />
    <property name="commonsloggingjar" value="org.apache.commons.logging_1.0.4.v200706111724.jar" />
    <property name="activationjar" value="activation.jar" />
    <property name="commonscodecjar" value="commons-codec-1.3.jar" />
    <property name="commonsfileuploadjar" value="commons-fileupload.jar" />
    <property name="commonshttpclientjar" value="commons-httpclient-2.0.2.jar" />
    <property name="commonsiojar" value="commons-io.jar" />
    <property name="jakartawebdavjar" value="jakarta-slide-webdavlib-2.1.jar" />
    <property name="jcsjar" value="jcs-1.2.7.9.2.jar" />
    <property name="jdomjar" value="jdom.jar" />
    <property name="jsonjar" value="json.jar" />
    <property name="mailjar" value="mail.jar" />
    <property name="mysqljdbcjar" value="mysql-connector-java-3.1.13-bin.jar" />
    <property name="springbeanjar" value="spring-beans_1.2.7.jar" />
    <property name="springcorejar" value="spring-core_1.2.7.jar" />
    <property name="tnefjar" value="tnef.jar" />

    <!-- Classpath -->
    <path id="project.classpath">
        <pathelement location="${bundlesdir}/${osgijar}"/>
        <pathelement location="${bundlesdir}/${osgiservicesjar}"/>
        <pathelement location="${bundlesdir}/${servletjar}"/>
        <pathelement location="${bundlesdir}/${servletjar}"/>
        <pathelement location="${bundlesdir}/${commonsloggingjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${activationjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${commonscodecjar}" />
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${commonsfileuploadjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${commonshttpclientjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${commonsiojar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${jakartawebdavjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${jcsjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${jdomjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${jsonjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${mailjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${mysqljdbcjar}"/>
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${springbeanjar}" />
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${springcorejar}" />
        <pathelement location="${bundlesdir}/${commonBundle}/lib/${tnefjar}" />
    </path>

    <!-- JARs for running server -->
    <property name="serverJar" value="${composite.name}.jar"/>
    <fileset dir="${tmp.dir}" id="server-jars">
        <include name="${serverJar}"/>
        <!-- TODO -->
        <include name="ox_languages.jar"/>
    </fileset>

    <!-- I18N Properties -->
    <property name="xgettext" value="xgettext"/>
    <fileset id="i18n.sources" dir="${source..}">
        <include name="com/openexchange/groupware/i18n/*.java"/>
    </fileset>
    <property name="msgfmt" value="msgfmt"/>
    <fileset id="i18n.pos" dir="${i18n.dir}">
        <include name="**/*.po"/>
    </fileset>
    <property name="java_apt" value="apt"/>
	<property name="msgcmp" value="msgcmp"/>

    <!-- Compile -->
    <target name="prepare">
        <mkdir dir="${output..}"/>
        <mkdir dir="${tmp.dir}"/>
    </target>

    <target name="compile" depends="prepare,patchVersionJava">
        <javac srcdir="${source..}" destdir="${output..}" debug="true"
            encoding="US-ASCII" source="1.5" compiler="javac1.5" target="1.5">
            <classpath refid="project.classpath" />
        </javac>
    </target>

    <target name="jar" depends="compile">
        <jar jarfile="${tmp.dir}/${composite.name}.jar"
            manifest="META-INF/MANIFEST.MF">
            <fileset dir="${output..}"/>
        </jar>
    </target>

    <!-- TODO add create-lang-jar -->
    <target name="build" depends="jar"/>

    <!-- Install targets -->

    <target name="installJars" depends="build">
        <mkdir dir="${bundlesdir}"/>
        <copy todir="${bundlesdir}" overwrite="true">
            <fileset refid="server-jars" />
        </copy>
    </target>

    <target name="patchConfig" depends="prepare">
        <property name="patch.conf.dir" value="${tmp.dir}/${conf.dir}"/>
        <mkdir dir="${patch.conf.dir}"/>
        <copy todir="${patch.conf.dir}" overwrite="true">
            <fileset dir="${conf.dir}"/>
        </copy>
        <antcall target="patchConfigFiles">
            <param name="conf.subst.patch" value="${conf.install.dir}"/>
        </antcall>
    </target>

    <target name="installConfig" depends="patchConfig">
        <mkdir dir="${conf.install.copy.dir}"/>
        <copy todir="${conf.install.copy.dir}" overwrite="true">
            <fileset dir="${patch.conf.dir}">
            	<include name="**" />
                <exclude name="oxfunctions.sh"/>
                <exclude name="*.in"/>
                <exclude name="CVS"/>
            </fileset>
        </copy>
    </target>

    <target name="patchScripts" depends="prepare">
        <property name="patch.bin.dir" value="${tmp.dir}/${bin.dir}"/>
        <mkdir dir="${patch.bin.dir}"/>
        <copy todir="${patch.bin.dir}" overwrite="true">
            <fileset dir="${bin.dir}"/>
        </copy>
        <antcall target="patchBinFiles">
            <param name="conf.subst.patch" value="${conf.install.dir}"/>
            <param name="lib.subst.patch" value="${lib.install.dir}"/>
        </antcall>
    </target>

    <target name="installScripts" depends="patchConfig,patchScripts">
        <copy todir="${conf.install.copy.dir}" overwrite="true">
            <fileset dir="${patch.conf.dir}">
                <include name="oxfunctions.sh"/>
            </fileset>
        </copy>
        <copy todir="${bin.install.copy.dir}" overwrite="true">
            <fileset dir="${patch.bin.dir}"/>
        </copy>
        <chmod perm="755" file="${bin.install.copy.dir}/open-xchange-groupware"/>
        <chmod perm="755" file="${bin.install.copy.dir}/checkconsistency"/>

        <copy todir="${destdir}" overwrite="true">
            <fileset dir="system"/>
            <mapper type="glob" from="*.${distribution}" to="*"/>
        </copy>
        <chmod perm="755" file="${destdir}/etc/init.d/open-xchange-groupware"/>
    </target>

    <target name="installExceptJars" depends="installScripts">
        <mkdir dir="${log.install.copy.dir}"/>
    </target>

    <target name="install" depends="build,installJars,installConfig,installExceptJars"/>

    <target name="default" depends="install"/>

    <target name="clean">
        <delete dir="${tmp.dir}"/>
        <delete dir="${output..}"/>
        <delete file="${source..}/com/openexchange/server/Version.java"/>
    </target>

	<!-- Dist -->
	<!-- Cargo Culted from openexchange-common -->
	<target name="dist" depends="clean">
		<property name="dist-package" value="dist-package"/>
    	<delete dir="${dist-package}"/>
        <mkdir dir="${dist-package}/${composite.name}"/>
        <copy todir="${dist-package}/${composite.name}">
            <fileset dir=".">
                <exclude name="**${dist-package}/**"/>
                <exclude name="**debian/**"/>
                <exclude name="**CVS/**"/>
                <exclude name="Todo"/>
            </fileset>
        </copy>
        <tar destfile="../${composite.name}.tar.gz"
	        basedir="${dist-package}"
    	    includes="${composite.name}/"
         	compression="gzip"/>    	<!-- dpkg-source does not like anything else -->
    	<delete dir="${dist-package}"/>
    </target>


    <!-- I18N Stuff -->

    <target name="all-i18n" depends="create-pot,check-pot,create-codes-csv,create-lang-jar" />

    <target name="check-msgfmt-executable" unless="exists_msgfmt">
        <exec executable="${msgfmt}" dir="${basedir}" failonerror="false" failifexecutionfails="false" outputproperty="garbage" resultproperty="result_msgmft">
            <arg value="--help" />
        </exec>
        <condition property="exists_msgfmt">
            <equals arg1="0" arg2="${result_msgmft}" />
        </condition>
        <antcall target="show-missing-msgfmt"/>
    </target>

    <target name="check-xgettext-executable" unless="exists_xgettext">
        <exec executable="${xgettext}" dir="${basedir}" failonerror="false" failifexecutionfails="false" outputproperty="garbage" resultproperty="result_xgettext">
            <arg value="--help"/>
        </exec>
        <condition property="exists_xgettext">
            <equals arg1="0" arg2="${result_xgettext}"/>
        </condition>
        <antcall target="show-missing-xgettext"/>
    </target>

    <target name="check_apt_executable" unless="exists_apt">
        <exec executable="${java_apt}" dir="${basedir}" failonerror="false" failifexecutionfails="false" outputproperty="garbage" resultproperty="result_apt">
            <arg value="-help" />
        </exec>
        <condition property="exists_apt">
            <equals arg1="0" arg2="${result_apt}" />
        </condition>
        <antcall target="show-missing-apt"></antcall>
    </target>

    <target name="check-i18n-executables" depends="check-msgfmt-executable,check-xgettext-executable,check_apt_executable">
        <antcall target="show-missing-executables"/>
    </target>

    <target name="show-missing-executables" depends="show-missing-xgettext,show-missing-msgfmt,show-missing-apt"/>

    <target name="show-missing-xgettext" unless="exists_xgettext">
        <echo message="xgettext can't be found. POT files won't be generated." />
    </target>

    <target name="show-missing-msgfmt" unless="exists_msgfmt">
        <echo message="msgfmt can't be found. Language Bundle won't be generated." />
    </target>

    <target name="show-missing-apt" unless="exists_apt">
        <echo message="apt can't be found. Error codes cannot be read from server code." />
    </target>

    <!-- TODO -->
    <target name="create-lang-jar" depends="check-msgfmt-executable,prepare" if="exists_msgfmt">
        <!-- FIXME Discover Files and languages dynamically -->
        <exec executable="${msgfmt}" dir="${basedir}">
            <arg line="--java2 -d ${output..} -r com.openexchange.groupware.i18n.ServerMessages -l de_DE ${i18n.dir}/de_DE/server.de_DE.po" />
        </exec>
        <exec executable="${msgfmt}" dir="${basedir}">
            <arg line="--java2 -d ${output..} -r com.openexchange.groupware.i18n.ServerMessages -l de ${i18n.dir}/de_DE/server.de_DE.po" />
        </exec>
    	<!-- french -->
    	<exec executable="${msgfmt}" dir="${basedir}">
            <arg line="--java2 -d ${output..} -r com.openexchange.groupware.i18n.ServerMessages -l fr_FR ${i18n.dir}/fr_FR/server.fr_FR.po" />
        </exec>
        <exec executable="${msgfmt}" dir="${basedir}">
            <arg line="--java2 -d ${output..} -r com.openexchange.groupware.i18n.ServerMessages -l fr ${i18n.dir}/fr_FR/server.fr_FR.po" />
        </exec>
        <jar jarfile="${tmp.dir}/${Bundle-SymbolicName}_languages.jar" basedir="${output..}"
            includes="com/openexchange/groupware/i18n/ServerMessages*" />
    </target>

    <target name="create-ser" depends="create-annotations-ser,create-codes-ser" />

    <target name="create-codes-ser" depends="jar">
        <echo message="Creating ${i18n.dir}/codes.ser" />
        <java classname="ListErrorCodes">
            <classpath>
                <pathelement location="lib/ox_server.jar" />
                <path refid="project.classpath" />
                <pathelement location="${java.class.path}"/>
            </classpath>
            <sysproperty key="com.openexchange.tools.exceptions.SerializationProcessor.file" value="${i18n.dir}/codes.ser" />
            <arg value="lib/ox_server.jar" />
            <arg value="com.openexchange.tools.exceptions.SerializationProcessor"/>
        </java>
    </target>

    <target name="create-annotations-ser" depends="check-i18n-executables,jar" if="exists_apt" >
        <echo message="Creating ${i18n.dir}/codesAnnotation.ser" />
        <path id="apt.classpath">
            <path refid="project.classpath" />
            <path refid="server-jars"/>
            <pathelement location="${java.class.path}" />
        </path>
        <exec executable="find" dir="${basedir}" output="${tmp.dir}/sources.txt">
            <arg value="${source..}"/>
            <arg value="-name"/>
            <arg value="*.java"/>
        </exec>
        <exec executable="${java_apt}" dir="${basedir}">
            <arg value="-cp" />
            <arg pathref="apt.classpath" />
            <arg value="-d" />
            <arg value="${output..}" />
            <arg value="-AerrorCodeProcessor=com.openexchange.tools.exceptions.SerializationProcessor" />
            <arg value="-factory" />
            <arg value="com.openexchange.tools.exceptions.OXExceptionAnnotationFactory" />
            <arg value="-nocompile" />
            <arg value="@${tmp.dir}/sources.txt"/>
        </exec>
        <delete file="${tmp.dir}/sources.txt"/>
        <!--
        <java classname="com.sun.tools.apt.Main">
            <classpath>
                <pathelement location="lib/ox_server.jar"/>
                <path refid="project.classpath" />
            </classpath>
            <arg value="-AerrorCodeProcessor=com.openexchange.tools.exceptions.SerializationProcessor" />
            <arg value="-factory" />
            <arg value="com.openexchange.tools.exceptions.OXExceptionAnnotationFactory" />
            <arg value="${src.dir}/**/*.java" />
        </java>
        -->
        <move file="codes.ser" tofile="${i18n.dir}/codesAnnotation.ser" />
    </target>

    <target name="create-pot" depends="create-server-pot,create-error-pot" />

    <target name="create-server-pot" depends="check-i18n-executables" if="exists_xgettext">
        <echo message="Generating ${i18n.dir}/server.pot" />
        <apply executable="${xgettext}" dir="${source..}" parallel="true" verbose="true" relative="true">
            <arg value="-a" />
            <arg value="--language=Java" />
            <arg value="--output-dir=${i18n.dir}" />
            <arg value="--output=server.pot"/>
            <fileset refid="i18n.sources" />
        </apply>
        <replaceregexp file="${i18n.dir}/server.pot" match="&quot;POT-Creation-Date:(.*)&quot;\n" replace="" flags="g"/>
        <!-- remove date and source files to make server.pot less changing -->
        <!--
        <replaceregexp file="${i18n.dir}/server.pot" match="#:(.*)\n" replace="" flags="g"/>
        -->
    </target>

    <target name="create-error-pot" depends="compile,check-i18n-executables,create-ser" if="exists_xgettext">
        <echo message="Generating ${i18n.dir}/errors.pot" />
        <java classname="ProcessErrorCodes">
            <classpath>
                <pathelement location="${output..}" />
                <path refid="project.classpath" />
            </classpath>
            <sysproperty key="errorCodeProcessor" value="com.openexchange.tools.exceptions.JavaMessageCatalogBuilder" />
            <sysproperty key="output" value="${i18n.dir}/GUIMessages.java" />
            <arg value="${i18n.dir}/codes.ser" />
            <arg value="${i18n.dir}/codesAnnotation.ser" />
        </java>
        <apply executable="${xgettext}" dir="${i18n.dir}" parallel="true" verbose="true" relative="true">
            <arg value="-a" />
            <arg value="--language=Java" />
            <arg value="--output=errors.pot"/>
            <fileset dir="${i18n.dir}">
                <filename name="GUIMessages.java" />
            </fileset>
        </apply>
        <!-- remove date and source files to make errors.pot less changing -->
        <replaceregexp file="${i18n.dir}/errors.pot" match="&quot;POT-Creation-Date:(.*)&quot;\n" replace="" flags="g"/>
        <replaceregexp file="${i18n.dir}/errors.pot" match="#:(.*)\n" replace="" flags="g"/>
        <delete file="${i18n.dir}/GUIMessages.java" />
    </target>

	<!-- comparing source .pot files to translated .po files-->
	<target name="check-pot" depends="create-pot">
	    <antcall target="check-lang-pot">
	    	<param name="lang" value="de_DE"/>
	    </antcall>
	    <antcall target="check-lang-pot">
	    	<param name="lang" value="fr_FR"/>
	    </antcall>
	</target>

    <target name="check-lang-pot" if="lang">
        <exec executable="${msgcmp}" dir="${i18n.dir}" failonerror="false" failifexecutionfails="false" resultproperty="translation-return-1" outputproperty="translation-result-1">
            <arg value="${lang}/server.${lang}.po"/>
        	<arg value="server.pot"/>
        </exec>
		<antcall target="check-pot-warning" inheritAll="false">
			<param name="translation-success" value="${translation-return-1}" />
			<param name="translation-step" value="${lang} server texts" />
			<param name="translation-message" value="${translation-result-1}"/>
		</antcall>

        <exec executable="${msgcmp}" dir="${i18n.dir}" failonerror="false" failifexecutionfails="false" resultproperty="translation-return-2" outputproperty="translation-result-2">
            <arg value="${lang}/errors.${lang}.po"/>
        	<arg value="errors.pot"/>
        </exec>
		<antcall target="check-pot-warning" inheritAll="false">
			<param name="translation-success" value="${translation-return-2}" />
			<param name="translation-step" value="${lang} error texts" />
			<param name="translation-message" value="${translation-result-2}"/>
		</antcall>
    </target>

	<target name="check-pot-warning">
		<condition property="translation-warning-needed">
            <not>
            	<equals arg1="0" arg2="${translation-success}" />
            </not>
        </condition>
		<antcall target="show-pot-warning">
			<param name="translation-step" value="${translation-step}" />
			<param name="translation-message" value="${translation-message}"/>
		</antcall>
	</target>

	<target name="show-pot-warning" if="translation-warning-needed" >
		<echo message="Warnings for ${translation-step}:" />
		<echo message="${translation-message}" />
	</target>		

    <target name="create-codes-csv" depends="create-ser">
        <echo message="Creating ${i18n.dir}/codes.csv" />
        <java classname="ProcessErrorCodes">
            <classpath>
                <pathelement location="${output..}" />
                <path refid="project.classpath"/>
            </classpath>
            <sysproperty key="errorCodeProcessor" value="com.openexchange.tools.exceptions.CSVProcessor" />
            <sysproperty key="com.openexchange.tools.exceptions.CSVProcessor.file" value="${i18n.dir}/codes.csv" />
            <arg value="${i18n.dir}/codes.ser" />
            <arg value="${i18n.dir}/codesAnnotation.ser" />
        </java>
    </target>

    <target name="create-gui-js" depends="compile,create-ser">
        <echo message="Creating ${i18n.dir}/codes.js" />
        <java classname="ProcessErrorCodes">
            <classpath>
                <pathelement location="${output..}" />
                <path refid="project.classpath" />
            </classpath>
            <sysproperty key="errorCodeProcessor" value="com.openexchange.tools.exceptions.JSProcessor" />
            <sysproperty key="filename" value="${i18n.dir}/codes" />
            <sysproperty key="includeCategories" value="user_input, permission, external_resource_full, user_configuration, try_again, truncated, concurrent_modification" />
            <arg value="${i18n.dir}/codes.ser" />
            <arg value="${i18n.dir}/codesAnnotation.ser" />
        </java>
    </target>

    <!-- Replacing in templates -->

    <target name="patchVersionJava">
        <copy file="${source..}/com/openexchange/server/impl/Version.java.in"
            tofile="${source..}/com/openexchange/server/impl/Version.java"
            overwrite="yes">
            <filterset refid="version"/>
        </copy>
    </target>

    <target name="patchConfigFiles">
        <fail message="Define conf.subst.patch." unless="conf.subst.patch"/>
        <antcall target="patchOSGiIni"/>
        <antcall target="patchFileLoggingProperties"/>
        <antcall target="patchScriptConf"/>
        <antcall target="patchSessiondProperties"/>
        <antcall target="patchSystemProperties"/>
    </target>

    <target name="patchOSGiIni">
        <fail message="Define bundlesdir." unless="bundlesdir"/>
        <move tofile="${patch.conf.dir}/osgi/config.ini"
            file="${patch.conf.dir}/osgi/config.ini.in" overwrite="true"/>
        <replace file="${patch.conf.dir}/osgi/config.ini">
            <replacefilter token="@bundlesdir@" value="${bundlesdir}"/>
        </replace>
    </target>

    <target name="patchFileLoggingProperties">
        <move tofile="${patch.conf.dir}/file-logging.properties"
            file="${patch.conf.dir}/file-logging.properties.in" overwrite="true"/>
        <replace file="${patch.conf.dir}/file-logging.properties">
            <replacefilter token="@serverlogfile@" value="${log.install.dir}/open-xchange.log"/>
        </replace>
    </target>

    <target name="patchScriptConf">
        <move tofile="${patch.conf.dir}/ox-scriptconf.sh" file="${patch.conf.dir}/ox-scriptconf.sh.in" overwrite="true"/>
        <replace file="${patch.conf.dir}/ox-scriptconf.sh">
            <replacefilter token="@systemproperties@" value="${conf.subst.patch}/system.properties"/>
            <replacefilter token="@loggingproperties@" value= "${conf.subst.patch}/file-logging.properties"/>
        </replace>
    </target>

    <target name="patchSessiondProperties">
        <move tofile="${patch.conf.dir}/sessiond.properties" file="${patch.conf.dir}/sessiond.properties.in" overwrite="true"/>
        <replace file="${patch.conf.dir}/sessiond.properties">
            <replacefilter token="@sessiondport@" value="33333"/>
        </replace>
    </target>

    <target name="patchSystemProperties">
        <move tofile="${patch.conf.dir}/system.properties" file="${patch.conf.dir}/system.properties.in" overwrite="true"/>
        <replace file="${patch.conf.dir}/system.properties">
            <replacefilter token="@oxgroupwaresysconfdir@" value="${conf.subst.patch}"/>
        </replace>
    </target>

    <target name="patchBinFiles">
        <fail message="Define conf.subst.patch" unless="conf.subst.patch"/>
        <fail message="Define lib.subst.patch" unless="lib.subst.patch"/>
        <antcall target="patchConsistencyStart"/>
        <antcall target="patchGroupwareStart"/>
    </target>

    <target name="patchConsistencyStart">
        <move tofile="${patch.bin.dir}/checkconsistency" file="${patch.bin.dir}/checkconsistency.in" overwrite="true"/>
        <replace file="${patch.bin.dir}/checkconsistency">
            <replacefilter token="@oxfunctions@" value="${conf.subst.patch}/oxfunctions.sh"/>
            <replacefilter token="@oxscriptconf@" value="${conf.subst.patch}/ox-scriptconf.sh"/>
            <replacefilter token="@prefix@" value="${prefix}"/>
            <replacefilter token="@consolelogfile@" value= "${log.install.dir}/open-xchange-console.log"/>
            <replacefilter token="@mysqljdbcjar@" value="${lib.subst.patch}/${mysqljdbcjar}"/>
            <replacefilter token="@mailjar@" value="${lib.subst.patch}/${mailjar}"/>
            <replacefilter token="@activationjar@" value="${lib.subst.patch}/${activationjar}"/>
            <replacefilter token="@jdomjar@" value="${lib.subst.patch}/${jdomjar}"/>
            <replacefilter token="@servletjar@" value="${lib.subst.patch}/${servletjar}"/>
            <replacefilter token="@jcsjar@" value="${lib.subst.patch}/${jcsjar}"/>
            <replacefilter token="@concurrentjar@" value="${lib.subst.patch}/${concurrentjar}"/>
            <replacefilter token="@commonsloggingjar@" value="${lib.subst.patch}/${commonsloggingjar}"/>
            <replacefilter token="@jsonjar@" value="${lib.subst.patch}/${jsonjar}"/>
            <replacefilter token="@commonsfileuploadjar@" value="${lib.subst.patch}/${commonsfileuploadjar}"/>
            <replacefilter token="@commonsiojar@" value="${lib.subst.patch}/${commonsiojar}" />
            <replacefilter token="@jakartawebdavjar@" value="${lib.subst.patch}/${jakartawebdavjar}" />
            <replacefilter token="@commonshttpclientjar@" value="${lib.subst.patch}/${commonshttpclientjar}" />
            <replacefilter token="@jbossclientjar@" value="${lib.subst.patch}/${jbossclientjar}" />
            <replacefilter token="@oxadapterjar@" value="${lib.subst.patch}/${oxadapterjar}" />
            <replacefilter token="@oxgroupwarelibdir@" value="${lib.subst.patch}"/>
	  		<replacefilter token="@libdirpath@"	value="${lib.subst.patch}"/>
            <replacefilter token="@oxgroupwaresysconfdir@" value="${conf.subst.patch}"/>
        </replace>
    </target>

    <target name="patchGroupwareStart">
        <move tofile="${patch.bin.dir}/open-xchange-groupware" file="${patch.bin.dir}/open-xchange-groupware.in" overwrite="true"/>
        <replace file="${patch.bin.dir}/open-xchange-groupware">
            <replacefilter token="@oxfunctions@" value="${conf.subst.patch}/oxfunctions.sh"/>
            <replacefilter token="@oxscriptconf@"    value="${conf.subst.patch}/ox-scriptconf.sh"/>
            <replacefilter token="@prefix@" value="${prefix}"/>
            <replacefilter token="@consolelogfile@" value= "${log.install.dir}/open-xchange-console.log"/>
            <replacefilter token="@mysqljdbcjar@"    value="${lib.subst.patch}/${mysqljdbcjar}"/>
            <replacefilter token="@mailjar@"    value="${lib.subst.patch}/${mailjar}"/>
            <replacefilter token="@activationjar@" value="${lib.subst.patch}/${activationjar}"/>
            <replacefilter token="@jdomjar@"    value="${lib.subst.patch}/${jdomjar}"/>
            <replacefilter token="@servletjar@"    value="${lib.subst.patch}/${servletjar}"/>
            <replacefilter token="@jcsjar@"    value="${lib.subst.patch}/${jcsjar}"/>
            <replacefilter token="@concurrentjar@"    value="${lib.subst.patch}/${concurrentjar}"/>
            <replacefilter token="@commonsloggingjar@"    value="${lib.subst.patch}/${commonsloggingjar}"/>
            <replacefilter token="@jsonjar@"    value="${lib.subst.patch}/${jsonjar}"/>
            <replacefilter token="@commonsfileuploadjar@" value="${lib.subst.patch}/${commonsfileuploadjar}"/>
            <replacefilter token="@commonsiojar@" value="${lib.subst.patch}/${commonsiojar}" />
            <replacefilter token="@jakartawebdavjar@" value="${lib.subst.patch}/${jakartawebdavjar}" />
            <replacefilter token="@commonshttpclientjar@" value="${lib.subst.patch}/${commonshttpclientjar}" />
            <replacefilter token="@jbossclientjar@" value="${lib.subst.patch}/${jbossclientjar}" />
            <replacefilter token="@oxadapterjar@" value="${lib.subst.patch}/${oxadapterjar}" />
            <replacefilter token="@tnefjar@" value="${lib.subst.patch}/${tnefjar}"/>
            <replacefilter token="@springcorejar@" value= "${lib.subst.patch}/${springcorejar}"/>
            <replacefilter token="@springbeanjar@" value= "${lib.subst.patch}/${springbeanjar}"/>
            <replacefilter token="@oxgroupwarelibdir@"    value="${lib.subst.patch}"/>
	  		<replacefilter token="@libdirpath@"	value="${lib.subst.patch}"/>
            <replacefilter token="@oxgroupwaresysconfdir@" value="${conf.subst.patch}"/>
        </replace>
    </target>

    <!-- Setup -->

    <target name="setup" depends="setServerName,patchConfigDBProperties"/>

    <target name="setServerName">
        <fail message="Server name not defined." unless="server.name"/>
        <replaceregexp byline="true">
            <regexp pattern="SERVER_NAME=.*"/>
            <substitution expression="SERVER_NAME=${server.name}"/>
            <fileset dir="${conf.install.copy.dir}">
                <include name="system.properties"/>
            </fileset>
        </replaceregexp>
        <!-- fail message="Not implemented."/ -->
    </target>

    <target name="patchConfigDBProperties">
        <fail message="Database host not defined." unless="dbhost"/>
        <fail message="ConfigDB schema not defined." unless="configdb"/>
        <fail message="Database driver not defined." unless="dbdriver"/>
        <fail message="Database user name not defined." unless="dbuser"/>
        <fail message="Database password not defined." unless="dbpass"/>
        <fileset dir="${conf.install.copy.dir}" id="configDBProperties">
            <include name="configdb.properties"/>
        </fileset>
        <replaceregexp byline="true">
            <regexp pattern="useSeparateWrite=.*"/>
            <substitution expression="useSeparateWrite=false"/>
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="readUrl=.*" />
            <substitution expression="readUrl=jdbc:mysql://${dbhost}/${configdb}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="writeUrl=.*" />
            <substitution expression="writeUrl=jdbc:mysql://${dbhost}/${configdb}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="readDriverClass=.*" />
            <substitution expression="readDriverClass=${dbdriver}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="writeDriverClass=.*" />
            <substitution expression="writeDriverClass=${dbdriver}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="readProperty.1=.*" />
            <substitution expression="readProperty.1=user=${dbuser}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="writeProperty.1=.*" />
            <substitution expression="writeProperty.1=user=${dbuser}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="readProperty.2=.*" />
            <substitution expression="readProperty.2=password=${dbpass}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
        <replaceregexp byline="true">
            <regexp pattern="writeProperty.2=.*" />
            <substitution expression="writeProperty.2=password=${dbpass}" />
            <fileset refid="configDBProperties"/>
        </replaceregexp>
    </target>

</project>