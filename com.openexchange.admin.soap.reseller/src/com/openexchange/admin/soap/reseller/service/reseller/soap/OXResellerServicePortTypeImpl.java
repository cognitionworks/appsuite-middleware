
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.reseller.service.reseller.soap;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import com.openexchange.admin.reseller.rmi.OXResellerInterface;
import com.openexchange.admin.reseller.rmi.exceptions.OXResellerException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.reseller.service.reseller.rmi.dataobjects.ResellerAdmin;
import com.openexchange.admin.soap.reseller.service.reseller.rmi.dataobjects.Restriction;
import com.openexchange.admin.soap.reseller.service.rmi.dataobjects.Credentials;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.Context;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.Database;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.Entry;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.SOAPMapEntry;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.SOAPStringMap;
import com.openexchange.admin.soap.reseller.service.soap.dataobjects.SOAPStringMapMap;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-06T11:54:37.308+02:00
 * Generated source version: 2.6.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "OXResellerService",
                      portName = "OXResellerServiceHttpSoap12Endpoint",
                      targetNamespace = "http://soap.reseller.admin.openexchange.com",
                      wsdlLocation = "null",
                      endpointInterface = "com.openexchange.admin.soap.reseller.service.reseller.soap.OXResellerServicePortType")
                      
public class OXResellerServicePortTypeImpl implements OXResellerServicePortType {

    public static final AtomicReference<OXResellerInterface> RMI_REFERENCE = new AtomicReference<OXResellerInterface>();

    private static OXResellerInterface getResellerInterface() throws RemoteException_Exception {
        final OXResellerInterface resellerInterface = RMI_REFERENCE.get();
        if (null == resellerInterface) {
            throw new RemoteException_Exception("Missing "+OXResellerInterface.class.getName() + " instance.");
        }
        return resellerInterface;
    }

    @Override
    public void updateDatabaseRestrictions(final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.updateDatabaseRestrictions(soap2Credentials(creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void change(final Change parameters) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.change(soap2ResellerAdmin(parameters.adm), soap2Credentials(parameters.creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public List<Restriction> getAvailableRestrictions(final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            final com.openexchange.admin.reseller.rmi.dataobjects.Restriction[] restrictions = resellerInterface.getAvailableRestrictions(soap2Credentials(creds));
            if (null == restrictions) {
                return Collections.emptyList();
            }
            final int length = restrictions.length;
            final List<Restriction> list = new ArrayList<Restriction>(length);
            for (int i = 0; i < length; i++) {
                list.add(restriction2Soap(restrictions[i]));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void removeDatabaseRestrictions(final RemoveDatabaseRestrictions parameters) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.removeDatabaseRestrictions(soap2Credentials(parameters.creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.delete(soap2ResellerAdmin(parameters.adm), soap2Credentials(parameters.creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public List<ResellerAdmin> list(final java.lang.String searchPattern,final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            final com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin[] resellerAdmins = resellerInterface.list(searchPattern, soap2Credentials(creds));
            if (null == resellerAdmins) {
                return Collections.emptyList();
            }
            final int length = resellerAdmins.length;
            final List<ResellerAdmin> list = new ArrayList<ResellerAdmin>(length);
            for (int i = 0; i < length; i++) {
                list.add(resellerAdmin2Soap(resellerAdmins[i]));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public List<Restriction> getRestrictionsFromContext(final com.openexchange.admin.soap.reseller.service.reseller.soap.dataobjects.ResellerContext ctx,final Credentials creds) throws InvalidCredentialsException_Exception , DuplicateExtensionException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            final com.openexchange.admin.reseller.rmi.dataobjects.Restriction[] restrictions = resellerInterface.getRestrictionsFromContext(soap2Context(ctx), soap2Credentials(creds));
            if (null == restrictions) {
                return Collections.emptyList();
            }
            final int length = restrictions.length;
            final List<Restriction> list = new ArrayList<Restriction>(length);
            for (int i = 0; i < length; i++) {
                list.add(restriction2Soap(restrictions[i]));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public ResellerAdmin create(final ResellerAdmin adm,final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            return resellerAdmin2Soap(resellerInterface.create(soap2ResellerAdmin(adm), soap2Credentials(creds)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public List<ResellerAdmin> getMultipleData(final List<ResellerAdmin> admins,final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            final com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin[] resellerAdmins = new com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin[admins.size()];
            for (int i = 0; i < resellerAdmins.length; i++) {
                resellerAdmins[i] = soap2ResellerAdmin(admins.get(i));
            }
            final com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin[] data = resellerInterface.getMultipleData(resellerAdmins, soap2Credentials(creds));
            final List<ResellerAdmin> ret = new ArrayList<ResellerAdmin>(data.length);
            for (int i = 0; i < data.length; i++) {
                ret.add(resellerAdmin2Soap(data[i]));
            }
            return ret;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public ResellerAdmin getData(final ResellerAdmin adm, final Credentials creds) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception , InvalidDataException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            return resellerAdmin2Soap(resellerInterface.getData(soap2ResellerAdmin(adm), soap2Credentials(creds)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void updateDatabaseModuleAccessRestrictions(final UpdateDatabaseModuleAccessRestrictions parameters) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.updateDatabaseModuleAccessRestrictions(soap2Credentials(parameters.creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void initDatabaseRestrictions(final InitDatabaseRestrictions parameters) throws InvalidCredentialsException_Exception , StorageException_Exception , RemoteException_Exception , OXResellerException_Exception    { 
        final OXResellerInterface resellerInterface = getResellerInterface();
        try {
            resellerInterface.initDatabaseRestrictions(soap2Credentials(parameters.creds));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final OXResellerException e) {
            throw new OXResellerException_Exception(e.getMessage(), e);
        }
    }

    private static com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin soap2ResellerAdmin(final ResellerAdmin soapResellerAdmin) {
        if (null == soapResellerAdmin) {
            return null;
        }
        final com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin resellerAdmin = new com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin();
        resellerAdmin.setDisplayname(soapResellerAdmin.getDisplayName());
        resellerAdmin.setId(soapResellerAdmin.getId());
        resellerAdmin.setName(soapResellerAdmin.getName());
        resellerAdmin.setParentId(soapResellerAdmin.getParentId());
        resellerAdmin.setPassword(soapResellerAdmin.getPassword());
        resellerAdmin.setPasswordMech(soapResellerAdmin.getPasswordMech());
        resellerAdmin.setRestrictions(soap2Restrictions(soapResellerAdmin.getRestrictions()));
        return resellerAdmin;
    }

    private static ResellerAdmin resellerAdmin2Soap(final com.openexchange.admin.reseller.rmi.dataobjects.ResellerAdmin resellerAdmin) {
        if (null == resellerAdmin) {
            return null;
        }
        final ResellerAdmin soapResellerAdmin = new ResellerAdmin();
        soapResellerAdmin.setDisplayName(resellerAdmin.getDisplayname());
        soapResellerAdmin.setId(resellerAdmin.getId());
        soapResellerAdmin.setName(resellerAdmin.getName());
        soapResellerAdmin.setParentId(resellerAdmin.getParentId());
        soapResellerAdmin.setPassword(resellerAdmin.getPassword());
        soapResellerAdmin.setPasswordMech(resellerAdmin.getPasswordMech());
        soapResellerAdmin.setRestrictions(restrictions2Soap(resellerAdmin.getRestrictions()));
        return soapResellerAdmin;
    }

    private static com.openexchange.admin.reseller.rmi.dataobjects.Restriction soap2Restriction(final Restriction soapRestriction) {
        if (null == soapRestriction) {
            return null;
        }
        final com.openexchange.admin.reseller.rmi.dataobjects.Restriction restriction = new com.openexchange.admin.reseller.rmi.dataobjects.Restriction();
        restriction.setId(soapRestriction.getId());
        restriction.setName(soapRestriction.getName());
        restriction.setValue(soapRestriction.getValue());
        return restriction;
    }

    private static com.openexchange.admin.reseller.rmi.dataobjects.Restriction[] soap2Restrictions(final List<Restriction> soapRestrictions) {
        if (null == soapRestrictions) {
            return null;
        }
        final com.openexchange.admin.reseller.rmi.dataobjects.Restriction[] restrictions = new com.openexchange.admin.reseller.rmi.dataobjects.Restriction[soapRestrictions.size()];
        for (int i = 0; i < restrictions.length; i++) {
            restrictions[i] = soap2Restriction(soapRestrictions.get(i));
        }
        return restrictions;
    }

    private static Restriction restriction2Soap(final com.openexchange.admin.reseller.rmi.dataobjects.Restriction restriction) {
        if (null == restriction) {
            return null;
        }
        final Restriction soapRestriction = new Restriction();
        soapRestriction.setId(restriction.getId());
        soapRestriction.setName(restriction.getName());
        soapRestriction.setValue(restriction.getValue());
        return soapRestriction;
    }

    private static List<Restriction> restrictions2Soap(final com.openexchange.admin.reseller.rmi.dataobjects.Restriction[] restrictions) {
        if (null == restrictions) {
            return null;
        }
        final List<Restriction> soapRestrictions = new ArrayList<Restriction>(restrictions.length);
        for (int i = 0; i < restrictions.length; i++) {
            soapRestrictions.add(restriction2Soap(restrictions[i]));
        }
        return soapRestrictions;
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        credentials.setLogin(soapCredentials.getLogin());
        credentials.setPassword(soapCredentials.getPassword());
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();
        ret.setAverage_size(soapContext.getAverageSize());
        ret.setEnabled(soapContext.isEnabled());
        ret.setFilestore_name(soapContext.getFilestoreName());
        ret.setFilestoreId(soapContext.getFilestoreId());
        ret.setId(soapContext.getId());
        ret.setLoginMappings(new HashSet<String>(soapContext.getLoginMappings()));
        ret.setMaxQuota(soapContext.getMaxQuota());
        ret.setName(soapContext.getName());
        ret.setUsedQuota(soapContext.getUsedQuota());
        ret.setReadDatabase(soap2Database(soapContext.getReadDatabase()));
        ret.setWriteDatabase(soap2Database(soapContext.getWriteDatabase()));
        ret.setUserAttributes(soap2MapMap(soapContext.getUserAttributes()));
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();
        ret.setClusterWeight(soapDatabase.getClusterWeight());
        ret.setCurrentUnits(soapDatabase.getCurrentUnits());
        ret.setDriver(soapDatabase.getDriver());
        ret.setId(soapDatabase.getId());
        ret.setLogin(soapDatabase.getLogin());
        ret.setMaster(soapDatabase.isMaster());
        ret.setMasterId(soapDatabase.getMasterId());
        ret.setMaxUnits(soapDatabase.getMaxUnits());
        ret.setName(soapDatabase.getName());
        ret.setPassword(soapDatabase.getPassword());
        ret.setPoolHardLimit(soapDatabase.getPoolHardLimit());
        ret.setPoolInitial(soapDatabase.getPoolInitial());
        ret.setPoolMax(soapDatabase.getPoolMax());
        ret.setRead_id(soapDatabase.getReadId());
        ret.setScheme(soapDatabase.getScheme());
        ret.setUrl(soapDatabase.getUrl());
        return ret;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<String, Map<String,String>>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<String, String>(entries.size());
        for (final Entry entry : entries) {
            map.put(entry.getKey(), entry.getValue());
        }
        return map;
    }

    private static Context context2Soap(final com.openexchange.admin.rmi.dataobjects.Context context) {
        if (null == context) {
            return null;
        }
        final Context soapContext = new Context();
        soapContext.setAverageSize(context.getAverage_size());
        soapContext.setEnabled(context.getEnabled());
        soapContext.setFilestoreId(context.getFilestoreId());
        soapContext.setFilestoreName(context.getFilestore_name());
        soapContext.setId(context.getId());
        soapContext.setMaxQuota(context.getMaxQuota());
        soapContext.setName(context.getName());
        soapContext.setReadDatabase(database2Soap(context.getReadDatabase()));
        soapContext.setUsedQuota(context.getUsedQuota());
        soapContext.setUserAttributes(mapmap2Soap(context.getUserAttributes()));
        soapContext.setWriteDatabase(database2Soap(context.getWriteDatabase()));
        return soapContext;
    }

    private static Database database2Soap(final com.openexchange.admin.rmi.dataobjects.Database database) {
        if (null == database) {
            return null;
        }
        final Database soapDatabase = new Database();
        soapDatabase.setClusterWeight(database.getClusterWeight());
        soapDatabase.setCurrentUnits(database.getCurrentUnits());
        soapDatabase.setDriver(database.getDriver());
        soapDatabase.setId(database.getId());
        soapDatabase.setLogin(database.getLogin());
        soapDatabase.setMaster(database.getMaster());
        soapDatabase.setMasterId(database.getMasterId());
        soapDatabase.setMaxUnits(database.getMaxUnits());
        soapDatabase.setName(database.getName());
        soapDatabase.setPassword(database.getPassword());
        soapDatabase.setPoolHardLimit(database.getPoolHardLimit());
        soapDatabase.setPoolInitial(database.getPoolInitial());
        soapDatabase.setPoolMax(database.getPoolMax());
        soapDatabase.setReadId(database.getRead_id());
        soapDatabase.setScheme(database.getScheme());
        soapDatabase.setUrl(database.getUrl());
        return soapDatabase;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<SOAPMapEntry>(mapmap.size());
        for (final Map.Entry<String,Map<String,String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<Entry>(map.size());
        for (final Map.Entry<String,String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }

}
