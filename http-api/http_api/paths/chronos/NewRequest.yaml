/chronos?action=new:
  put:
    operationId: createEvent
    tags:
      - Chronos
    summary: Creates an event.
    parameters:
      - $ref: '#/components/parameters/gblQueryParamSession'
      - $ref: '#/components/parameters/QueryParamChronosFolder'
      - $ref: '#/components/parameters/QueryParamChronosCheckConflicts'
      - $ref: '#/components/parameters/QueryParamChronosScheduling'
      - $ref: '#/components/parameters/QueryParamChronosExtendedEntities'
      - $ref: '#/components/parameters/QueryParamChronosPushToken'
      - in: query
        name: rangeStart
        description: >
          If expand is set to 'true' this parameter defines a lower inclusive
          limit as a utc date-time value as specified in rfc 5545 chapter 3.3.5.
          E.g. "20170708T220000Z". 

          Only events which start on or after this date are returned.
        required: false
        schema:
          type: string
      - in: query
        name: rangeEnd
        description: >
          If expand is set to 'true' this parameter defines a upper exclusive
          limit as a utc date-time value as specified in rfc 5545 chapter 3.3.5.
          E.g. "20170708T220000Z". 

          Only events which end before this date are returned.
        required: false
        schema:
          type: string
      - $ref: '#/components/parameters/QueryParamChronosExpand'
      - in: query
        name: usedGroups
        description: >
          In case the client resolves groups into single attendees the client
          can provide the ids 

          of the groups he used (resolved) as a comma separated list. This way
          the usecount of those groups will be increased.
        schema:
          type: string
    responses:
      '200':
        description: >
          'A JSON object containing the newly created event, if it was created
          successfully.

          If the event could not be created due to conflicts, the response body
          is an object with the

          field `conflicts`, which holds informations about the conflict. In
          case of errors the responsible fields

          in the response are filled (see [Error handling](#error-handling)).'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChronosCalendarResultResponse'
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventData'
      description: A JSON object containing the event's data.
      required: true
  post:
    operationId: createEventWithAttachments
    tags:
      - Chronos
    summary: Creates an event and attaches files.
    description: >
      #### Note

      It is possible to create multiple attachments at once. Therefore add
      additional form fields and replace "[index]" in `file_[index]` 

      with the appropriate index, like `file_1`. The index always starts with 0
      (mandatory attachment object). There can only be

      one json payload describing the EventData, the rest json payloads (if
      present) will simply be ignored.
    parameters:
      - $ref: '#/components/parameters/gblQueryParamSession'
      - $ref: '#/components/parameters/QueryParamChronosFolder'
      - $ref: '#/components/parameters/QueryParamChronosCheckConflicts'
      - $ref: '#/components/parameters/QueryParamChronosScheduling'
      - $ref: '#/components/parameters/QueryParamChronosExtendedEntities'
      - in: query
        name: usedGroups
        description: >
          In case the client resolves groups into single attendees the client
          can provide the ids 

          of the groups he used (resolved) as a comma separated list. This way
          the usecount of those groups will be increased.
        schema:
          type: string
    responses:
      '200':
        description: >
          A HTML page containing the newly created event or in case of errors an
          error object (see [File
          uploads](https://documentation.open-xchange.com/latest/middleware/http_api/1_introduction.html#file-uploads)
          as an example).

          If the event could not be created due to conflicts, the HTML Page
          contains an object with the

          field `conflicts`, which holds informations about the conflict.
        content:
          text/html:
            schema:
              type: string
    requestBody:
      content:
        multipart/form-data:
          schema:
            type: object
            title: NewRequestBody
            properties:
              json_0:
                description: >-
                  A JSON object containing the event's data as described in
                  [EventData](#/definitions/EventData).
                type: string
              file_0:
                description: The attachment file as per `<input type="file" />`.
                type: string
                format: binary
            required:
              - json_0
              - file_0
