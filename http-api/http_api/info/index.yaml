title: OX HTTP API
description: |
  Documentation of the Open-Xchange HTTP API which is used by the new AJAX GUI.
  
  ## Introduction
  
  ### Low level protocol
  
  The client accesses the server through HTTP GET, POST and PUT requests. HTTP cookies are used for authentication and must therefore be processed and sent back by the client as specified by [RFC 6265](http://tools.ietf.org/html/rfc6265). The HTTP API is accessible at URIs starting with `/ajax`. Each server module has a unique name and its own sub-namespace with that name below `/ajax`, e. g. all access to the module "tasks" is via URIs starting with `/ajax/tasks`.
  
  Text encoding is always UTF-8. Data is sent from the server to the client as text/javascript and interpreted by the client to obtain an ECMAScript object. The HTTP API uses only a small subset of the ECMAScript syntax. This subset is roughly described by the following BNF:
  
  ```
  Value   ::= "null" | Boolean | Number | String | Array | Object
  Boolean ::= "true" | "false"
  Number  ::= see NumericLiteral in ECMA 262 3rd edition
  String  ::= \"([^"\n\\]|\\["\n\\])*\"
  Array   ::= "[]" | "[" Value ("," Value)* "]"
  Object  ::= "{}" | "{" Name ":" Value ("," Name ":" Value)* "}"
  Name    ::= [A-Fa-f][0-9A-Fa-f_]*
  ```
  
  Numbers are the standard signed integer and floating point numbers. Strings can contain any character, except double quotes, newlines and backslashes, which must be escaped by a backslash. Control characters in strings (other than newline) are not supported. Whitespace is allowed between any two tokens. See [JSON](http://json.org/) and [ECMA 262, 3rd edition](http://www.ecma-international.org/publications/standards/Ecma-262.htm) for the formal definition.
  
  The response body consists of an object, which contains up to four fields as described in Response body. The field data contains the actual payload which is described in following chapters. The fields `timestamp`, `error` and `error_params` are present when data objects are returned, if an error occurred and if the error message contains conversion specifiers, respectively. Following sections describe the contents of these fields in more detail.
  
  | Name | Type | Value |
  |------|------|-------|
  | data | Value | Payload of the response. |
  | timestamp | Timestamp | The latest timestamp of the returned data (see Updates). |
  | error | String | The translated error message. Present in case of errors. |
  | error_params | Array | As of 7.4.2: Empty JSON array. Before that: Parameters for the error message that would need to be replaced in the error string (in a printf-format style). |
  | error_id | String | Unique error identifier to help finding this error instance in the server logs. |
  | error_desc | String | The technical error message (always English) useful for debugging the problem. Might be the same as error message if there is no more information available |
  | code | String | Error code consisting of an upper-case module identifier and a four-digit message number, separated by a dash; e.g. "MSG-0012" |
  | error_stack | Array | If configured (see "com.openexchange.ajax.response.includeStackTraceOnError" in 'server.properties') this field provides the stack trace of associated Java exception represented as a JSON array |
  | categories | String OR Array | Either a single (String) or list (Array) of upper-case category identifiers to which the error belongs. |
  | category | Number | Maintained for legacy reasons: The numeric representation of the first category. |
  
  Data from the client to the server can be sent in several formats. Small amounts of data are sent as `application/x-www-urlencoded` in query parameters in the request URI. For POST requests, some or all parameters may be sent in the request body instead of in the URI using any valid encoding for POST requests. Alternatively, some requests specify that data is sent as `text/javascript` in the body of a PUT request. The format of the request body for PUT requests is the same as for sending data from the server to the client, except that the payload is sent directly, without being wrapped in another object.
  
  When updating existing data, the client sends only fields that were modified. To explicitly delete a field, the field is sent with the value null. For fields of type `String`, the empty string "" is equivalent to `null`.
  ### Error handling
  If the session of the user times out, if the client doesn't send a session ID or if the session for the specified session ID can not be found then the server returns the above described response object, that contains an error code and an error message. If the request URI or the request body is malformed or incomplete then the server returns the reponse object with an error message, too. In case of internal server errors, especially Java exceptions, or if the server is down, it returns the HTTP status code 503, Service Unavailable. Other severe errors may return other HTTP status values.
  
  Application errors, which can be caused by a user and are therefore expected during the operation of the groupware, are reported by setting the field error in the returned object, as described in Response body. Since the error messages are translated by the client, they can not be composed of multiple variable parts. Instead, the error message can contain simplified printf()-style conversion specifications, which are replaced by elements from the array in the field `error_params`. If `error_params` is not present, no replacement occurs, even if parts of the error message match the syntax of a conversion specification.
  
  A simplified conversion specification, as used for error messages, is either of the form _%s_ or _%n$s_, where _n_ is a 1-based decimal parameter index. The conversion specifications are replaced from left to right by elements from `error_params`, starting at the first element. _%s_ is replaced by the current element and the current index is incremented. _%n$s_ is replaced by the _n_'th element and the current index is set to the _(n + 1)_'th element.
  
  Some error message contain data sizes which must be expressed in Bytes or Kilobytes etc., depending on the actual value. Since the unit must be translated, this conversion is performed by the client. Unfortunately, standard printf()-style formatting does not have a specifier for this kind of translation. Therefore, the conversion specification for sizes is the same as for normal strings, and the client has to determine which parameters to translate based on the error code. The current error codes and the corresponding size parameters are listed below:
  
  | Error code | Parameter indices |
  |------------|-------------------|
  | CON-0101 | 2, 3 |
  | FLS-0003 | 1, 2, 3 |
  | MSG-0065 | 1, 3 |
  | MSG-0066 | 1 |
  | NON-0005 | 1, 2 |
  
  ### Date and time
  
  Dates without time are transmitted as the number of milliseconds between 00:00 UTC on that date and 1970-01-01 00:00 UTC. Leap seconds are ignored, therefore this number is always an integer multiple of 8.64e7.
  
  Because ECMAScript Date objects have no way to explicitly specify a timezone for calculations, timezone correction must be performed on the server. Dates with time are transmitted as the number of milliseconds since 1970-01-01 00:00 UTC (again, ignoring leap seconds) plus the offset between the user's timezone and UTC at the time in question. (See the Java method java.util.TimeZone.getOffset(long)). Unless optional URL parameter `timezone` is present. Then dates with time are transmitted as the number of milliseconds since 1970-01-01 00:00 UTC (again, ignoring leap seconds) plus the offset between the _specified_ timezone and UTC at the time in question.
  
  For some date and time values, especially timestamps, monotonicity is more important than the actual value. Such values are transmitted as the number of milliseconds since 1970-01-01 00:00 UTC, ignoring leap seconds and without timezone correction. If possible, a unique strictly monotonic increasing value should be used instead, as it avoids some race conditions described below.
  
  This specification refers to these three interpretations of the type Number as separate data types.
  
  | Type | Time | Timezone | Comment |
  |------|------|----------|---------|
  | Date | No | UTC | Date without time. |
  | Time | Yes | User | Date and time. |
  | Timestamp | Yes | UTC | Timestamp or unique sequence number. |
  
  ### Updates
  
  To allow efficient synchronization of a client with changes made by other clients and to detect conflicts, the server stores a timestamp of the last modification for each object. Whenever the server transmits data objects to the client, the response object described in Response body includes the field `timestamp`. This field contains a timestamp value which is computed as the maximum of the timestamps of all transmitted objects.
  
  When requesting updates to a previously retrieved set of objects, the client sends the last timestamp which belongs to that set of objects. The response contains all updates with timestamps greater than the one specified by the client. The field timestamp of the response contains the new maximum timestamp value.
  
  If multiple different objects may have the same timestamp values, then a race condition exists when an update is processed between two such objects being modified. The first, already modified object will be included in the update response and its timestamp will be the maximum timestamp value sent in the timestamp field of the response. If the second object is modified later but gets the same timestamp, the client will never see the update to that object because the next update request from the client supplies the same timestamp value, but only modifications with greater timestamp values are returned.
  
  If unique sequence numbers can't be used as timestamps, then the risk of the race condition can be at least minimized by storing timestamps in the most precise format and/or limiting update results to changes with timestamp values which are measurably smaller than the current timestamp value.
  
  ### Editing
  
  Editing objects is performed one object at a time. There may be multiple objects being edited by the same client simulataneously, but this is achieved by repeating the steps required for editing a single object. There is no batch edit or upload command.
  
  To edit an object, a client first requests the entire object from the server. The server response contains the `timestamp` field described in the previous section. For in-place editing inside a view of multiple objects, where only already retrieved fields can be changed, retrieving the entire object is not necessary, and the last timestamp of the view is used as the timestamp of each object in it.
  
  When sending the modified object back to the server, only modified fields need to be included in the sent object. The request also includes the timestamp of the edited object. The timestamp is used by the server to ensure that the object was not edited by another client in the meantime. If the current timestamp of the object is greater than the timestamp supplied by the client, then a conflict is detected and the field error is set in the response. Otherwise, the object gets a new timestamp and the response to the client is empty.
  
  If the client displays the edited object in a view together with other objects, then the client will need to perform an update of that view immediately after successfully uploading an edited object.
  
  ### File uploads
  
  File uploads are made by sending a POST request that submits both the file and the needed fields as parts of a request of content-type “multipart/form-data” or “multipart/mixed”. The file metadata are stored in a form field “file” (much like an `<input type=”file” name=”file” />` would do). In general a call that allows file uploads via POST will have a corresponding call using PUT to send object data. The JSON-encoded object-data that is send as the body of a corresponding PUT call is, when performed as a POST with file uploads, put into the request parameter “json”.
  
  Since the upload is performed directly by the browser and is not an Ajax call, the normal callback mechanism for asynchronous Javascript calls cannot be used to obtain the result. For this reason the server responds to these POST calls with a complete HTML page that performs the callback and should not be displayed to the user. The HTML response is functionally equivalent to:
  
  ```
  <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
  <html>
    <head>
      <META http-equiv="Content-Type" content=\"text/html; charset=UTF-8\">
      <script type="text/javascript">
        (parent["callback_action"] || window.opener && window.opener["callback_action"])
        ({json})
      </script>
    </head>
  </html>
  ```
  
  The placeholders `{json}` is replaced by the response with the timestamp that would be expected from the corresponding PUT method. The placeholder `action` is replaced by the value of the parameter `action` of the request (except for the import bundle, which is named "import" instead of the action name for legacy purposes). The content-type of the answer is `text/html`.
  
  **Non-browser clients don't need to interpret HTML or JavaScript.** The JSON data can be recognized by the outermost `({` and `})`, where the inner braces are part of the JSON value. For example, the regular expression `\((\{.*\})\)` captures the entire JSON value in its first capturing group.
  
  ## Column identifiers
  
  Below you find the identifiers for object fields of certain data objects (models) that can be used in the `columns` parameter of a request to return
  specific field data of single or multiple objects.
  
  ### Common object data
  
  | ID | Name |
  |----|------|
  | 1 | id |
  | 2 | created_by |
  | 3 | modified_by |
  | 4 | creation_date |
  | 5 | last_modified |
  | 20 | folder_id |
  | 100 | categories |
  | 101 | private_flag |
  | 102 | color_label |
  | 104 | number_of_attachments |
  | 105 | lastModifiedOfNewestAttachmentUTC |
  
  ### Common folder data
  
  | ID | Name |
  |----|------|
  | 1 | id |
  | 2 | created_by |
  | 3 | modified_by |
  | 4 | creation_date |
  | 5 | last_modified |
  | 6 | last_modified_utc |
  | 20 | folder_id |
  
  ### Detailed folder data
  
  | ID | Name |
  |----|------|
  | 300 | title |
  | 301 | module |
  | 302 | type |
  | 304 | subfolders |
  | 305 | own_rights |
  | 306 | permissions |
  | 307 | summary |
  | 308 | standard_folder |
  | 309 | total |
  | 310 | new |
  | 311 | unread |
  | 312 | deleted |
  | 313 | capabilities |
  | 314 | subscribed |
  | 315 | subscr_subflds |
  | 316 | standard_folder_type |
  | 317 | supported_capabilities |
  | 318 | account_id |
  | 3010 | com.openexchange.publish.publicationFlag |
  | 3020 | com.openexchange.subscribe.subscriptionFlag |
  | 3030 | com.openexchange.folderstorage.displayName |
  | 3060 | com.openexchange.share.extendedPermissions |
  
  ### Detailed task and appointment data
  
  | ID | Name |
  |----|------|
  | 200 | title |
  | 201 | start_date |
  | 202 | end_date |
  | 203 | note |
  | 204 | alarm |
  | 209 | recurrence_type |
  | 212 | days |
  | 213 | day_in_month |
  | 214 | month |
  | 215 | interval |
  | 216 | until |
  | 217 | notification |
  | 220 | participants |
  | 221 | users |
  | 222 | occurrences |
  | 223 | uid |
  | 224 | organizer |
  | 225 | sequence |
  | 226 | confirmations |
  | 227 | organizerId |
  | 228 | principal |
  | 229 | principalId |
  | 401 | full_time |
  
  ### Detailed task data
  
  | ID | Name |
  |----|------|
  | 300 | status |
  | 301 | percent_completed |
  | 302 | actual_costs |
  | 303 | actual_duration |
  | 304 | after_complete |
  | 305 | billing_information |
  | 307 | target_costs |
  | 308 | target_duration |
  | 309 | priority |
  | 312 | currency |
  | 313 | trip_meter |
  | 314 | companies |
  | 315 | date_completed |
  | 316 | start_time |
  | 317 | end_time |
  
  ### Detailed contact data
  
  | ID | Name | CSV column title |
  |----|------|------------------|
  | 223 | uid |   |
  | 500 | display_name | Display name |
  | 501 | first_name | Given name |
  | 502 | last_name | Sur name |
  | 503 | second_name | Middle name |
  | 504 | suffix | Suffix |
  | 505 | title | Title |
  | 506 | street_home | Street home |
  | 507 | postal_code_home | Postal code home |
  | 508 | city_home | City home |
  | 509 | state_home | State home |
  | 510 | country_home | Country home |
  | 511 | birthday | Birthday |
  | 512 | martial_status | Martial status |
  | 513 | number_of_children | Number of children |
  | 514 | profession | Profession |
  | 515 | nickname | Nickname |
  | 516 | spouse_name | Spouse name |
  | 517 | anniversary | Anniversary |
  | 518 | note | Note |
  | 519 | department | Department |
  | 520 | position | Position |
  | 521 | employee_type | Employee type |
  | 522 | room_number | Room number |
  | 523 | street_business | Street business |
  | 524 | user_id | Internal user id |
  | 525 | postal_code_business | Postal code business |
  | 526 | city_business | City business |
  | 527 | state_business | State business |
  | 528 | country_business | Country business |
  | 529 | number_of_employees | Number of employee |
  | 530 | sales_volume | Sales volume |
  | 531 | tax_id | Tax id |
  | 532 | commercial_register | Commercial register |
  | 533 | branches | Branches |
  | 534 | business_category | Business category |
  | 535 | info | Info |
  | 536 | manager_name | Manager's name |
  | 537 | assistant_name | Assistant's name |
  | 538 | street_other | Street other |
  | 539 | city_other | City other |
  | 540 | postal_code_other | Postal code other |
  | 541 | country_other | Country other |
  | 542 | telephone_business1 | Telephone business 1 |
  | 543 | telephone_business2 | Telephone business 2 |
  | 544 | fax_business | FAX business |
  | 545 | telephone_callback | Telephone callback |
  | 546 | telephone_car | Telephone car |
  | 547 | telephone_company | Telephone company |
  | 548 | telephone_home1 | Telephone home 1 |
  | 549 | telephone_home2 | Telephone home 2 |
  | 550 | fax_home | FAX home |
  | 551 | cellular_telephone1 | Cellular telephone 1 |
  | 552 | cellular_telephone2 | Cellular telephone 2 |
  | 553 | telephone_other | Telephone other |
  | 554 | fax_other | FAX other |
  | 555 | email1 | Email 1 |
  | 556 | email2 | Email 2 |
  | 557 | email3 | Email 3 |
  | 558 | url | URL |
  | 559 | telephone_isdn | Telephone ISDN |
  | 560 | telephone_pager | Telephone pager |
  | 561 | telephone_primary | Telephone primary |
  | 562 | telephone_radio | Telephone radio |
  | 563 | telephone_telex | Telephone telex |
  | 564 | telephone_ttytdd | Telephone TTY/TDD |
  | 565 | instant_messenger1 | Instantmessenger 1 |
  | 566 | instant_messenger2 | Instantmessenger 2 |
  | 567 | telephone_ip | Telephone IP |
  | 568 | telephone_assistant | Telephone assistant |
  | 569 | company | Company |
  | 570 | image1 |   |
  | 571 | userfield01 | Dynamic Field 1 |
  | 572 | userfield02 | Dynamic Field 2 |
  | 573 | userfield03 | Dynamic Field 3 |
  | 574 | userfield04 | Dynamic Field 4 |
  | 575 | userfield05 | Dynamic Field 5 |
  | 576 | userfield06 | Dynamic Field 6 |
  | 577 | userfield07 | Dynamic Field 7 |
  | 578 | userfield08 | Dynamic Field 8 |
  | 579 | userfield09 | Dynamic Field 9 |
  | 580 | userfield10 | Dynamic Field 10 |
  | 581 | userfield11 | Dynamic Field 11 |
  | 582 | userfield12 | Dynamic Field 12 |
  | 583 | userfield13 | Dynamic Field 13 |
  | 584 | userfield14 | Dynamic Field 14 |
  | 585 | userfield15 | Dynamic Field 15 |
  | 586 | userfield16 | Dynamic Field 16 |
  | 587 | userfield17 | Dynamic Field 17 |
  | 588 | userfield18 | Dynamic Field 18 |
  | 589 | userfield19 | Dynamic Field 19 |
  | 590 | userfield20 | Dynamic Field 20 |
  | 592 | distribution_list |   |
  | 594 | number_of_distribution_list | Number of distributionlists |
  | 596 | number_of_images |   |
  | 597 | image_last_modified |   |
  | 598 | state_other | State other |
  | 599 | file_as |   |
  | 601 | image1_content_type |   |
  | 602 | mark_as_distributionlist |   |
  | 605 | default_address | Default address |
  | 606 | image1_url |   |
  | 608 | useCount |   |
  | 610 | yomiFirstName |   |
  | 611 | yomiLastName |   |
  | 612 | yomiCompany |   |
  | 613 | addressHome |   |
  | 614 | addressBusiness |   |
  | 615 | addressOther |   |
  
  ### Detailed appointment data
  
  | ID | Name |
  |----|------|
  | 206 | recurrence_id |
  | 207 | recurrence_position |
  | 208 | recurrence_date_position |
  | 210 | change_exceptions |
  | 211 | delete_exceptions |
  | 400 | location |
  | 402 | shown_as |
  | 408 | timezone |
  | 410 | recurrence_start |
  
  ### Detailed mail data
  
  | ID | Name |
  |----|------|
  | 102 | color_label |
  | 600 | id |
  | 601 | folder_id |
  | 602 | attachment |
  | 603 | from |
  | 604 | to |
  | 605 | cc |
  | 606 | bcc |
  | 607 | subject |
  | 608 | size |
  | 609 | sent_date |
  | 610 | received_date |
  | 611 | flags |
  | 612 | level |
  | 613 | disp_notification_to |
  | 614 | priority |
  | 615 | msg_ref |
  | 651 | flag_seen |
  | 652 | account_name |
  | 653 | account_id |
  | 654 | original_id |
  | 655 | original_folder_id |
  
  ### Detailed infoitem data
  
  | ID | Name |
  |----|------|
  | 108 | object_permissions |
  | 109 | shareable |
  | 700 | title |
  | 701 | url |
  | 702 | filename |
  | 703 | file_mimetype |
  | 704 | file_size |
  | 705 | version |
  | 706 | description |
  | 707 | locked_until |
  | 708 | file_md5sum |
  | 709 | version_comment |
  | 710 | current_version |
  | 711 | number_of_versions |
  | 7010 | com.openexchange.share.extendedObjectPermissions |
  | 7020 | com.openexchange.realtime.resourceID |
  
  ### Attachment data
  
  | ID | Name |
  |----|------|
  | 800 | folder |
  | 801 | attached |
  | 802 | module |
  | 803 | filename |
  | 804 | file_size |
  | 805 | file_mimetype |
  | 806 | rft_flag |
  
  ### Mail account data
  
  | ID | Name |
  |----|------|
  | 1001 | id |
  | 1002 | login |
  | 1003 | password |
  | 1004 | mail_url |
  | 1005 | transport_url |
  | 1006 | name |
  | 1007 | primary_address |
  | 1008 | spam_handler |
  | 1009 | trash |
  | 1010 | sent |
  | 1011 | drafts |
  | 1012 | spam |
  | 1013 | confirmed_spam |
  | 1014 | confirmed_ham |
  | 1015 | mail_server |
  | 1016 | mail_port |
  | 1017 | mail_protocol |
  | 1018 | mail_secure |
  | 1019 | transport_server |
  | 1020 | transport_port |
  | 1021 | transport_protocol |
  | 1022 | transport_secure |
  | 1023 | transport_login |
  | 1024 | transport_password |
  | 1025 | unified_inbox_enabled |
  | 1026 | trash_fullname |
  | 1027 | sent_fullname |
  | 1028 | drafts_fullname |
  | 1029 | spam_fullname |
  | 1030 | confirmed_spam_fullname |
  | 1031 | confirmed_ham_fullname |
  | 1032 | pop3_refresh_rate |
  | 1033 | pop3_expunge_on_quit |
  | 1034 | pop3_delete_write_through |
  | 1035 | pop3_storage |
  | 1036 | pop3_path |
  | 1037 | personal |
  | 1038 | reply_to |
  | 1039 | addresses |
  | 1040 | meta |
  | 1041 | archive |
  | 1042 | archive_fullname |
  | 1043 | transport_auth |
  | 1044 | mail_starttls |
  | 1045 | transport_starttls |
  
  ### Detailed user data
  
  | ID | Name |
  |----|------|
  | 610 | aliases |
  | 611 | timezone |
  | 612 | locale |
  | 613 | groups |
  | 614 | contact_id |
  | 615 | login_info |
  | 616 | guest_created_by |
  
  ### Messaging fields
  
  | Name |
  |------|
  | id |
  | folder |
  | from |
  | to |
  | cc |
  | bcc |
  | headers |
  | subject |
  | body |
  | contentType |
  | size |
  | sentDate |
  | receivedDate |
  | flags |
  | threadLevel |
  | dispositionNotificationTo |
  | priority |
  | colorLabel |
  | url |
  | picture |
  
  ## Flags / bit masks
  
  ### Permission flags
  
  | Bits    | Value                   |
  |---------|-------------------------|
  | **0&#x2011;6** | **Folder permissions:** |
  |   | 0 (no permissions) |
  |   | 1 (see the folder) |
  |   | 2 (create objects in folder) |
  |   | 4 (create subfolders) |
  |   | 64 (all permissions) |
  | **7&#x2011;13** | **Read permissions for objects in folder:** |
  |   | 0 (no permissions) |
  |   | 1 (read only own objects) |
  |   | 2 (read all objects) |
  |   | 64 (all permissions) |
  | **14&#x2011;20** | **Write permissions for objects in folder:** |
  |   | 0 (no permissions) |
  |   | 1 (modify only own objects) |
  |   | 2 (modify all objects) |
  |   | 64 (all permissions) |
  | **21&#x2011;27** | **Delete permissions for objects in folder:** |
  |   | 0 (no permissions) |
  |   | 1 (delete only own objects) |
  |   | 2 (delete all objects) |
  |   | 64 (all permissions) |
  | **28** | **Admin flag:** |
  |   | 0 (no permissions) |
  |   | 1 (every operation modifying the folder in some way requires this permission (e.g. changing the folder name) |
  
  ## Mail filter
  
  ### Possible tests
  
  | Name | Description |
  |------|-------------|
  | address | This test type applies to addresses only. So it may be used for all header fields which contain addresses. This test returns true if any combination of the header-list and values-list arguments match. |
  | envelope | This test applies to the envelope of a mail. This test isn't used under normal circumstances as the envelope isn't accessible in all mail setups. This test returns true if any combination of the header-list and values-list arguments match. |
  | true | A test for a true result (can be used if an action command should be executed every time). |
  | not | Negates a given test. |
  | size | Deals with the size of the mail. |
  | currentdate | Compares a given date with the current date (available since v6.20) |
  | header | Tests against all headers of a mail. So with this test in contrast to the address test also fields such as subject can be handled. This test returns true if any combination of the header-list and values-list arguments match. |
  | body | Tests against the content of a mail. |
  | allof | Defines an AND condition between several tests. |
  | anyof | Defines an OR condition between several tests. |
  
  ### Possible comparisons
  
  | Name | Description |
  |------|-------------|
  | is | If a field is equal to a given value. |
  | contains | If a field contains a given value at any position. |
  | matches | Tests if the value matches the value in the specified field ("*" matches zero or more characters, "?" matches a single character, to use these characters themselves they have to be escaped via backslash). | 
  | regex | Tests if a given regular expression matches with the value present in the specified field. |
  | user | Tests if the user part of an e-mail address is the value given here. This means in herbert+mustermann@example.com. The user checks the part herbert (only possible in conjunction with the `address` test). | 
  | detail | Tests if the detail part of an e-mail address is the value given here. In the example above this evaluates to mustermann (only possible in conjunction with the `address` test). |
  
  #### Possible currentdate comparisons
  
  | Name | Description |
  |------|-------------|
  | is | Used in the date test to check for a value equal to the given one. |
  | ge | Used in the date test to check for a value greater or equal to the given one. |
  | le | Used in the date test to check for a value less or equal to the given one. |
  
  #### Possible size comparisons
  
  | Name | Description |
  |------|-------------|
  | over | Used in the size test to check for a value greater than the given one.|
  | under | Used in the size test to check for a value less than the given one. |
  
  ### Possible extensions
  
  | Name | Description |
  |------|-------------|
  | content | An extension used in conjunction with the body test to define the content which should be considered. This extension will need a parameter specifying the mime-type of the part of the message which will be searched. |
  | text | An extension used in conjunction with the body test to define that only the text of the body should be considered in this test. This extension takes no parameter. |
  
  ### Possible action commands
  
  | Name | Description |
  |------|-------------|
  | keep | Keeps a mail non-changed. |
  | discard | Discards a mail without any processing. |
  | redirect | Redirects a mail to a given e-mail address. |
  | move | Moves a mail into a given subfolder (the syntax of the subfolder given here must be the correct syntax of the underlying IMAP-server and is up to the GUI to detect things such as altnamespace or unixhierarchysep). |
  | reject | Rejects the mail with a given text. |
  | stop | Stops any further progressing of a mail. |
  | vacation | Creates a vacation mail. |
  | addflags | Adds flags to a mail. |
  | notify | Adds a notification. |
  | pgp | Encrypts a mail via pgp. |
  
  ## Advanced search
  
  This section describes the syntax of the JSON object representing the search term. The search term is embedded
  in a JSON object with the field `filter`, like `{"filter":[search term]}`. In general the structure of a search
  term is in prefix notation, meaning the operator is written before its operands: `[">", 5, 2]` represents the condition
  "5 > 2".
  
  Available operators are:
   * comparision operators ">", "<", "=", "<=", ">=", "<>"
   * logic operators "not", "and", "or"
  
  Comparison operators have exactly two operands. Each operand can either be a field name or a constant. A field name is a JSON object
  with the member `field` specifying the field name, e.g. `{"field":"first_name"}`. The available field names depend on the module
  that implements the search. Primitive JSON types are interpreted as constants. Arrays are not valid operands for comparison operators!
  
  The logic operator "not" has exactly one operand, the other logic operators can have any number of operands. Each operand must be an
  array representing a nested search expression.
  
  Example:
  
  ```json
  {
    "filter":[
      "and",
      [
        "=",
        {
          "field":"field_name1"
        },
        "value1"
      ],
      [
        "not",
        [
          ">",
          {
            "field":"field_name2"
          },
          "value2"
        ]
      ]
    ]
  }
  ```
  
  Represents the expression `field_name1 = value1 AND NOT field_name2 > value2`.
  ___
contact:
  name: Open-Xchange GmbH
  email: info@open-xchange.com
  url: https://www.open-xchange.com/
version: 7.8.2