
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.util;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import com.openexchange.admin.rmi.OXUtilInterface;
import com.openexchange.admin.rmi.dataobjects.xsd.Credentials;
import com.openexchange.admin.rmi.dataobjects.xsd.MaintenanceReason;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.dataobjects.xsd.Database;
import com.openexchange.admin.soap.dataobjects.xsd.Filestore;
import com.openexchange.admin.soap.dataobjects.xsd.Server;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-05-31T13:47:54.365+02:00
 * Generated source version: 2.6.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "OXUtilService",
                      portName = "OXUtilServiceHttpSoap12Endpoint",
                      targetNamespace = "http://soap.admin.openexchange.com",
                      wsdlLocation = "null",
                      endpointInterface = "com.openexchange.admin.soap.util.OXUtilServicePortType")
                      
public class OXUtilServicePortTypeImpl implements OXUtilServicePortType {

    public static final AtomicReference<OXUtilInterface> RMI_REFERENCE = new AtomicReference<OXUtilInterface>();

    private static OXUtilInterface getUtilInterface() throws RemoteException_Exception {
        final OXUtilInterface utilInterface = RMI_REFERENCE.get();
        if (null == utilInterface) {
            throw new RemoteException_Exception("Missing "+OXUtilInterface.class.getName() + " instance.");
        }
        return utilInterface;
    }

    @Override
    public com.openexchange.admin.soap.dataobjects.xsd.Server registerServer(final com.openexchange.admin.soap.dataobjects.xsd.Server srv,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            return server2Soap(utilInterface.registerServer(soap2Server(srv), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeDatabase(final ChangeDatabase parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            utilInterface.changeDatabase(soap2Database(parameters.db), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Database> listAllDatabase(final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Database[] databases = utilInterface.listAllDatabase(soap2Credentials(auth));
            if (null == databases) {
                return Collections.emptyList();
            }
            final int length = databases.length;
            final List<Database> list = new ArrayList<Database>(length);
            for (int i = 0; i < length; i++) {
               list.add(database2Soap(databases[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void deleteMaintenanceReason(final DeleteMaintenanceReason parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final List<MaintenanceReason> list = parameters.reasons;
            final com.openexchange.admin.rmi.dataobjects.MaintenanceReason[] reasons = new com.openexchange.admin.rmi.dataobjects.MaintenanceReason[list.size()];
            for (int i = 0; i < reasons.length; i++) {
                reasons[i] = soap2Reason(list.get(i));
            }
            utilInterface.deleteMaintenanceReason(reasons, soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Server> listAllServer(final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Server[] servers = utilInterface.listAllServer(soap2Credentials(auth));
            if (null == servers) {
                return Collections.emptyList();
            }
            final int length = servers.length;
            final List<Server> list = new ArrayList<Server>(length);
            for (int i = 0; i < length; i++) {
               list.add(server2Soap(servers[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.rmi.dataobjects.xsd.MaintenanceReason> listMaintenanceReason(final java.lang.String searchPattern,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.MaintenanceReason[] reasons = utilInterface.listMaintenanceReason(searchPattern, soap2Credentials(auth));
            if (null == reasons) {
                return Collections.emptyList();
            }
            final int length = reasons.length;
            final List<MaintenanceReason> list = new ArrayList<MaintenanceReason>(length);
            for (int i = 0; i < length; i++) {
               list.add(reason2Soap(reasons[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void unregisterServer(final UnregisterServer parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            utilInterface.unregisterServer(soap2Server(parameters.serv), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Server> listServer(final java.lang.String searchPattern,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Server[] servers = utilInterface.listServer(searchPattern, soap2Credentials(auth));
            if (null == servers) {
                return Collections.emptyList();
            }
            final int length = servers.length;
            final List<Server> list = new ArrayList<Server>(length);
            for (int i = 0; i < length; i++) {
               list.add(server2Soap(servers[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Database> listDatabase(final java.lang.String searchPattern,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Database[] databases = utilInterface.listDatabase(searchPattern, soap2Credentials(auth));
            if (null == databases) {
                return Collections.emptyList();
            }
            final int length = databases.length;
            final List<Database> list = new ArrayList<Database>(length);
            for (int i = 0; i < length; i++) {
               list.add(database2Soap(databases[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public com.openexchange.admin.rmi.dataobjects.xsd.MaintenanceReason createMaintenanceReason(final com.openexchange.admin.rmi.dataobjects.xsd.MaintenanceReason reason,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            return reason2Soap(utilInterface.createMaintenanceReason(soap2Reason(reason), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public com.openexchange.admin.soap.dataobjects.xsd.Database registerDatabase(final com.openexchange.admin.soap.dataobjects.xsd.Database db,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            return database2Soap(utilInterface.registerDatabase(soap2Database(db), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.rmi.dataobjects.xsd.MaintenanceReason> listAllMaintenanceReason(final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.MaintenanceReason[] reasons = utilInterface.listAllMaintenanceReason(soap2Credentials(auth));
            if (null == reasons) {
                return Collections.emptyList();
            }
            final int length = reasons.length;
            final List<MaintenanceReason> list = new ArrayList<MaintenanceReason>(length);
            for (int i = 0; i < length; i++) {
               list.add(reason2Soap(reasons[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public com.openexchange.admin.soap.dataobjects.xsd.Filestore registerFilestore(final com.openexchange.admin.soap.dataobjects.xsd.Filestore fstore,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            return filestore2Soap(utilInterface.registerFilestore(soap2Filestore(fstore), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void unregisterFilestore(final UnregisterFilestore parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            utilInterface.unregisterFilestore(soap2Filestore(parameters.store), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Filestore> listFilestore(final java.lang.String searchPattern,final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Filestore[] filestores = utilInterface.listFilestore(searchPattern, soap2Credentials(auth));
            if (null == filestores) {
                return Collections.emptyList();
            }
            final int length = filestores.length;
            final List<Filestore> list = new ArrayList<Filestore>(length);
            for (int i = 0; i < length; i++) {
               list.add(filestore2Soap(filestores[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeFilestore(final ChangeFilestore parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            utilInterface.changeFilestore(soap2Filestore(parameters.fstore), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<com.openexchange.admin.soap.dataobjects.xsd.Filestore> listAllFilestore(final com.openexchange.admin.rmi.dataobjects.xsd.Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Filestore[] filestores = utilInterface.listAllFilestore(soap2Credentials(auth));
            if (null == filestores) {
                return Collections.emptyList();
            }
            final int length = filestores.length;
            final List<Filestore> list = new ArrayList<Filestore>(length);
            for (int i = 0; i < length; i++) {
               list.add(filestore2Soap(filestores[i])); 
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void unregisterDatabase(final UnregisterDatabase parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUtilInterface utilInterface = getUtilInterface();
        try {
            utilInterface.unregisterDatabase(soap2Database(parameters.dbhandle), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        credentials.setLogin(soapCredentials.getLogin());
        credentials.setPassword(soapCredentials.getPassword());
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Filestore soap2Filestore(final Filestore soapFilestore) {
        if (null == soapFilestore) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Filestore filestore = new com.openexchange.admin.rmi.dataobjects.Filestore();
        filestore.setCurrentContexts(soapFilestore.getCurrentContexts());
        filestore.setId(soapFilestore.getId());
        filestore.setMaxContexts(soapFilestore.getMaxContexts());
        filestore.setReserved(soapFilestore.getReserved());
        filestore.setSize(soapFilestore.getSize());
        filestore.setUrl(soapFilestore.getUrl());
        filestore.setUsed(soapFilestore.getUsed());
        return filestore;
    }

    private static Filestore filestore2Soap(final com.openexchange.admin.rmi.dataobjects.Filestore filestore) {
        if (null == filestore) {
            return null;
        }
        final Filestore soapFilestore = new Filestore();
        soapFilestore.setCurrentContexts(filestore.getCurrentContexts());
        soapFilestore.setId(filestore.getId());
        soapFilestore.setMaxContexts(filestore.getMaxContexts());
        soapFilestore.setReserved(filestore.getReserved());
        soapFilestore.setSize(filestore.getSize());
        soapFilestore.setUrl(filestore.getUrl());
        soapFilestore.setUsed(filestore.getUsed());
        return soapFilestore;
    }

    private static com.openexchange.admin.rmi.dataobjects.MaintenanceReason soap2Reason(final MaintenanceReason soapReason) {
        if (null == soapReason) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.MaintenanceReason reason = new com.openexchange.admin.rmi.dataobjects.MaintenanceReason();
        reason.setId(soapReason.getId());
        reason.setText(soapReason.getText());
        return reason;
    }

    private static MaintenanceReason reason2Soap(final com.openexchange.admin.rmi.dataobjects.MaintenanceReason reason) {
        if (null == reason) {
            return null;
        }
        final MaintenanceReason soapReason = new MaintenanceReason();
        soapReason.setId(reason.getId());
        soapReason.setText(reason.getText());
        return soapReason;
    }

    private static com.openexchange.admin.rmi.dataobjects.Server soap2Server(final Server soapServer) {
        if (null == soapServer) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Server server = new com.openexchange.admin.rmi.dataobjects.Server();
        server.setId(soapServer.getId());
        server.setName(soapServer.getName());
        return server;
    }

    private static Server server2Soap(final com.openexchange.admin.rmi.dataobjects.Server server) {
        if (null == server) {
            return null;
        }
        final Server soapServer = new Server();
        soapServer.setId(server.getId());
        soapServer.setName(server.getName());
        return soapServer;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();
        ret.setClusterWeight(soapDatabase.getClusterWeight());
        ret.setCurrentUnits(soapDatabase.getCurrentUnits());
        ret.setDriver(soapDatabase.getDriver());
        ret.setId(soapDatabase.getId());
        ret.setLogin(soapDatabase.getLogin());
        ret.setMaster(soapDatabase.isMaster());
        ret.setMasterId(soapDatabase.getMasterId());
        ret.setMaxUnits(soapDatabase.getMaxUnits());
        ret.setName(soapDatabase.getName());
        ret.setPassword(soapDatabase.getPassword());
        ret.setPoolHardLimit(soapDatabase.getPoolHardLimit());
        ret.setPoolInitial(soapDatabase.getPoolInitial());
        ret.setPoolMax(soapDatabase.getPoolMax());
        ret.setRead_id(soapDatabase.getReadId());
        ret.setScheme(soapDatabase.getScheme());
        ret.setUrl(soapDatabase.getUrl());
        return ret;
    }

    private static Database database2Soap(final com.openexchange.admin.rmi.dataobjects.Database database) {
        if (null == database) {
            return null;
        }
        final Database soapDatabase = new Database();
        soapDatabase.setClusterWeight(database.getClusterWeight());
        soapDatabase.setCurrentUnits(database.getCurrentUnits());
        soapDatabase.setDriver(database.getDriver());
        soapDatabase.setId(database.getId());
        soapDatabase.setLogin(database.getLogin());
        soapDatabase.setMaster(database.getMaster());
        soapDatabase.setMasterId(database.getMasterId());
        soapDatabase.setMaxUnits(database.getMaxUnits());
        soapDatabase.setName(database.getName());
        soapDatabase.setPassword(database.getPassword());
        soapDatabase.setPoolHardLimit(database.getPoolHardLimit());
        soapDatabase.setPoolInitial(database.getPoolInitial());
        soapDatabase.setPoolMax(database.getPoolMax());
        soapDatabase.setReadId(database.getRead_id());
        soapDatabase.setScheme(database.getScheme());
        soapDatabase.setUrl(database.getUrl());
        return soapDatabase;
    }

}
