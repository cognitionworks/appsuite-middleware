define("io.ox/core/test/model",["io.ox/core/extensions","io.ox/core/tk/model"],function(a,b){"use strict",a.point("test/suite").extend({id:"core-model",index:100,test:function(a){var c,d={firstName:"Matthias",familyName:"",city:"Dortmund"},e=new b.Schema({familyName:{mandatory:!0},country:{defaultValue:"Germany"},age:{format:"number"},email:{format:"email"}});a.describe("Simple model without schema",function(){a.it("create instance",function(){c=new b({data:d}),a.expect(c).toBeDefined()}),a.it("returns proper data via get()"
,function(){a.expect(c.get("firstName")).toEqual("Matthias"),a.expect(c.get("city")).toEqual("Dortmund")}),a.it("returns undefined via get() if property does not exist",function(){a.expect(c.get("country")).toBeUndefined()}),a.it("returns no changes",function(){a.expect(c.getChanges()).toEqual({})}),a.it("returns property as not mandatory",function(){a.expect(c.schema.isMandatory("firstName")).toEqual(!1),a.expect(c.schema.isMandatory("country")).toEqual(!1)}),a.it("detects that model is not dirty"
,function(){a.expect(c.isDirty()).toEqual(!1)}),a.it("change property value",function(){c.set("city","44135 Dortmund"),a.expect(c.get("city")).toEqual("44135 Dortmund")}),a.it("returns one change",function(){a.expect(c.getChanges()).toEqual({city:"44135 Dortmund"})}),a.it("detects that model is dirty",function(){a.expect(c.isDirty()).toEqual(!0)}),a.it("triggers general change event",function(){var b=!1;c.off().on("change",function(c,d,e){a.expect(c.type).toEqual("change"),a.expect(d).toEqual("firstName"
),a.expect(e).toEqual("Matthias B."),b=!0}),c.set("firstName","Matthias B."),b=!0}),a.it("triggers specific change event",function(){var b=!1;c.off().on("change:firstName",function(c,d,e){a.expect(c.type).toEqual("change:firstName"),a.expect(d).toEqual("firstName"),a.expect(e).toEqual("Matthias"),b=!0}),c.set("firstName","Matthias"),a.expect(b).toEqual(!0)}),a.it("calling save resets model",function(){var b=!1;c.save().done(function(){a.expect(c.getChanges()).toEqual({}),a.expect(c.isDirty()).toEqual
(!1),b=!0}),a.expect(b).toEqual(!0)})}),a.describe("Model with schema",function(){a.it("create instance",function(){var f=b.extend({schema:e});e.check=function(a,b){if(a.age<0)return new b("age","Age must be greater than 0")},c=new f({data:d}),a.expect(c).toBeDefined()}),a.it("returns changes based on default values",function(){a.expect(c.getChanges()).toEqual({country:"Germany"})}),a.it("returns property as mandatory",function(){a.expect(c.schema.isMandatory("familyName")).toEqual(!0)}),a.it("detects that model is not dirty"
,function(){a.expect(c.isDirty()).toEqual(!1)}),a.it("setting mandatory property",function(){c.set("familyName","B."),a.expect(c.get("familyName")).toEqual("B.")}),a.it("clearing mandatory property",function(){c.set("familyName",""),a.expect(c.get("familyName")).toEqual("")}),a.it("triggers invalid format event",function(){var b=!1;c.set("familyName","B."),c.off().on("error:invalid",function(d,e){a.expect(e.properties).toEqual(["familyName"]),a.expect(c.get("familyName")).toEqual(""),b=!0}),c.set
("familyName",""),a.expect(b).toEqual(!0)}),a.it("triggers inconsistency event",function(){var b=!1;c.off().on("error:invalid error:inconsistent",function(d,e){a.expect(d.type).toEqual("error:inconsistent"),a.expect(e.properties).toEqual(["age"]),a.expect(c.get("age")).toEqual(-1),b=!0}),c.set("familyName","B."),c.set("age",-1),c.save(),a.expect(b).toEqual(!0)}),a.it("detects that model is dirty",function(){a.expect(c.isDirty()).toEqual(!0)}),a.it("returns all data via get()",function(){c.set("age"
,34),c.set("email","matthias.biggeleben@open-xchange.com"),a.expect(c.get()).toEqual({firstName:"Matthias",familyName:"B.",city:"Dortmund",country:"Germany",age:34,email:"matthias.biggeleben@open-xchange.com"})}),a.it("passes save without errors",function(){var b="No errors",d="Not done";c.off().on("error:invalid error:inconsistent",function(){console.debug("Error",arguments),b="Errors"}),c.save().done(function(){a.expect(c.getChanges()).toEqual({}),a.expect(c.isDirty()).toEqual(!1),d="Done"}),a.
expect(d).toEqual("Done"),a.expect(b).toEqual("No errors")})}),a.describe("Model with computed properties",function(){a.it("create instance with a, b, c and computed props x, y, z, and mod",function(){var d=b.extend({schema:e}).addComputed("x",["a","b"],function(a,b){return"1234"+a+b}).addComputed("y",["c"],function(a){return 1e3+a}).addComputed("z",["x","y"],function(a,b){return a+"_"+b}).addComputed("mod",["d"],function(a){return a%2});c=new d({data:{a:"5678",b:9,c:111,d:0}}),a.expect(c).toBeDefined
()}),a.it("x has correct value",function(){a.expect(c.get("x")).toEqual("123456789")}),a.it("y has correct value",function(){a.expect(c.get("y")).toEqual(1111)}),a.it("z has correct value",function(){a.expect(c.get("z")).toEqual("123456789_1111")}),a.it("check change event for x",function(){var b=!1;c.off().on("change:x",function(c,d,e){a.expect(c.type).toEqual("change:x"),a.expect(d).toEqual("x"),a.expect(e).toEqual("123400009"),b=!0}),c.set("a","0000"),a.expect(b).toEqual(!0)}),a.it("check change event for x"
,function(){var b=!1;c.off().on("change:x",function(c,d,e){a.expect(c.type).toEqual("change:x"),a.expect(d).toEqual("x"),a.expect(e).toEqual("12340000#"),b=!0}),c.set("b","#"),a.expect(b).toEqual(!0)}),a.it("check change event for y",function(){var b=!1;c.off().on("change:y",function(c,d,e){a.expect(c.type).toEqual("change:y"),a.expect(d).toEqual("y"),a.expect(e).toEqual(999),b=!0}),c.set("c",-1),a.expect(b).toEqual(!0)}),a.it("check change event for combined z",function(){var b=0;c.off().on("change:z"
,function(c,d,e){a.expect(c.type).toEqual("change:z"),a.expect(d).toEqual("z"),a.expect(e).toEqual("1234----#_999"),b++}),c.set("a","----"),a.expect(b).toEqual(1)}),a.it("check for the right set of change events",function(){var b=0;c.off().on("change:a change:b change:c change:x change:y change:z",function(){b++}),c.set("c","1234"),a.expect(b).toEqual(3)}),a.it("check proper events for unchanged computed properties",function(){var b=0;c.off().on("change:mod",function(){b++}),c.set("d",0),c.set("d"
,2),c.set("d",4),c.set("d",1),c.set("d",2),c.set("d",4),a.expect(b).toEqual(2)})})}})})