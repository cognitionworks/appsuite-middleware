#!/bin/bash
#
#
#   OPEN-XCHANGE legal information
#
#   All intellectual property rights in the Software are protected by
#   international copyright laws.
#
#
#   In some countries OX, OX Open-Xchange, open xchange and OXtender
#   as well as the corresponding Logos OX Open-Xchange and OX are registered
#   trademarks of the Open-Xchange, Inc. group of companies.
#   The use of the Logos is not covered by the GNU General Public License.
#   Instead, you are allowed to use these Logos according to the terms and
#   conditions of the Creative Commons License, Version 2.5, Attribution,
#   Non-commercial, ShareAlike, and the interpretation of the term
#   Non-commercial applicable to the aforementioned license is published
#   on the web site http://www.open-xchange.com/EN/legal/index.html.
#
#   Please make sure that third-party modules and libraries are used
#   according to their respective licenses.
#
#   Any modifications to this package must retain all copyright notices
#   of the original copyright holder(s) for the original code used.
#
#   After any such modifications, the original and derivative code shall remain
#   under the copyright of the copyright holder(s) and/or original author(s)per
#   the Attribution and Assignment Agreement that can be located at
#   http://www.open-xchange.com/EN/developer/. The contributing author shall be
#   given Attribution for the derivative code and a license granting use.
#
#    Copyright (C) 2004-2013 Open-Xchange, Inc.
#    Mail: info@open-xchange.com
#
#
#    This program is free software; you can redistribute it and/or modify it
#    under the terms of the GNU General Public License, Version 2 as published
#    by the Free Software Foundation.
#
#    This program is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
#    for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc., 59
#    Temple Place, Suite 330, Boston, MA 02111-1307 USA
#
#

OXFUNCTIONS=@oxfunctions@

test -f ${OXFUNCTIONS} || {
    echo "missing common shell functions file"
    exit 1
}

check_on_needed() {
    local path=$(type -P ${1})
    if [ -z "${path}" ]; then
        echo "missing needed command ${1}" >&2
        exit 1
    fi
    echo ${path}
}

check_argument() {
    local _pattern=$(echo ${2} | ${TR} [:upper:] [:lower:])
    case ${_pattern} in
        false) _pattern=false ;;
        true) _pattern=true ;;
        yes) _pattern=true ;;
        *) _pattern=invalid ;;
    esac
    echo ${_pattern}
    if [ 'invalid' == "${_pattern}" ]; then
        echo "${0}: Error, option '${1}' requires true or false argument" >&2
        exit 1
    fi
}

warning_heap_dump() {
cat << EOF
###############################################################################
                                  WARNING
While creating Java heap dumps your JVM will be stopped and the OX Service is
not functional. This step may take several minutes and it could happen that you
need to restart the open-xchange service afterwards manually again.

Please also make sure that you have enough free disk space for processing the
data in directories which are defined by '--tempdir' and '--log-archive',
depending on your ox-scriptconf.sh '-Xmx' size of your groupware Java virtual
machine and amount of logs, several gigabyte could be needed!

System Info:
Groupware Max Heap Size: $(cat /opt/open-xchange/etc/ox-scriptconf.sh | \
    grep -A 1 'groupware Java virtual machine' | \
    ${SED} 's|.*-Xmx|-Xmx|g' | \
    ${SED} 's|"||g' | \
    ${TAIL} -n 1)
OX Log Storage: $(${DU} -h ${OX_LOG_DIR})

$(${DF} -h ${TMP})    --${TMP_LONG}=${TMP}
$(${DF} -h $(${DIRNAME} ${LOGARC}) | ${TAIL} -n 1)    --${LOGARC_LONG}=$(dirname ${LOGARC})/<name>.tar

###############################################################################
EOF
read -p "Press ENTER to continue or [ctrl+c] to cancel..."
}

. ${OXFUNCTIONS}

export PATH="${PATH}:/opt/open-xchange/sbin"

# some defaults
PATH="${PATH}:/opt/open-xchange/sbin"
TMP=/tmp
TMP_LONG=tempdir
LOGDIR=ox_support_infos-$(date +%Y%m%d-%H%M%S)
LOGDIR_LONG=logdir
LOGARC=${TMP}/${LOGDIR}.tar
LOGARC_SUFFIX=".gz"
LOGS_AND_FILES_SUFFIX=".bz2"
LOGARC_LONG=log-archive
KEEP_TMP=false
KEEP_TMP_LONG=keep-tmp-files
KEEP_TMP_VALUES="true false"
CREATE_THREAD_DUMP=false
CREATE_THREAD_DUMP_LONG=thread-dump
CREATE_THREAD_DUMP_VALUES="true false"
CREATE_HEAP_DUMP=false
CREATE_HEAP_DUMP_LONG=heap-dump
CREATE_HEAP_DUMP_VALUES="true false"
SKIP_COMPRESSION=false
SKIP_COMPRESSION_LONG=skip-compression
SKIP_COMPRESSION_VALUES="true false"
DROP_OLDER_LOGS_THAN=disabled
DROP_OLDER_LOGS_THAN_LONG=drop-older-logs-than
DROP_OLDER_LOGS_THAN_VALUES="0 ... n Days"
DROP_OLDER_LOGS_THAN_KEEP_ALWAYS="open-xchange.log.0 open-xchange-console.log open-xchange-osgi.log"

# NOTE: Do not add arbitrary directories here!
OX_LOG_DIR=/var/log/open-xchange
ARCHIVE_DIRS="/opt/open-xchange/etc ${OX_LOG_DIR}"

PROCS='showruntimestats -a;showruntimestats -c;showruntimestats -g;route -n;ps faux;top -bHn 1;dmesg;df;mount;netstat -putane;free;report -d;listbundles;listservices;uname -a;ps -eLf;java -version'

MUSTOPTS="TMP LOGDIR KEEP_TMP LOGARC"
LONGOPTS='$TMP_LONG:,$LOGDIR_LONG:,$LOGARC_LONG:,$KEEP_TMP_LONG:,$CREATE_THREAD_DUMP_LONG:,$CREATE_HEAP_DUMP_LONG:,$SKIP_COMPRESSION_LONG:,$DROP_OLDER_LOGS_THAN_LONG:'

usage() {
    echo
    echo "${0} currently knows the following parameters:"
    echo
    local lopts=$(echo ${LONGOPTS} | ${SED} -e 's/[:,]/ /g')
    printf '%-22s | %-45s | %-s\n' "Parameter" "Default value" "Possible values"
    echo "--------------------------------------------------------------------------------------------"
    for opt in ${lopts}; do
        local rvar=${opt%_LONG}
        GLOBIGNORE='*'
        local default="$(eval echo "${rvar}")"
        local possible=$(eval echo ${opt%_LONG}_VALUES)
        local lopt=$(eval echo ${opt})
        # echo $opt $rvar $default $lopt
        printf '%-22s | %-45s | %-s\n' "--${lopt}" ${default} "${possible}"
        GLOBIGNORE=
    done
cat<<EOF

Example:

  ${0}

use -D for Debug mode

Please see for further information, requirements and examples following documentation:
http://oxpedia.org/wiki/index.php?title=AppSuite:Oxsysreport

EOF
    echo
}

get_ox_java_pid() {
    local _ox_pid=$(ps ax | \
        grep 'open-xchange' | \
        grep 'java' | \
        ${HEAD} -n 1 | \
        ${AWK} '{print $1}')
    echo "${_ox_pid}"
}

is_ox_running() {
    if [ -n "$(get_ox_java_pid)" ]; then
        echo "true"
    else
        echo "false"
    fi
}

TEMP=$(POSIXLY_CORRECT=true getopt -o s:i:l:hD --long "$(eval echo ${LONGOPTS}),help" -- "${@}") \
    || die "exiting"

eval set -- "${TEMP}"

# needed to catch the exit from a sub shell
set -e
AWK=$(check_on_needed awk)
BZIP2=$(check_on_needed bzip2)
DF=$(check_on_needed df)
DIRNAME=$(check_on_needed dirname)
DU=$(check_on_needed du)
GZIP=$(check_on_needed gzip)
HEAD=$(check_on_needed head)
SED=$(check_on_needed sed)
SLEEP=$(check_on_needed sleep)
TAIL=$(check_on_needed tail)
TAR=$(check_on_needed tar)
TR=$(check_on_needed tr)

while true; do
    case "${1}" in
        --${TMP_LONG})
            TMP=${2}
            shift 2
        ;;
        --${LOGDIR_LONG})
            LOGDIR=${2}
            shift 2
        ;;
        --${KEEP_TMP_LONG})
            KEEP_TMP=$(check_argument ${1} ${2})
            shift 2
        ;;
        --${LOGARC_LONG})
            LOGARC=${2}
            shift 2
        ;;
        --${CREATE_THREAD_DUMP_LONG})
            THREAD_DUMP=$(check_argument ${1} ${2})
            shift 2
            KILL=$(check_on_needed kill)
            TOP=$(check_on_needed top)
            if [ 'false' == "$(is_ox_running)" ]; then
                echo "Error, open-xchange service is not running" >&2
                exit 1
            fi
        ;;
        --${CREATE_HEAP_DUMP_LONG})
            HEAP_DUMP=$(check_argument ${1} ${2})
            shift 2
            if [ 'false' == "$(is_ox_running)" ]; then
                echo "Error, open-xchange service is not running" >&2
                exit 1
            fi
            if [ 'true' == "${HEAP_DUMP}" ]; then
                warning_heap_dump
            fi
        ;;
        --${SKIP_COMPRESSION_LONG})
            SKIP_COMPRESSION=$(check_argument ${1} ${2})
            shift 2
            unset LOGARC_SUFFIX
            unset LOGS_AND_FILES_SUFFIX
        ;;
        --${DROP_OLDER_LOGS_THAN_LONG})
            if [ '0' -le "${2}" ] 2> /dev/null ; then
                DROP_OLDER_LOGS_THAN=${2}
            else
                echo "${0}: Error, option '${1}' requires positive numbers" >&2
                exit 1
            fi
            shift 2
       ;;
        -h|--help)
            usage
            exit
            shift
        ;;
        -D)
            set -x
            shift
        ;;
        --)
            shift
            break
        ;;
        *)
            die "Internal error!"
            exit 1
        ;;
    esac
done

if [ $(id -u) -ne 0 ]; then
    die "need to be root in order to collect all needed data"
fi


# generic parameter checking
for opt in ${MUSTOPTS}; do
    opt_var=$(eval echo \$${opt})
    opt_var_long=$(eval echo \$${opt}_LONG)
    if [ -z "${opt_var}" ]; then
    usage;
         die "missing required option --${opt_var_long}"
    fi
done

# generic option checking
ALLOPTS=$(echo ${LONGOPTS} | ${SED} -e 's/[$:,]/ /g' -e 's/_LONG//g')
for opt in ${ALLOPTS}; do
    opt_var=$(eval echo \$${opt})
    opt_var_long=$(eval echo \$${opt}_LONG)
    opt_var_values=$(eval echo \$${opt}_VALUES)
    if [ -n "${opt_var_values}" ]; then
        found=
        for val in ${opt_var_values}; do
            if [ "${val}" == "${opt_var}" ]; then
                found=${val}
            fi
            # Accept any value in case '...' is defined in this option <name>_VALUES
            if [ '...' == "${val}" ]; then
                found=${opt_var}
            fi
        done
        if [ -z "${found}" ]; then
            die "\"${opt_var}\" is not a valid option to --${opt_var_long}"
        fi
    fi
done
set +e
# distribution depending staff should go here
ox_system_type
DIST=${?}

if [ $(( ${DIST} & ${DEBIAN} )) -eq ${DEBIAN} ]; then
     echo Debian system detected
     ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/debian_version"
     PROCS=${PROCS}';dpkg -l'
     test -f /etc/mysql/my.cnf && ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/mysql/my.cnf"
elif [ $(( ${DIST} & ${UCS} )) -eq ${UCS} ]; then
     echo "Univention system detected"
     ARCHIVE_DIRS="${ARCHIVE_DIRS} /var/log/univention*"
     PROCS=${PROCS}';dpkg -l;ucr dump'
     test -f /etc/mysql/my.cnf && ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/mysql/my.cnf"
elif [ $(( ${DIST} & ${SUSE} )) -eq ${SUSE} ]; then
     echo SuSE system detected
     ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/SuSE-release"
     PROCS=${PROCS}';rpm -qa --last'
     test -f /etc/my.cnf && ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/my.cnf"
elif [ $(( ${DIST} & ${REDHAT} )) -eq ${REDHAT} ]; then
     echo Redhat system detected
     ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/*-release"
     PROCS=${PROCS}';rpm -qa --last'
     test -f /etc/my.cnf && ARCHIVE_DIRS="${ARCHIVE_DIRS} /etc/my.cnf"
else
     echo Distribution not detected
fi

collect_files() {
   if [ 'disabled' == "${DROP_OLDER_LOGS_THAN}" ]; then
       ${TAR} cvf /${TMP}/${LOGDIR}/ox_files_and_logs.tar \
           --ignore-failed-read ${ARCHIVE_DIRS} > /dev/null 2>&1
   else
       # find files which should be excluded by --drop-older-logs-than option
       find ${OX_LOG_DIR} \
           -mtime +${DROP_OLDER_LOGS_THAN} \
           -type f > /${TMP}/${LOGDIR}/${DROP_OLDER_LOGS_THAN_LONG}-exclude
       # remove mandatory files from exclusion list if listed
       for keep in ${DROP_OLDER_LOGS_THAN_KEEP_ALWAYS}; do
           ${SED} -i "/${keep}$/d" /${TMP}/${LOGDIR}/${DROP_OLDER_LOGS_THAN_LONG}-exclude
       done
       ${TAR} cvf /${TMP}/${LOGDIR}/ox_files_and_logs.tar \
           --ignore-failed-read ${ARCHIVE_DIRS} \
           --exclude-from=/${TMP}/${LOGDIR}/${DROP_OLDER_LOGS_THAN_LONG}-exclude > /dev/null 2>&1
   fi
   OIFS=${IFS}
   IFS=$'\n'
   # be very selective on what to add to the archive (Bug#28830)
   for dir in /etc/httpd /etc/apache*; do
       test -d ${dir} || continue
       for file in $(find ${dir} -type f \
                   -regex '^.*\.conf$' -o \
                   -regex '^.*-\(enabled\|availabled\)\/.*$'); do
       ALLFILES="${ALLFILES} ${file}"
       done
   done
   IFS=${OIFS}
   ${TAR} rvf /${TMP}/${LOGDIR}/ox_files_and_logs.tar --ignore-failed-read ${ALLFILES} > /dev/null 2>&1
   if [ 'true' != "${SKIP_COMPRESSION}" ]; then
       bzip2 -9 /${TMP}/${LOGDIR}/ox_files_and_logs.tar
   fi
}

collect_output() {
   cd /${TMP}
   IFS=";"
   for i in ${PROCS}; do
       unset IFS
       ${i} > "/${TMP}/${LOGDIR}/commands/${i}" 2>&1
       IFS=";"
   done
   unset IFS
   cd - > /dev/null 2>&1
}

clean_up(){
   test "${KEEP_TMP}" = "true" || rm -rf ${TMP}/${LOGDIR}
}

get_ox_user_ID() {
    local _ox_user=$(ps axu | \
        grep 'open-xchange' | \
        grep 'java' | \
        ${HEAD} -n 1 | \
        ${AWK} '{print $1}')
    echo "${_ox_user}"
}

identify_and_move_ibm_dumps() {
# The IBM Java VM is storing the dumps separately in the filesystem, we search
# for the storage location within the open-xchange-console.log and move them
# into the support tarball. The filesystem storage location can be indified
# by enties like below:
# JVMDUMP010I Java dump written to /tmp/javacore.20140522.122625.3824.0005.txt
# JVMDUMP010I Snap dump written to /tmp/Snap.20140522.122628.3824.0008.trc
# JVMDUMP010I System dump written to /tmp/core.20140522.122628.3824.0006.dmp
        local _pattern=${1}
        local _dump_files=$(cat ${OX_LOG_DIR}/open-xchange-console.log | \
            grep "${_pattern}" | \
            ${SED} "s|.*${_pattern}||g")
        for file in ${_dump_files}; do
            if [ -f "${file}" ]; then
                mkdir -p ${TMP}/${LOGDIR}/$(${DIRNAME} ${file})
                mv ${file} ${TMP}/${LOGDIR}/${file}
            fi
        done
}

create_thread_dumps() {
    local _delay=3
    local _count=5
    local _top_cmd="top -d ${_delay} -bHn 5"
    ${_top_cmd} >> ${TMP}/${LOGDIR}/commands/"${_top_cmd} (thread-dump)" &
    echo -n "Creating Threaddumps: "
    for i in $(seq ${_count}); do
        echo -n "${i} "
        ${KILL} -3 $(get_ox_java_pid)
        ${SLEEP} ${_delay}
    done
    echo
    if [ 'ibm' == "$(get_java_vm_type)" ]; then
        identify_and_move_ibm_dumps "Java dump written to "
    fi
}

create_heap_dump() {
   local _heap_dump_cmd="jmap -dump:file"
   local _heap_histo_cmd="jmap -histo"
   # Grant write permissions for ox user
   if [ 'ibm' != "$(get_java_vm_type)" ]; then
       JMAP=$(check_on_needed jmap)
       SUDO=$(check_on_needed sudo)
       chmod a+w ${TMP}/${LOGDIR}/commands
       ${SUDO} -u "#$(get_ox_user_ID)" ${_heap_histo_cmd} $(get_ox_java_pid) \
           >> "${TMP}/${LOGDIR}/commands/${_heap_histo_cmd} (heap-dump)"
       ${SUDO} -u "#$(get_ox_user_ID)" \
           ${_heap_dump_cmd}=${TMP}/${LOGDIR}/commands/"${_heap_dump_cmd} (heap-dump)" \
           $(get_ox_java_pid)
   else
       JEXTRACT=$(check_on_needed jextract)
       echo "Terminating open-xchange service for heap dump creation:"
       cd ${TMP}
       kill -ABRT "$(get_ox_java_pid)"
       while [ -n "$(get_ox_java_pid)" ]; do
           echo -n .
           ${SLEEP} 1
       done
       OX_JVM_TERMINATED=true
       echo
       identify_and_move_ibm_dumps "System dump written to "
       identify_and_move_ibm_dumps "Snap dump written to "
       identify_and_move_ibm_dumps "Java dump written to "
       HEAP_DUMPS=$(find ${TMP}/${LOGDIR} -name "core.*.dmp")
       echo "Processing Heap-Dumps..."
       for heap_dump in ${HEAP_DUMPS}; do
           if [ 'true' != "${SKIP_COMPRESSION}" ]; then
               ${JEXTRACT} ${heap_dump} 2> /dev/null
               # the heap dump is included in the jextract zip archive
               rm ${heap_dump}
           else
               ${JEXTRACT} ${heap_dump} -nozip 2> /dev/null
           fi
       done
   fi
}

get_java_vm_type() {
   # the java vm type is defines in third line of 'java -version' output
   local _java_vm_type=$(cat ${TMP}/${LOGDIR}/commands/java\ -version | \
       ${HEAD} -n 3  | \
       ${TAIL} -n 1 | \
       ${SED} 's|(.*||g' | \
       ${TR} [:upper:] [:lower:])
       case ${_java_vm_type} in
           openjdk*) _java_vm_type=openjdk ;;
           ibm*) _java_vm_type=ibm ;;
           hotspot*) _java_vm_type=hotspot ;;
           sun*) _java_vm_type=sun ;;
           oracle*) _java_vm_type=oracle ;;
           *) _java_vm_type=unknown ;;
       esac
       echo ${_java_vm_type}
}


trap "rm -f ${LOGARC}; clean_up; exit 1" SIGINT SIGSEGV SIGQUIT SIGTERM

echo creating logdir ${TMP}/${LOGDIR}
mkdir -p ${TMP}/${LOGDIR}/commands/
echo collecting system data into ${TMP}/${LOGDIR}
collect_output
if [ 'true' == "${THREAD_DUMP}" ]; then
    create_thread_dumps
fi
if [ 'true' == "${HEAP_DUMP}" ]; then
    create_heap_dump
fi
echo collecting files into ${TMP}/${LOGDIR}/ox_files_and_logs.tar${LOGS_AND_FILES_SUFFIX}
collect_files
echo creating archive ${LOGARC}${LOGARC_SUFFIX}
${TAR} cvf ${LOGARC} -C ${TMP} ${LOGDIR} > /dev/null 2>&1
if [ 'true' != "${SKIP_COMPRESSION}" ]; then
       ${GZIP} ${LOGARC}
fi
if [ 'true' == "${OX_JVM_TERMINATED}" ];then
    service open-xchange start
fi
clean_up
