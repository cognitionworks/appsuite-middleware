# Defines the name of the Cassandra cluster. Technically this name does not correlate
# with the name configured in the real Cassandra cluster, but it's rather used to distinguish 
# exposed JMX metrics when multiple Cluster instances live in the same JVM
com.openexchange.nosql.cassandra.clusterName=OX

# Defines the Cassandra seed node(s) as a comma separated list
com.openexchange.nosql.cassandra.clusterContactPoints=127.0.0.1

# Defines the port on which the Cassandra server is running
# Defaults to 9042
com.openexchange.nosql.cassandra.port=9042

# Defines load balancing policy to use for the cluster. There are three load balancing policies
# to choose from: RoundRobin, DCAwareRoundRobin and DCTokenAwareRoundRobin
# 
# RoundRobin
# ----------
# A Round-robin load balancing policy.
#     
# This policy queries nodes in a round-robin fashion. For a given query,
# if an host fail, the next one (following the round-robin order) is
# tried, until all hosts have been tried.
#     
# This policy is not datacenter aware and will include every known
# Cassandra host in its round robin algorithm. If you use multiple
# datacenter this will be inefficient and you will want to use the
# DCAwareRoundRobin load balancing policy instead.
#
# DCAwareRoundRobin
# -----------------
# A data-center aware Round-robin load balancing policy.
#
# This policy provides round-robin queries over the node of the local
# data center. It also includes in the query plans returned a configurable
# number of hosts in the remote data centers, but those are always tried
# after the local nodes. In other words, this policy guarantees that no
# host in a remote data center will be queried unless no host in the local
# data center can be reached.
#
# If used with a single data center, this policy is equivalent to the
# RoundRobin, but its DC awareness incurs a slight overhead
# so the latter should be preferred to this policy in that case.
#
# DCTokenAwareRoundRobin
# ----------------------
# Same as the DCAwareRoundRobin load balancing policy but with
# added token awareness.
#
# Defaults to RoundRobin
com.openexchange.nosql.cassandra.loadBalancingPolicy=RoundRobin

# A policy that defines a default behaviour to adopt when a request fails. There are three 
# retry policies to choose from: defaultRetryPolicy, downgradingConsistencyRetryPolicy
# and fallthroughRetryPolicy
# 
# defaultRetryPolicy
# ------------------
# This policy retries queries in only two cases:
#  - On a read timeout, if enough replicas replied but data was not retrieved.
#  - On a write timeout, if we timeout while writing the distributed log used by batch statements.
# 
# This retry policy is conservative in that it will never retry with a
# different consistency level than the one of the initial operation.
# 
# In some cases, it may be convenient to use a more aggressive retry policy
# like downgradingConsistencyRetryPolicy.
#
# downgradingConsistencyRetryPolicy
# ---------------------------------
# A retry policy that sometimes retries with a lower consistency level than
# the one initially requested.
#
# BEWARE: this policy may retry queries using a lower consistency
# level than the one initially requested. By doing so, it may break
# consistency guarantees. In other words, if you use this retry policy,
# there are cases where a read at QUORUM may NOT see a preceding write 
# at QUORUM. Do not use this policy unless you have understood the cases
# where this can happen and are ok with that. It is also highly recommended 
# to always enable the logRetryPolicy to log the occurrences of such consistency 
# breaks.
#
# fallthroughRetryPolicy
# ----------------------
#  A retry policy that never retries (nor ignores).
#
# Defaults to defaultRetryPolicy
com.openexchange.nosql.cassandra.retryPolicy=defaultRetryPolicy

# Logs the retry decision of the policy
#
# Defaults to false
com.openexchange.nosql.cassandra.logRetryPolicy=false

# Enables the query logger which logs all executed statements
#
# Defatuls to false
com.openexchange.nosql.cassandra.enableQueryLogger=false

# Defines the latency threshold in milliseconds beyond which queries are considered 'slow'
# and logged as such by the Cassandra service. Used in conjunction with the 'enableQueryLogger'
# property
# Default: 5000
com.openexchange.nosql.cassandra.queryLatencyThreshold=5000