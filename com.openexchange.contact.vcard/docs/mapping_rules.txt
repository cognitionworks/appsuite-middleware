Workflows
=========

* Export a contact with no original vCard:
  - Start with a blank vCard
  - Write all mapped OX properties into the vCard based on the mapping rules below

* Export a contact with an original vCard:
  - Load the stored vCard
  - Merge all mapped OX properties into the vCard based on the mapping rules below

* Import a vCard and create a new contact:
  - Create a new contact
  - Parse all mapped properties based on the mapping rules below
  - Additionally, store the original vCard

* Import a vCard and update an existing contact:
  - Load the stored contact
  - Parse all mapped properties based on the mapping rules below
  - Store or overwrite a previously stored original vCard


Mapping Rules
=============

(1) Addresses
-------------

* https://tools.ietf.org/html/rfc6350#section-6.3.1 
* OX contacts have three address types: "business", "home" and and "other"
* For each, OX stores the properties "street", "city", "state", "postal code" and "country"
* Additionally, the mailing label for snail mail (as set by some Outlook clients) is held in "addressHome", "addressBusiness" and "addressOther" 
* In vCards, "ADR" properties have the cardinality "*", and may have an assigned "LABEL" for the mailing label
* Each one is stored as structured value ("post office box", "extended address", "street address", "locality", "region", "postal code", "country name")
* The address parts are mapped between OX contacts and vCards as follows:
  - "street" <-> "street address"
  - "city" <-> "locality"
  - "state" <-> "region"
  - "postal code" <-> "postal code"
  - "country" <-> "country name"
  - "address" <-> LABEL
* Hence, there are no corresponding OX fields for "post office box" and "extended address"
* During import, the mapping to vCard "ADR" properties is based on the "TYPE" parameters and follows the following rules:
  - For the "business" address, the first "ADR" property with type "work" and type "pref" is parsed
    if not found, parse the first with type "work"
    if not found, delete the corresponding OX address properties
  - For the "home" address, the first "ADR" property with type "home" and type "pref" is parsed
    if not found, parse the first with type "home"
    if not found, delete the corresponding OX address properties
  - For the "other" address, the first "ADR" property with type "x-other" and type "pref" is parsed
    if not found, parse the first with type "x-other"
    if not found, parse the first without type parameters "home" and "work" 
    if not found, delete the corresponding OX address properties
* During export, the OX contact addresses are serialized to a previously saved original vCard as follows:
  - Generally, if no single OX property that forms a specific address is set anymore, the corresponding vCard property is deleted during the update
  - For the "business" address, the first "ADR" property with type "work" and type "pref" is updated
    if not found, update the first property with type "work" and add the "pref" type
    if not found, add a new property with types "work" and "pref"
  - For the "home" address, the first "ADR" property with type "home" and type "pref" is updated
    if not found, update the first property with type "home"
    if not found, add a new property with type "home"
  - For the "other" address, the first "ADR" property with type "x-other" and type "pref" is updated
    if not found, update the first property with type "x-other"
    if not found, update the first property without types "home" and "work" and add the "x-other" type
    if not found, add a new property with type "x-other"


(2) E-Mails
-----------

* https://tools.ietf.org/html/rfc6350#section-6.4.2
* OX contacts allow storing three different e-mail addresses: "email1" (~business), "email2" (~home) and "email3" (~other)
* A "telex" address is stored at "telephone_telex" in OX contacts, yet it is expressed as "EMAIL" type in vCards    
* In vCards, "EMAIL" properties have the cardinality *
* During import, the mapping to vCard "EMAIL" properties is based on the "TYPE" parameters and follows the following rules:
  - Generally, if no matching vCard "EMAIL" property is found, the corresponding OX email property is deleted
  - For the "business" mail address, the first "EMAIL" property with type "work" and type "pref" is parsed
    if not found, parse the first with type "work"
  - For the "home" mail address, the first "EMAIL" property with type "home" and type "pref" is parsed
    if not found, parse the first with type "home"
  - For the "other" mail address, the first "EMAIL" property with type "x-other" and type "pref" is parsed
    if not found, parse the first with type "x-other"
    if not found, parse the first without type parameter "work", "home", "x-other" or "TLX"
  - For the "telex" address, the first "EMAIL" property with type "TLX" and type "pref" is parsed
    if not found, parse the first with type "TLX"
* During export, the OX contact mail addresses are serialized to a previously saved original vCard as follows:
  - Generally, if no single OX property that forms a specific email is set anymore, the corresponding vCard property is deleted during the update
  - For the "business" mail address, the first "EMAIL" property with type "work" and type "pref" is updated
    if not found, update the first with type "work" and add the "pref" type
    if not found, add a new property with types "work" and "pref"
  - For the "home" mail address, the first "EMAIL" property with type "home" and type "pref" is updated
    if not found, update the first with type "home"
    if not found, add a new property with type "home"
  - For the "other" mail address, the first "EMAIL" property with type "x-other" and type "pref" is updated
    if not found, update the first with type "x-other"
    if not found, update the first without type parameter "work", "home", "x-other" or "TLX" and add the "x-other" type
    if not found, add a new property with types "x-other"
  - For the "telex" address, the first "EMAIL" property with type "tlx" and type "pref" is updated
    if not found, update the first with type "tlx"
    if not found, add a new property with type "tlx"


(3) Instant Messenger
---------------------

* https://tools.ietf.org/html/rfc6350#section-6.4.3
* OX contacts allow to store two IM addresses: "instant_messenger1" (~business), "instant_messenger2" (~home)
* OX contacts store IM addresses as arbitrary strings, there are no special protocol semantics applied
* In vCards, IMPP properties have the cardinality *
* In vCards, an instant messenger addresses are formed as URI, where the protocol part indicate the messenger type (such as 'aim' or 'irc') 
* During import, the mapping to vCard "IMPP" properties is based on the "TYPE" parameters and follows the following rules:
  - The whole URI string is stored during import  
  - Generally, if no matching vCard "IMPP" property is found, the corresponding OX instant messenger properties are deleted
  - For the "business" IM address, the first "IMPP" property with type "work" and type "pref" is parsed
    if not found, parse the first with type "work"
  - For the "home" IM address, the first "IMPP" property with type "home" and type "pref" is parsed
    if not found, parse the first with type "home"
    if not found, parse the first without type parameter
* During export, the OX contact IM addresses are serialized to a previously saved original vCard as follows:
  - If the stored value represents a URI, this URI is used directly, otherwise, a synthetic URI is constructed    
  - Generally, if no single OX property that forms a specific IM address is set anymore, the corresponding vCard property is deleted during the update
  - For the "business" IM address, the first "IMPP" property with type "work" and type "pref" is updated
    if not found, update the first with type "work" and add the "pref" type
    if not found, add a new property with types "work" and "pref"
  - For the "home" IM address, the first "IMPP" property with type "home" and type "pref" is updated
    if not found, update the first with type "home"
    if not found, add a new property with types "home"


(4) Organization
----------------

* https://tools.ietf.org/html/rfc6350#section-6.6.4
* OX contacts store organizational attributes at "company", "department" and "branches"
* In vCards, the structured "ORG" property holds the "X.520 Organization Name and Organization Unit attributes [CCITT.X520.1988]"
* During import, the mapping to the vCard "ORG" property is based on the following rules:
  - The first value from the structured "ORG" property is used as "company"
  - The second value from the structured "ORG" property is used as "department"
  - All further values from the structured "ORG" property are used as "branches"
  - If no "ORG" property is found, all corresponding contact attributes are deleted, too
* During export, the OX contact's organizational attributes are serialized to a previously saved original vCard as follows:
  - If no single OX property that forms the "ORG" property is set anymore, the corresponding vCard property is deleted during the update
  - The structured value is always rewritten
  - The "company" is used as first value of the structured value
  - The "department" is used as second value of the structured value
  - The "branches" are used as further values of the structured value


(6) Telephone
-------------

* https://tools.ietf.org/html/rfc6350#section-6.4.1
* OX contacts store telephone and fax numbers at the fields "telephone_business1", "telephone_business2", "fax_business", "telephone_callback",
  "telephone_car", "telephone_company", "telephone_home1", "telephone_home2", "fax_home", "cellular_telephone1", "cellular_telephone2",
  "telephone_other", "fax_other", "telephone_isdn", "telephone_pager", "telephone_primary", "telephone_radio", "telephone_ttytdd",
  "telephone_ip", "telephone_assistant" 
* In vCards, TEL properties have the cardinality *
* During import, the mapping from vCard "TEL" properties is based on the "TYPE" parameters and follows the following rules:
  - Generally, if no matching vCard "TEL" property is found, the corresponding OX telephone properties are deleted
  - For the "telephone_pager" attribute, the most preferred "TEL" property with type "pager" is parsed
  - For the "telephone_ttytdd" attribute, the most preferred "TEL" property with type "textphone" is parsed
  - For the "telephone_isdn" attribute, the most preferred "TEL" property with type "isdn" is parsed
  - For the "telephone_car" attribute, the most preferred "TEL" property with type "car" is parsed
  - For the "cellular_telephone1" attribute, the most preferred "TEL" property with type "cell" is parsed
  - For the "cellular_telephone2" attribute, the most preferred "TEL" property with types "cell" and "x-2nd" is parsed
    if not found, parse the second most preferred "TEL" property with type "cell"
  - For the "telephone_callback" attribute, the most preferred "TEL" property with type "x-callback" is parsed
  - For the "telephone_company" attribute, the most preferred "TEL" property with type "x-company" is parsed
  - For the "telephone_assistant" attribute, the most preferred "TEL" property with type "x-assistant" is parsed
  - For the "telephone_ip" attribute, the most preferred "TEL" property with type "x-ip" is parsed
  - For the "telephone_radio" attribute, the most preferred "TEL" property with type "x-radio" is parsed
  - For the "telephone_primary" attribute, the most preferred "TEL" property with type "x-primary" is parsed
  - For the "fax_business" attribute, the most preferred "TEL" property with types "fax" and type "work" is parsed
  - For the "fax_home" attribute, the most preferred "TEL" property with types "fax" and type "home" is parsed
  - For the "fax_other" attribute, the most preferred "TEL" property with types "fax" and type "x-other" is parsed
  - For the "telephone_business1" attribute, the most preferred "TEL" property with types "voice" and type "work" is parsed
    if not found, parse the most preferred "TEL" property with type "work" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
  - For the "telephone_business2" attribute, the most preferred "TEL" property with types "voice", "work" and "x-2nd" is parsed
    if not found, parse the most preferred "TEL" property with types "work" and "x-2nd" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, parse the second most preferred "TEL" property with types "voice" and "work"
    if not found, parse the second most preferred "TEL" property with types "work" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
  - For the "telephone_home1" attribute, the most preferred "TEL" property with types "voice" and type "home" is parsed
    if not found, parse the most preferred "TEL" property with type "home" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
  - For the "telephone_home2" attribute, the most preferred "TEL" property with types "voice", "home" and "x-2nd" is parsed
    if not found, parse the most preferred "TEL" property with types "home" and "x-2nd" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, parse the second most preferred "TEL" property with types "voice" and "home"
    if not found, parse the second most preferred "TEL" property with types "home" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
  - For the "telephone_other" attribute, the most preferred "TEL" property with type "x-other" is parsed
* During export, the OX contact telephone numbers are serialized to a previously saved original vCard as follows:
  - Generally, if the OX telephone property is not set anymore, the corresponding vCard property is deleted during the update
  - For the "telephone_pager" attribute, the most preferred "TEL" property with type "pager" is updated
    if not found, add a new "TEL" property with type "pager"  
  - For the "telephone_ttytdd" attribute, the most preferred "TEL" property with type "textphone" is updated
    if not found, add a new "TEL" property with type "textphone"
  - For the "telephone_isdn" attribute, the most preferred "TEL" property with type "isdn" is updated
    if not found, add a new "TEL" property with type "isdn"  
  - For the "telephone_car" attribute, the most preferred "TEL" property with type "car" is updated
    if not found, add a new "TEL" property with type "car"  
  - For the "cellular_telephone1" attribute, the most preferred "TEL" property with type "cell" is updated
    if not found, add a new "TEL" property with type "cell"
  - For the "cellular_telephone2" attribute, the most preferred "TEL" property with types "cell" and "x-2nd" is updated
    if not found, parse the update the most preferred "TEL" property with type "cell" and add the type "x-2nd" 
    if not found, add a new "TEL" property with types "cell" and "x-2nd"
  - For the "telephone_callback" attribute, the most preferred "TEL" property with type "x-callback" is updated
    if not found, add a new "TEL" property with type "x-callback"  
  - For the "telephone_company" attribute, the most preferred "TEL" property with type "x-company" is updated
    if not found, add a new "TEL" property with type "x-company"  
  - For the "telephone_assistant" attribute, the most preferred "TEL" property with type "x-assistant" is updated
    if not found, add a new "TEL" property with type "x-assistant"  
  - For the "telephone_ip" attribute, the most preferred "TEL" property with type "x-ip" is updated
    if not found, add a new "TEL" property with type "x-ip"  
  - For the "telephone_radio" attribute, the most preferred "TEL" property with type "x-radio" is updated
    if not found, add a new "TEL" property with type "x-radio"  
  - For the "telephone_primary" attribute, the most preferred "TEL" property with type "x-primary" is updated
    if not found, add a new "TEL" property with type "x-primary"  
  - For the "fax_business" attribute, the most preferred "TEL" property with types "fax" and type "work" is updated
    if not found, add a new "TEL" property with types "fax" and "work
  - For the "fax_home" attribute, the most preferred "TEL" property with types "fax" and type "home" is updated
    if not found, add a new "TEL" property with types "fax" and "home"  
  - For the "fax_other" attribute, the most preferred "TEL" property with types "fax" and type "x-other" is updated
    if not found, add a new "TEL" property with types "fax" and "x-other"
  - For the "telephone_business1" attribute, the most preferred "TEL" property with types "voice" and type "work" is updated
    if not found, update the most preferred "TEL" property with type "work" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, add a new "TEL" property with types "voice", "work" and "pref"
  - For the "telephone_business2" attribute, the most preferred "TEL" property with types "voice", "work" and "x-2nd" is updated
    if not found, update the most preferred "TEL" property with types "work" and "x-2nd" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, update the second most preferred "TEL" property with types "voice" and "work" and add the type "x-2nd"
    if not found, update the second most preferred "TEL" property with types "work" and without any of the types "text", "fax", "cell", "video", "pager", "textphone" and add the type "x-2nd"
    if not found, add a new "TEL" property with types "voice", "work" and "x-2nd"
  - For the "telephone_home1" attribute, the most preferred "TEL" property with types "voice" and type "home" is updated
    if not found, update the most preferred "TEL" property with type "home" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, add a new "TEL" property with types "voice", "home" and "pref"
  - For the "telephone_home2" attribute, the most preferred "TEL" property with types "voice", "home" and "x-2nd" is updated
    if not found, update the most preferred "TEL" property with types "home" and "x-2nd" and without any of the types "text", "fax", "cell", "video", "pager", "textphone"
    if not found, update the second most preferred "TEL" property with types "voice" and "home" and add the type "x-2nd"
    if not found, update the second most preferred "TEL" property with types "home" and without any of the types "text", "fax", "cell", "video", "pager", "textphone" and add the type "x-2nd"
    if not found, add a new "TEL" property with types "voice", "home" and "x-2nd"
  - For the "telephone_other" attribute, the most preferred "TEL" property with type "x-other" is updated
    if not found, add a new "TEL" property with types "voice" and "x-other"

