# Configuration file for USM
#
# Unless otherwise specified, the given values also represent the default values for the properties

# ---------------------
# Global USM properties
# ---------------------

# Specifies the module to check in the ajax configuration to test if USM is enabled.
# If not set (or set to an empty string), the new (and final) method is used by checking
# "modules/com.openexchange.usm/module", otherwise "modules/interface/<config-value" is checked 
# (default is now an empty string)
com.openexchange.usm.access_check_module=

# Enables/Disables the use of JCS as primary storage for USM session objects.
com.openexchange.usm.session_storage_use_jcs=true

# Determines the limit for inactivity of an USM session after which the persistent session data is removed
# (i.e. slow sync is required afterwards). This value is given in days, the default value is 60 (approx. 2 months).
# For sessions that haven't been access using the new system which stores the accurate information in a
# persistent field, double that value is used and the newest sync key is used to determine an approximation
# of the last access.
com.openexchange.usm.session_storage_time_limit=60

# ---------------------------------------------------
# Properties to configure the access to the OX server
# ---------------------------------------------------

# Defines the base URL that is used to access the OX server interface
com.openexchange.usm.ox.url=http://localhost/ajax/

# Defines a custom pattern used for OX json calls that return a html page, **action** and **json** are keywords that denote the result text to be extracted
com.openexchange.usm.ox.post_result_pattern=<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\"http://www.w3.org/TR/html4/strict.dtd\"><html><head><META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"> <script type=\"text/javascript\"> function callback(arg) { parent.callback_**action**(arg); }; callback(**json**);</script></head></html>

# Specifies the overall maximum number of (concurrent) connections the USM may use for requests to the OX server.
com.openexchange.usm.ox.max_connections=100

# Specifies the time (in milliseconds) after which idle connections to the OX server will be closed.
com.openexchange.usm.ox.idle_connection_timeout=60000

# Specifies if the HttpClient should perform stale checking of Connections before using them (increases security, lowers performance).
com.openexchange.usm.ox.perform_stale_checking=true

# ----------------------------------------------------
# Properties to modify behavior of the USM sync system
# ----------------------------------------------------

# Defines the maximum number of sync retries if a sync fails due to a concurrent modification on the OX server while the sync is in progress
com.openexchange.usm.session.sync.concurrent_modification_retries=3

# Defines the delay that is used when waiting for changes in email folders (Session.waitForChanges()) after which
# a pull on email folders is performed. The delay can either be specified as a fixed value in milliseconds which
# defines the maximum time to wait (if the waitForChanges waits for a smaller interval, the pull will be performed
# at the end of the wait) or as a percentage (integer ending with a "%"), which indicates a portion of the given
# wait interval after which the pull will be performed.
# Note that the effective delay will be modified by the com.openexchange.usm.session.sync.email_pull_min_delay
# property which may increase the delay or prohibit a pull completely.
com.openexchange.usm.session.sync.email_pull_delay=50%

# Defines the minimum delay that is required when waiting for changes in email folders (Session.waitForChanges())
# after which a pull on email folders will be performed. The value specified is in milliseconds. The effective
# delay will be the maximum of this property and the result of the computation based on the
# com.openexchange.usm.session.sync.email_pull_delay property and the value specified as parameter to the
# waitForChanges()-call. If the effective value is greater than the parameter to the waitForChanges()-call,
# no pull will be performed.
# To disable pulling completely, set the value of this property to a negative value.
com.openexchange.usm.session.sync.email_pull_min_delay=60000

# Defines a limit on the number of sync states that are stored in the database and local memory cache
# for each folder and the folder hierarchy itself (per session/client). If a client connects to the USM
# with a given sync state, all older states are automatically removed, the new state is computed, stored in
# the database and sent to the client. As long a client uses an old synckey, new keys keep getting generated,
# but none deleted. If the limit specified here is reached, the USM deletes the oldest sync state on a client
# connect. Based on the value of the property com.openexchange.usm.session.sync.keep_last_sent_state_in_db
# the USM either deletes the oldest sync state (false) or the oldest one that's not equal to the one the client
# just used to sync with (true).
# Note that the value of this property imposes an upper limit to the number of sync states stored in the cache
# and database. If a client behaves as expected, only 2 states will be stored (the one used by the client to
# initiate synchronization in case the synchronization result does not reach the client, and the new generated
# one that contains the base state for the next synchronization).
# The lower limit for this property is 2, since at least 2 sync states are required to account for communication
# failures.
com.openexchange.usm.session.sync.max_states_in_db=5

# If this property is set to true, the USM ensures that the sync state corresponding to the last sync key that was
# used by a client stays in the cache and database. If set to false, the USM always deletes the oldest sync state
# if the limit of allowed sync states is reached for a folder.
com.openexchange.usm.session.sync.keep_last_sent_state_in_db=true

# A new caching system has been introduced to the USM sync system. As long as there is no immediate need to
# make sure the newest OX server data is compared to the client data/requests, the data from previous sync calls
# will be cached and no OX call will be performed to determine its current data for the content of a folder
# (or for the folder hierarchy). The cached data will be invalidated if an OX event indicates that some change has
# occurred, and it won't be used if any client requests (creation/change/deletion) are received (the sync system has
# to make sure that the client requests are compred to the current data on the server). It will also be invalidated
# after some time, which can be configured for 2 different scenarios:
# - a complete sync, i.e. all pending server changes have been reported to the client
# - an incomplete sync, i.e. only some of the server changes have been reported to the client (in this case, the
#   client normally performs another sync call to retrieve the remaining changes until the sync is complete)
# For performance reasons, the cache is completely in-memory (and therefore server-local), cached data will
# be automatically removed if memory is running low.
# For each scenario the cache can be disabled by setting the timeout value to 0.

# Time in milliseconds for which cached data will be stored for a complete sync, default is 60000 ms. == 1 minute.
com.openexchange.usm.session.sync.cache.time_limit.complete=60000

# Time in milliseconds for which cached data will be stored for an incomplete sync, default is 1200000 ms. == 20 minutes.
com.openexchange.usm.session.sync.cache.time_limit.incomplete=1200000

# Temporaray fix bug 20085 - client data at slow sync will be ignored!!!
com.openexchange.usm.ignore_client_data_at_slow_sync=false

# USM uses an optimization to reduce the number of SyncState-updates in the DB: If a synchronization resulted
# in no changes, no new SyncState will be stored and the original SyncKey will be reused. This option allows to
# disable the optimization, enforcing a new SyncState for each synchronization performed. This option is provided
# in case any clients show errors/problems with the changed behavior of the optimization (same SyncKey is being
# reused). Default: false
com.openexchange.usm.force_new_sync_key_on_empty_sync=false
