# Grizzly.properties
#
# This file configures the grizzly server contained in the package
# open-xchange-grizzly. In your OX setup grizzly is located behind the
# load-balancer and accepts incoming client requests. Communication with the
# load balancer is done via http, e.g via Apache's mod_proxy_http.

  
### NetworkListeners and transports
################################################################################

# The host for the http network listener. Default value: 0.0.0.0, bind to every
# nic of your host.
com.openexchange.http.grizzly.httpNetworkListenerHost=0.0.0.0

# The default port for the http network listener. Default value: 8080.
com.openexchange.http.grizzly.httpNetworkListenerPort=8080

# The size for the threadpool of workers handling requests that arrive via tcp.
# Minimum = 5, default: number of reported processors,  maximum = 2147483647
com.openexchange.http.grizzly.tcpNioTranportThreadPoolSize=5




### Threadpools
################################################################################

# Grizzly offers three different Threadpools to use
#
# 1: FixedThreadPool: Unbound task queue, fixed worker pool size, no synchronization when executing tasks (highest performance) 
# 2: QueueLimitedThreadPool: An extension of the FixedThreadPool with a mximum number of pending Tasks that may be queued.
# 3: SyncThreadPool: Synchronization offer precise control over decision of thread creation, may grow in size.
# 
# To select the FixedThreadpool:
#   Set tcpNioTranportThreadPoolQueueLimit = -1 and tcpNioTranportThreadPoolMinSize = tcpNioTranportThreadPoolMaxSize

# To select the QueueLimitedThreadPool:
#   Set tcpNioTranportThreadPoolQueueLimit > 0 and tcpNioTranportThreadPoolMinSize = tcpNioTranportThreadPoolMaxSize

# To select the SyncThreadPool:
#   Set tcpNioTranportThreadPoolQueueLimit, tcpNioTranportThreadPoolMinSize and tcpNioTranportThreadPoolMaxSize to a value of your choice
#   not matching the above settings for  FixedThreadpool or QueueLimitedThreadPool.
#
#   Example: For a SyncThreadPool with unlimited poolQueue, minimum size of 5 workers and maximum size of 128 workers
#
#   com.openexchange.http.grizzly.tcpNioTranportThreadPoolQueueLimit=-1
#   com.openexchange.http.grizzly.tcpNioTranportThreadPoolMinSize=5
#   com.openexchange.http.grizzly.tcpNioTranportThreadPoolMaxSize=128

# The maximum number of pending tasks that may be queued. for the threadpool.
# Default: -1 
com.openexchange.http.grizzly.tcpNioTranportThreadPoolQueueLimit=-1

# The minimum size for the threadpool of workers handling requests that arrive via tcp.
# Minimum = 5, default: number of reported processors,  maximum = 2147483647
com.openexchange.http.grizzly.tcpNioTranportThreadPoolMinSize=5

# The maximum size for the threadpool of workers handling requests that arrive via tcp.
# Minimum = 5 or tcpNioTranportThreadPoolMinSize if that's greater, default: number of reported processors,  maximum = 2147483647
com.openexchange.http.grizzly.tcpNioTranportThreadPoolMaxSize=512


### Push technology
################################################################################

# Comet is an umbrella term used to describe a technique allowing web browser to
# receive almost real time updates from the server. The two most common
# approaches are long polling and streaming. Long polling differs from streaming
# in that each update from the server ultimately results in another follow up
# request from the client.
# Default value: true
com.openexchange.http.grizzly.hasCometEnabled=true

# Bi-directional, full-duplex communications channels over a single TCP
# connection.
# Default value: false
com.openexchange.http.grizzly.hasWebSocketsEnabled=true


### JMX
################################################################################

# Do you want to enable monitoring via JMX? Default value: true.
com.openexchange.http.grizzly.hasJMXEnabled=true


### Various
################################################################################

# To enable proper load balancing and request routing from {client1, client2 ..
# .} --> balancer --> {backend1, backend2 ...} we have to append a backend route
# to the JSESSIONID cookies separated by a '.'. It's important that this backend
# route is unique for every single backend behind the load balancer.
# The string has to be a sequence of characters excluding semi-colon, comma and
# white space so the JSESSIONID cookie stays in accordance with the cookie
# specification after we append the backendroute to it.
com.openexchange.http.grizzly.backendRoute=OX0