package com.openexchange.oauth.provider.soap;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.12
 * 2015-02-04T12:05:13.299+01:00
 * Generated source version: 2.7.12
 *
 */
@WebServiceClient(name = "OAuthClientService",
                  // wsdlLocation = "null",
                  targetNamespace = "http://soap.provider.oauth.openexchange.com")
public class OAuthClientService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://soap.provider.oauth.openexchange.com", "OAuthClientService");
    public final static QName OAuthClientServiceHttpSoap11Endpoint = new QName("http://soap.provider.oauth.openexchange.com", "OAuthClientServiceHttpSoap11Endpoint");
    public final static QName OAuthClientServiceHttpSoap12Endpoint = new QName("http://soap.provider.oauth.openexchange.com", "OAuthClientServiceHttpSoap12Endpoint");
    public final static QName OAuthClientServiceHttpEndpoint = new QName("http://soap.provider.oauth.openexchange.com", "OAuthClientServiceHttpEndpoint");
    static {
        WSDL_LOCATION = null;
    }

    public OAuthClientService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public OAuthClientService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public OAuthClientService() {
        super(WSDL_LOCATION, SERVICE);
    }


    /**
     *
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpSoap11Endpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpSoap11Endpoint() {
        return super.getPort(OAuthClientServiceHttpSoap11Endpoint, OAuthClientServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpSoap11Endpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(OAuthClientServiceHttpSoap11Endpoint, OAuthClientServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpSoap12Endpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpSoap12Endpoint() {
        return super.getPort(OAuthClientServiceHttpSoap12Endpoint, OAuthClientServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpSoap12Endpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(OAuthClientServiceHttpSoap12Endpoint, OAuthClientServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpEndpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpEndpoint() {
        return super.getPort(OAuthClientServiceHttpEndpoint, OAuthClientServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns OAuthClientServicePortType
     */
    @WebEndpoint(name = "OAuthClientServiceHttpEndpoint")
    public OAuthClientServicePortType getOAuthClientServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(OAuthClientServiceHttpEndpoint, OAuthClientServicePortType.class, features);
    }

}
