/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.oauth.provider.soap;

import java.io.IOException;
import java.rmi.RemoteException;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import org.apache.commons.codec.binary.Base64;
import com.openexchange.java.Streams;
import com.openexchange.oauth.provider.Client;
import com.openexchange.oauth.provider.ClientData;
import com.openexchange.oauth.provider.DefaultIcon;
import com.openexchange.oauth.provider.DefaultScopes;
import com.openexchange.oauth.provider.Scopes;
import com.openexchange.oauth.provider.rmi.OAuthClientRmi;

/**
 * This class was generated by Apache CXF 2.7.12
 * 2015-02-04T12:05:13.208+01:00
 * Generated source version: 2.7.12
 *
 */

@javax.jws.WebService(
    serviceName = "OAuthClientService",
    portName = "OAuthClientServiceHttpSoap11Endpoint",
    targetNamespace = "http://soap.provider.oauth.openexchange.com",
    // wsdlLocation = "null",
    endpointInterface = "com.openexchange.oauth.provider.soap.OAuthClientServicePortType")
public class OAuthClientServicePortTypeImpl implements OAuthClientServicePortType {

    private static final org.slf4j.Logger LOG = org.slf4j.LoggerFactory.getLogger(OAuthClientServicePortTypeImpl.class);

    /** The reference to RMI stub */
    public static final AtomicReference<OAuthClientRmi> RMI_REF = new AtomicReference<OAuthClientRmi>();

    private static OAuthClientRmi getClientInterface() throws OAuthClientServiceException_Exception {
        OAuthClientRmi userInterface = RMI_REF.get();
        if (null == userInterface) {
            throw new OAuthClientServiceException_Exception("Missing " + OAuthClientRmi.class.getName() + " instance.");
        }
        return userInterface;
    }

    @Override
    public com.openexchange.oauth.provider.soap.Client updateClient(java.lang.String clientId, com.openexchange.oauth.provider.soap.ClientData clientData) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            Client updatedClient = clientRmiStub.updateClient(clientId, soap2ClientData(clientData));
            return client2Soap(updatedClient);
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public java.lang.Boolean unregisterClient(java.lang.String clientId) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            return Boolean.valueOf(clientRmiStub.unregisterClient(clientId));
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public java.lang.Boolean enableClient(java.lang.String clientId) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            clientRmiStub.enableClient(clientId);
            return Boolean.TRUE;
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public com.openexchange.oauth.provider.soap.Client registerClient(com.openexchange.oauth.provider.soap.ClientData client) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            Client registeredClient = clientRmiStub.registerClient(soap2ClientData(client));
            return client2Soap(registeredClient);
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public com.openexchange.oauth.provider.soap.Client getClientById(java.lang.String clientId) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            Client client = clientRmiStub.getClientById(clientId);
            if (null == client) {
                RemoteException ex = new RemoteException("No such client");
                com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
                com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
                value.setMessage(ex.getMessage());
                faultDetail.setServiceException(value);
                throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
            }
            return client2Soap(client);
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public com.openexchange.oauth.provider.soap.Client revokeClientSecret(java.lang.String clientId) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            Client client = clientRmiStub.revokeClientSecret(clientId);
            return client2Soap(client);
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    @Override
    public java.lang.Boolean disableClient(java.lang.String clientId) throws OAuthClientServiceException_Exception {
        OAuthClientRmi clientRmiStub = getClientInterface();
        try {
            clientRmiStub.disableClient(clientId);
            return Boolean.TRUE;
        } catch (RemoteException ex) {
            com.openexchange.oauth.provider.soap.OAuthClientServiceException faultDetail = new com.openexchange.oauth.provider.soap.OAuthClientServiceException();
            com.openexchange.oauth.provider.soap.ServiceException value = new com.openexchange.oauth.provider.soap.ServiceException();
            value.setMessage(ex.getMessage());
            faultDetail.setServiceException(value);
            throw new OAuthClientServiceException_Exception(ex.getMessage(), faultDetail, ex);
        }
    }

    // -----------------------------------------------------------------------------------------------------------------------------------

    private com.openexchange.oauth.provider.soap.Client client2Soap(Client client) {
        com.openexchange.oauth.provider.soap.Client soapClient = new com.openexchange.oauth.provider.soap.Client();

        {
            String contactAddress = client.getContactAddress();
            if (null != contactAddress) {
                soapClient.setContactAddress(contactAddress);
            }
        }

        {
            Scopes defaultScope = client.getDefaultScope();
            if (null != defaultScope) {
                soapClient.setDefaultScope(defaultScope.scopeString());
            }
        }

        {
            String description = client.getDescription();
            if (null != description) {
                soapClient.setDescription(description);
            }
        }

        {
            com.openexchange.oauth.provider.Icon icon = client.getIcon();
            if (null != icon) {
                try {
                    Icon soapIcon = new Icon();
                    soapIcon.setData(Base64.encodeBase64String(Streams.stream2bytes(icon.getInputStream())));
                    soapIcon.setMimeType(icon.getMimeType());
                    soapIcon.setSize(Integer.valueOf(icon.getSize()));
                    soapClient.setIcon(soapIcon);
                } catch (IOException e) {
                    LOG.error("Failed to apply icon to client SOAP representation", e);
                }
            }
        }

        {
            boolean enabled = client.isEnabled();
            soapClient.setEnabled(Boolean.valueOf(enabled));
        }

        {
            String id = client.getId();
            if (null != id) {
                soapClient.setId(id);
            }
        }

        {
            String name = client.getName();
            if (null != name) {
                soapClient.setName(name);
            }
        }

        {
            List<String> redirectURIs = client.getRedirectURIs();
            if (null != redirectURIs) {
                soapClient.setRedirectURIs(redirectURIs);
            }
        }

        {
            Date registrationDate = client.getRegistrationDate();
            if (null != registrationDate) {
                try {
                    final GregorianCalendar c = new GregorianCalendar();
                    c.setTime(registrationDate);
                    soapClient.setRegistrationDate(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
                } catch (final DatatypeConfigurationException e) {
                    soapClient.setRegistrationDate(null);
                }
            }
        }

        {
            String secret = client.getSecret();
            if (null != secret) {
                soapClient.setSecret(secret);
            }
        }

        {
            String website = client.getWebsite();
            if (null != website) {
                soapClient.setWebsite(website);
            }
        }

        return soapClient;
    }

    private ClientData soap2ClientData(com.openexchange.oauth.provider.soap.ClientData soapClientData) {
        ClientData clientData = new ClientData();

        {
            String contactAddress = soapClientData.getContactAddress();
            if (null != contactAddress) {
                clientData.setContactAddress(contactAddress);
            }
        }

        {
            String defaultScope = soapClientData.getDefaultScope();
            if (null != defaultScope) {
                clientData.setDefaultScope(DefaultScopes.parseScope(defaultScope));
            }
        }

        {
            String description = soapClientData.getDescription();
            if (null != description) {
                clientData.setDescription(description);
            }
        }

        {
            Icon base64Icon = soapClientData.getIcon();
            if (null != base64Icon) {
                DefaultIcon icon = new DefaultIcon();
                icon.setMimeType(base64Icon.getMimeType());
                icon.setSize(base64Icon.getSize().intValue());
                icon.setData(Base64.decodeBase64(base64Icon.getData()));
                clientData.setIcon(icon);
            }
        }

        {
            String name = soapClientData.getName();
            if (null != name) {
                clientData.setName(name);
            }
        }

        {
            List<String> redirectURIs = soapClientData.getRedirectURIs();
            if (null != redirectURIs) {
                clientData.setRedirectURIs(new LinkedHashSet<String>(redirectURIs));
            }
        }

        {
            String website = soapClientData.getWebsite();
            if (null != website) {
                clientData.setWebsite(website);
            }
        }

        return clientData;
    }

}
