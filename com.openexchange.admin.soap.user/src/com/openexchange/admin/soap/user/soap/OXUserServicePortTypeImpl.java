
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.user.soap;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import com.openexchange.admin.rmi.OXUserInterface;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchUserException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.user.dataobjects.Context;
import com.openexchange.admin.soap.user.dataobjects.Credentials;
import com.openexchange.admin.soap.user.dataobjects.Database;
import com.openexchange.admin.soap.user.dataobjects.Entry;
import com.openexchange.admin.soap.user.dataobjects.Group;
import com.openexchange.admin.soap.user.dataobjects.SOAPMapEntry;
import com.openexchange.admin.soap.user.dataobjects.SOAPStringMap;
import com.openexchange.admin.soap.user.dataobjects.SOAPStringMapMap;
import com.openexchange.admin.soap.user.dataobjects.User;
import com.openexchange.admin.soap.user.dataobjects.UserModuleAccess;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:24:58.917+02:00
 * Generated source version: 2.6.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "OXUserService",
                      portName = "OXUserServiceHttpsEndpoint",
                      targetNamespace = "http://soap.admin.openexchange.com",
                      wsdlLocation = "null",
                      endpointInterface = "com.openexchange.admin.soap.user.soap.OXUserServicePortType")
                      
public class OXUserServicePortTypeImpl implements OXUserServicePortType {

    public static final AtomicReference<OXUserInterface> RMI_REFERENCE = new AtomicReference<OXUserInterface>();

    private static OXUserInterface getUserInterface() throws RemoteException_Exception {
        final OXUserInterface userInterface = RMI_REFERENCE.get();
        if (null == userInterface) {
            throw new RemoteException_Exception("Missing "+OXUserInterface.class.getName() + " instance.");
        }
        return userInterface;
    }

    @Override
    public User createByModuleAccess(final Context ctx,final User usrdata,final UserModuleAccess access,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), soap2ModuleAccess(access), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void change(final Change parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.change(soap2Context(parameters.ctx), soap2User(parameters.usrdata), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public User createByModuleAccessName(final Context ctx,final User usrdata,final java.lang.String accessCombinationName,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), accessCombinationName, soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public UserModuleAccess getModuleAccess(final Context ctx,final User user,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return moduleAccess2Soap(userInterface.getModuleAccess(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<User> listAll(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.listAll(soap2Context(ctx), soap2Credentials(auth));
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<User>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public User getContextAdmin(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , DuplicateExtensionException_Exception , RemoteException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.getContextAdmin(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeByModuleAccessName(final ChangeByModuleAccessName parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccess(soap2Context(parameters.ctx), soap2User(parameters.user), parameters.accessCombinationName, soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.delete(soap2Context(parameters.ctx), soap2User(parameters.user), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void deleteMultiple(final DeleteMultiple parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            final List<User> list = parameters.users;
            final com.openexchange.admin.rmi.dataobjects.User[] users = new com.openexchange.admin.rmi.dataobjects.User[list.size()];
            for (int i = 0; i < users.length; i++) {
                users[i] = soap2User(list.get(i));
            }
            userInterface.delete(soap2Context(parameters.ctx), users, soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeByModuleAccess(final ChangeByModuleAccess parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccess(soap2Context(parameters.ctx), soap2User(parameters.user), soap2ModuleAccess(parameters.moduleAccess), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<User> getMultipleData(final Context ctx,final java.util.List<User> list,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = new com.openexchange.admin.rmi.dataobjects.User[list.size()];
            for (int i = 0; i < users.length; i++) {
                users[i] = soap2User(list.get(i));
            }
            final com.openexchange.admin.rmi.dataobjects.User[] retUsers = userInterface.getData(soap2Context(ctx), users, soap2Credentials(auth));
            if (null == retUsers) {
                return Collections.emptyList();
            }
            final int length = retUsers.length;
            final java.util.List<User> ret = new ArrayList<User>(length);
            for (int i = 0; i < length; i++) {
                ret.add(user2Soap(retUsers[i]));
            }
            return ret;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.String getAccessCombinationName(final Context ctx,final User user,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return userInterface.getAccessCombinationName(soap2Context(ctx), soap2User(user), soap2Credentials(auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public User create(final Context ctx,final User usrdata,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.create(soap2Context(ctx), soap2User(usrdata), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<User> list(final Context ctx,final java.lang.String searchPattern,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.list(soap2Context(ctx), searchPattern, soap2Credentials(auth));
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<User>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<User> listCaseInsensitive(final Context ctx,final java.lang.String searchPattern,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.User[] users = userInterface.listCaseInsensitive(soap2Context(ctx), searchPattern, soap2Credentials(auth));
            if (null == users) {
                return Collections.emptyList();
            }
            final java.util.List<User> list = new ArrayList<User>(users.length);
            for (final com.openexchange.admin.rmi.dataobjects.User user : users) {
                list.add(user2Soap(user));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeModuleAccessGlobal(final ChangeModuleAccessGlobal parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            userInterface.changeModuleAccessGlobal(parameters.filter, soap2ModuleAccess(parameters.addAccess), soap2ModuleAccess(parameters.removeAccess), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.Boolean exists(final Context ctx,final User user,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return Boolean.valueOf(userInterface.exists(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public User getData(final Context ctx, final User user,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchUserException_Exception , DatabaseUpdateException_Exception    { 
        final OXUserInterface userInterface = getUserInterface();
        try {
            return user2Soap(userInterface.getData(soap2Context(ctx), soap2User(user), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final NoSuchUserException e) {
            throw new NoSuchUserException_Exception(e.getMessage(), e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        credentials.setLogin(soapCredentials.getLogin());
        credentials.setPassword(soapCredentials.getPassword());
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.User soap2User(final User soapUser) {
        if (null == soapUser) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.User user = new com.openexchange.admin.rmi.dataobjects.User();
        user.setGui_spam_filter_enabled(soapUser.isGuiSpamFilterEnabled());
        user.setAliasesForSOAP(soapUser.getAliases());
        user.setAnniversary(soapUser.getAnniversary().toGregorianCalendar().getTime());
        user.setAssistant_name(soapUser.getAssistantName());
        user.setBirthday(soapUser.getBirthday().toGregorianCalendar().getTime());
        user.setBranches(soapUser.getBranches());
        user.setBusiness_category(soapUser.getBusinessCategory());
        user.setCategories(soapUser.getCategories());
        user.setCellular_telephone1(soapUser.getCellularTelephone1());
        user.setCellular_telephone2(soapUser.getCellularTelephone2());
        user.setCity_business(soapUser.getCityBusiness());
        user.setCity_home(soapUser.getCityHome());
        user.setCity_other(soapUser.getCityOther());
        user.setCommercial_register(soapUser.getCommercialRegister());
        user.setCompany(soapUser.getCompany());
        user.setContextadmin(soapUser.isContextadmin().booleanValue());
        user.setCountry_business(soapUser.getCountryBusiness());
        user.setCountry_home(soapUser.getCountryHome());
        user.setCountry_other(soapUser.getCountryOther());
        user.setDefaultSenderAddress(soapUser.getDefaultSenderAddress());
        user.setDefault_group(soap2Group(soapUser.getDefaultGroup()));
        user.setDepartment(soapUser.getDepartment());
        user.setDisplay_name(soapUser.getDisplayName());
        user.setEmail1(soapUser.getEmail1());
        user.setEmail2(soapUser.getEmail2());
        user.setEmail3(soapUser.getEmail3());
        user.setEmployeeType(soapUser.getEmployeeType());
        user.setFax_business(soapUser.getFaxBusiness());
        user.setFax_home(soapUser.getFaxHome());
        user.setFax_other(soapUser.getFaxOther());
        user.setFolderTree(soapUser.getFolderTree());
        user.setGiven_name(soapUser.getGivenName());
        user.setGuiPreferences(soap2Map(soapUser.getGuiPreferencesForSoap()));
        user.setId(soapUser.getId());
        user.setImapLogin(soapUser.getImapLogin());
        user.setImapServer(soapUser.getImapServer());
        user.setInfo(soapUser.getInfo());
        user.setInstant_messenger1(soapUser.getInstantMessenger1());
        user.setInstant_messenger2(soapUser.getInstantMessenger2());
        user.setLanguage(soapUser.getLanguage());
        user.setMail_folder_confirmed_ham_name(soapUser.getMailFolderConfirmedHamName());
        user.setMail_folder_confirmed_spam_name(soapUser.getMailFolderConfirmedSpamName());
        user.setMail_folder_drafts_name(soapUser.getMailFolderDraftsName());
        user.setMail_folder_sent_name(soapUser.getMailFolderSentName());
        user.setMail_folder_spam_name(soapUser.getMailFolderSpamName());
        user.setMail_folder_trash_name(soapUser.getMailFolderTrashName());
        user.setMailenabled(soapUser.isMailenabled());
        user.setManager_name(soapUser.getManagerName());
        user.setMarital_status(soapUser.getMaritalStatus());
        user.setMiddle_name(soapUser.getMiddleName());
        user.setName(soapUser.getName());
        user.setNickname(soapUser.getNickname());
        user.setNote(soapUser.getNote());
        user.setNumber_of_children(soapUser.getNumberOfChildren());
        user.setNumber_of_employee(soapUser.getNumberOfEmployee());
        user.setPassword(soapUser.getPassword());
        user.setPasswordMech(soapUser.getPasswordMech());
        user.setPassword_expired(soapUser.isPasswordExpired());
        user.setPosition(soapUser.getPosition());
        user.setPostal_code_business(soapUser.getPostalCodeBusiness());
        user.setPostal_code_home(soapUser.getPostalCodeHome());
        user.setPostal_code_other(soapUser.getPostalCodeOther());
        user.setPrimaryEmail(soapUser.getPrimaryEmail());
        user.setProfession(soapUser.getProfession());
        user.setRoom_number(soapUser.getRoomNumber());
        user.setSales_volume(soapUser.getSalesVolume());
        user.setSmtpServer(soapUser.getSmtpServer());
        user.setSpouse_name(soapUser.getSpouseName());
        user.setState_business(soapUser.getStateBusiness());
        user.setState_home(soapUser.getStateHome());
        user.setState_other(soapUser.getStateOther());
        user.setStreet_business(soapUser.getStreetBusiness());
        user.setStreet_home(soapUser.getStreetHome());
        user.setStreet_other(soapUser.getStreetOther());
        user.setSuffix(soapUser.getSuffix());
        user.setSur_name(soapUser.getSurName());
        user.setTax_id(soapUser.getTaxId());
        user.setTelephone_assistant(soapUser.getTelephoneAssistant());
        user.setTelephone_business1(soapUser.getTelephoneBusiness1());
        user.setTelephone_business2(soapUser.getTelephoneBusiness2());
        user.setTelephone_callback(soapUser.getTelephoneCallback());
        user.setTelephone_car(soapUser.getTelephoneCar());
        user.setTelephone_company(soapUser.getTelephoneCompany());
        user.setTelephone_home1(soapUser.getTelephoneHome1());
        user.setTelephone_home2(soapUser.getTelephoneHome2());
        user.setTelephone_ip(soapUser.getTelephoneIp());
        user.setTelephone_isdn(soapUser.getTelephoneIsdn());
        user.setTelephone_other(soapUser.getTelephoneOther());
        user.setTelephone_pager(soapUser.getTelephonePager());
        user.setTelephone_primary(soapUser.getTelephonePrimary());
        user.setTelephone_radio(soapUser.getTelephoneRadio());
        user.setTelephone_telex(soapUser.getTelephoneTelex());
        user.setTelephone_ttytdd(soapUser.getTelephoneTtytdd());
        user.setTimezone(soapUser.getTimezone());
        user.setTitle(soapUser.getTitle());
        user.setUploadFileSizeLimit(soapUser.getUploadFileSizeLimit());
        user.setUploadFileSizeLimitPerFile(soapUser.getUploadFileSizeLimitPerFile());
        user.setUrl(soapUser.getUrl());
        user.setUserAttributes(soap2MapMap(soapUser.getUserAttributes()));
        user.setUserfield01(soapUser.getUserfield01());
        user.setUserfield02(soapUser.getUserfield02());
        user.setUserfield03(soapUser.getUserfield03());
        user.setUserfield04(soapUser.getUserfield04());
        user.setUserfield05(soapUser.getUserfield05());
        user.setUserfield06(soapUser.getUserfield06());
        user.setUserfield07(soapUser.getUserfield07());
        user.setUserfield08(soapUser.getUserfield08());
        user.setUserfield09(soapUser.getUserfield09());
        user.setUserfield10(soapUser.getUserfield10());
        user.setUserfield11(soapUser.getUserfield11());
        user.setUserfield12(soapUser.getUserfield12());
        user.setUserfield13(soapUser.getUserfield13());
        user.setUserfield14(soapUser.getUserfield14());
        user.setUserfield15(soapUser.getUserfield15());
        user.setUserfield16(soapUser.getUserfield16());
        user.setUserfield17(soapUser.getUserfield17());
        user.setUserfield18(soapUser.getUserfield18());
        user.setUserfield19(soapUser.getUserfield19());
        user.setUserfield20(soapUser.getUserfield20());
        return user;
    }

    private static User user2Soap(final com.openexchange.admin.rmi.dataobjects.User user) {
        if (null == user) {
            return null;
        }
        final User soapUser = new User();
        soapUser.setGuiSpamFilterEnabled(user.getGui_spam_filter_enabled());
        soapUser.setAliases(user.getAliasesForSOAP());
        try {
            final GregorianCalendar c = new GregorianCalendar();
            c.setTime(user.getAnniversary());
            soapUser.setAnniversary(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
        } catch (final DatatypeConfigurationException e) {
            soapUser.setAnniversary(null);
        }
        soapUser.setAssistantName(user.getAssistant_name());
        try {
            final GregorianCalendar c = new GregorianCalendar();
            c.setTime(user.getBirthday());
            soapUser.setBirthday(DatatypeFactory.newInstance().newXMLGregorianCalendar(c));
        } catch (final DatatypeConfigurationException e) {
            soapUser.setAnniversary(null);
        }
        soapUser.setBranches(user.getBranches());
        soapUser.setBusinessCategory(user.getBusiness_category());
        soapUser.setCategories(user.getCategories());
        soapUser.setCellularTelephone1(user.getCellular_telephone1());
        soapUser.setCellularTelephone2(user.getCellular_telephone2());
        soapUser.setCityBusiness(user.getCity_business());
        soapUser.setCityHome(user.getCity_home());
        soapUser.setCityOther(user.getCity_other());
        soapUser.setCommercialRegister(user.getCommercial_register());
        soapUser.setCompany(user.getCompany());
        soapUser.setContextadmin(Boolean.valueOf(user.isContextadmin()));
        soapUser.setCountryBusiness(user.getCountry_business());
        soapUser.setCountryHome(user.getCountry_home());
        soapUser.setCountryOther(user.getCountry_other());
        soapUser.setDefaultSenderAddress(user.getDefaultSenderAddress());
        soapUser.setDefaultGroup(group2Soap(user.getDefault_group()));
        soapUser.setDepartment(user.getDepartment());
        soapUser.setDisplayName(user.getDisplay_name());
        soapUser.setEmail1(user.getEmail1());
        soapUser.setEmail2(user.getEmail2());
        soapUser.setEmail3(user.getEmail3());
        soapUser.setEmployeeType(user.getEmployeeType());
        soapUser.setFaxBusiness(user.getFax_business());
        soapUser.setFaxHome(user.getFax_home());
        soapUser.setFaxOther(user.getFax_other());
        soapUser.setFolderTree(user.getFolderTree());
        soapUser.setGivenName(user.getGiven_name());
        soapUser.setGuiPreferencesForSoap(map2Soap(user.getGuiPreferences()));
        soapUser.setId(user.getId());
        soapUser.setImapLogin(user.getImapLogin());
        soapUser.setImapServer(user.getImapServer());
        soapUser.setInfo(user.getInfo());
        soapUser.setInstantMessenger1(user.getInstant_messenger1());
        soapUser.setInstantMessenger2(user.getInstant_messenger2());
        soapUser.setLanguage(user.getLanguage());
        soapUser.setMailFolderConfirmedHamName(user.getMail_folder_confirmed_ham_name());
        soapUser.setMailFolderConfirmedSpamName(user.getMail_folder_confirmed_spam_name());
        soapUser.setMailFolderDraftsName(user.getMail_folder_drafts_name());
        soapUser.setMailFolderSentName(user.getMail_folder_sent_name());
        soapUser.setMailFolderSpamName(user.getMail_folder_spam_name());
        soapUser.setMailFolderTrashName(user.getMail_folder_trash_name());
        soapUser.setMailenabled(user.getMailenabled());
        soapUser.setManagerName(user.getManager_name());
        soapUser.setMaritalStatus(user.getMarital_status());
        soapUser.setMiddleName(user.getMiddle_name());
        soapUser.setName(user.getName());
        soapUser.setNickname(user.getNickname());
        soapUser.setNote(user.getNote());
        soapUser.setNumberOfChildren(user.getNumber_of_children());
        soapUser.setNumberOfEmployee(user.getNumber_of_employee());
        soapUser.setPassword(user.getPassword());
        soapUser.setPasswordMech(user.getPasswordMech());
        soapUser.setPasswordExpired(user.getPassword_expired());
        soapUser.setPosition(user.getPosition());
        soapUser.setPostalCodeBusiness(user.getPostal_code_business());
        soapUser.setPostalCodeHome(user.getPostal_code_home());
        soapUser.setPostalCodeOther(user.getPostal_code_other());
        soapUser.setPrimaryEmail(user.getPrimaryEmail());
        soapUser.setProfession(user.getProfession());
        soapUser.setRoomNumber(user.getRoom_number());
        soapUser.setSalesVolume(user.getSales_volume());
        soapUser.setSmtpServer(user.getSmtpServer());
        soapUser.setSpouseName(user.getSpouse_name());
        soapUser.setStateBusiness(user.getState_business());
        soapUser.setStateHome(user.getState_home());
        soapUser.setStateOther(user.getState_other());
        soapUser.setStreetBusiness(user.getStreet_business());
        soapUser.setStreetHome(user.getStreet_home());
        soapUser.setStreetOther(user.getStreet_other());
        soapUser.setSuffix(user.getSuffix());
        soapUser.setSurName(user.getSur_name());
        soapUser.setTaxId(user.getTax_id());
        soapUser.setTelephoneAssistant(user.getTelephone_assistant());
        soapUser.setTelephoneBusiness1(user.getTelephone_business1());
        soapUser.setTelephoneBusiness2(user.getTelephone_business2());
        soapUser.setTelephoneCallback(user.getTelephone_callback());
        soapUser.setTelephoneCar(user.getTelephone_car());
        soapUser.setTelephoneCompany(user.getTelephone_company());
        soapUser.setTelephoneHome1(user.getTelephone_home1());
        soapUser.setTelephoneHome2(user.getTelephone_home2());
        soapUser.setTelephoneIp(user.getTelephone_ip());
        soapUser.setTelephoneIsdn(user.getTelephone_isdn());
        soapUser.setTelephoneOther(user.getTelephone_other());
        soapUser.setTelephonePager(user.getTelephone_pager());
        soapUser.setTelephonePrimary(user.getTelephone_primary());
        soapUser.setTelephoneRadio(user.getTelephone_radio());
        soapUser.setTelephoneTelex(user.getTelephone_telex());
        soapUser.setTelephoneTtytdd(user.getTelephone_ttytdd());
        soapUser.setTimezone(user.getTimezone());
        soapUser.setTitle(user.getTitle());
        soapUser.setUploadFileSizeLimit(user.getUploadFileSizeLimit());
        soapUser.setUploadFileSizeLimitPerFile(user.getUploadFileSizeLimitPerFile());
        soapUser.setUrl(user.getUrl());
        soapUser.setUserAttributes(mapmap2Soap(user.getUserAttributes()));
        soapUser.setUserfield01(user.getUserfield01());
        soapUser.setUserfield02(user.getUserfield02());
        soapUser.setUserfield03(user.getUserfield03());
        soapUser.setUserfield04(user.getUserfield04());
        soapUser.setUserfield05(user.getUserfield05());
        soapUser.setUserfield06(user.getUserfield06());
        soapUser.setUserfield07(user.getUserfield07());
        soapUser.setUserfield08(user.getUserfield08());
        soapUser.setUserfield09(user.getUserfield09());
        soapUser.setUserfield10(user.getUserfield10());
        soapUser.setUserfield11(user.getUserfield11());
        soapUser.setUserfield12(user.getUserfield12());
        soapUser.setUserfield13(user.getUserfield13());
        soapUser.setUserfield14(user.getUserfield14());
        soapUser.setUserfield15(user.getUserfield15());
        soapUser.setUserfield16(user.getUserfield16());
        soapUser.setUserfield17(user.getUserfield17());
        soapUser.setUserfield18(user.getUserfield18());
        soapUser.setUserfield19(user.getUserfield19());
        soapUser.setUserfield20(user.getUserfield20());
        return soapUser;
    }

    private static com.openexchange.admin.rmi.dataobjects.Group soap2Group(final Group soapGroup) {
        if (null == soapGroup) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Group group = new com.openexchange.admin.rmi.dataobjects.Group();
        group.setDisplayname(soapGroup.getDisplayname());
        group.setId(soapGroup.getId());
        group.setMembers(soapGroup.getMembers().toArray(new Integer[0]));
        group.setName(soapGroup.getName());
        return group;
    }

    private static Group group2Soap(final com.openexchange.admin.rmi.dataobjects.Group group) {
        if (null == group) {
            return null;
        }
        final Group soapGroup = new Group();
        soapGroup.setDisplayname(group.getDisplayname());
        soapGroup.setId(group.getId());
        soapGroup.setMembers(Arrays.asList(group.getMembers()));
        soapGroup.setName(group.getName());
        return soapGroup;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();
        ret.setAverage_size(soapContext.getAverageSize());
        ret.setEnabled(soapContext.isEnabled());
        ret.setFilestore_name(soapContext.getFilestoreName());
        ret.setFilestoreId(soapContext.getFilestoreId());
        ret.setId(soapContext.getId());
        ret.setLoginMappings(new HashSet<String>(soapContext.getLoginMappings()));
        ret.setMaxQuota(soapContext.getMaxQuota());
        ret.setName(soapContext.getName());
        ret.setUsedQuota(soapContext.getUsedQuota());
        ret.setReadDatabase(soap2Database(soapContext.getReadDatabase()));
        ret.setWriteDatabase(soap2Database(soapContext.getWriteDatabase()));
        ret.setUserAttributes(soap2MapMap(soapContext.getUserAttributes()));
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();
        ret.setClusterWeight(soapDatabase.getClusterWeight());
        ret.setCurrentUnits(soapDatabase.getCurrentUnits());
        ret.setDriver(soapDatabase.getDriver());
        ret.setId(soapDatabase.getId());
        ret.setLogin(soapDatabase.getLogin());
        ret.setMaster(soapDatabase.isMaster());
        ret.setMasterId(soapDatabase.getMasterId());
        ret.setMaxUnits(soapDatabase.getMaxUnits());
        ret.setName(soapDatabase.getName());
        ret.setPassword(soapDatabase.getPassword());
        ret.setPoolHardLimit(soapDatabase.getPoolHardLimit());
        ret.setPoolInitial(soapDatabase.getPoolInitial());
        ret.setPoolMax(soapDatabase.getPoolMax());
        ret.setRead_id(soapDatabase.getReadId());
        ret.setScheme(soapDatabase.getScheme());
        ret.setUrl(soapDatabase.getUrl());
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.UserModuleAccess soap2ModuleAccess(final UserModuleAccess soapModuleAccess) {
        if (null == soapModuleAccess) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess = new com.openexchange.admin.rmi.dataobjects.UserModuleAccess();
        moduleAccess.setActiveSync(soapModuleAccess.isActiveSync().booleanValue());
        moduleAccess.setCalendar(soapModuleAccess.isCalendar().booleanValue());
        moduleAccess.setCollectEmailAddresses(soapModuleAccess.isCollectEmailAddresses().booleanValue());
        moduleAccess.setContacts(soapModuleAccess.isContacts().booleanValue());
        moduleAccess.setDelegateTask(soapModuleAccess.isDelegateTask().booleanValue());
        moduleAccess.setDeniedPortal(soapModuleAccess.isDeniedPortal().booleanValue());
        moduleAccess.setEditGroup(soapModuleAccess.isEditGroup().booleanValue());
        moduleAccess.setEditPassword(soapModuleAccess.isEditPassword().booleanValue());
        moduleAccess.setEditPublicFolders(soapModuleAccess.isEditPublicFolders().booleanValue());
        moduleAccess.setEditResource(soapModuleAccess.isEditResource().booleanValue());
        moduleAccess.setForum(soapModuleAccess.isForum().booleanValue());
        moduleAccess.setGlobalAddressBookDisabled(soapModuleAccess.isGlobalAddressBookDisabled().booleanValue());
        moduleAccess.setIcal(soapModuleAccess.isIcal().booleanValue());
        moduleAccess.setInfostore(soapModuleAccess.isInfostore().booleanValue());
        moduleAccess.setMultipleMailAccounts(soapModuleAccess.isMultipleMailAccounts().booleanValue());
        moduleAccess.setOLOX20(soapModuleAccess.isOLOX20().booleanValue());
        moduleAccess.setPinboardWrite(soapModuleAccess.isPinboardWrite().booleanValue());
        moduleAccess.setProjects(soapModuleAccess.isProjects().booleanValue());
        moduleAccess.setPublication(soapModuleAccess.isPublication().booleanValue());
        moduleAccess.setPublicFolderEditable(soapModuleAccess.isPublicFolderEditable().booleanValue());
        moduleAccess.setReadCreateSharedFolders(soapModuleAccess.isReadCreateSharedFolders().booleanValue());
        moduleAccess.setRssBookmarks(soapModuleAccess.isRssBookmarks().booleanValue());
        moduleAccess.setRssPortal(soapModuleAccess.isRssPortal().booleanValue());
        moduleAccess.setSubscription(soapModuleAccess.isSubscription().booleanValue());
        moduleAccess.setSyncml(soapModuleAccess.isSyncml().booleanValue());
        moduleAccess.setTasks(soapModuleAccess.isTasks().booleanValue());
        moduleAccess.setUSM(soapModuleAccess.isUSM().booleanValue());
        moduleAccess.setVcard(soapModuleAccess.isVcard().booleanValue());
        moduleAccess.setWebdav(soapModuleAccess.isWebdav().booleanValue());
        moduleAccess.setWebdavXml(soapModuleAccess.isWebdavXml().booleanValue());
        moduleAccess.setWebmail(soapModuleAccess.isWebmail().booleanValue());
        return moduleAccess;
    }

    private static UserModuleAccess moduleAccess2Soap(final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess) {
        if (null == moduleAccess) {
            return null;
        }
        final UserModuleAccess soapModuleAccess = new UserModuleAccess();
        soapModuleAccess.setActiveSync(Boolean.valueOf(moduleAccess.isActiveSync()));
        soapModuleAccess.setCalendar(Boolean.valueOf(moduleAccess.getCalendar()));
        soapModuleAccess.setCollectEmailAddresses(Boolean.valueOf(moduleAccess.isCollectEmailAddresses()));
        soapModuleAccess.setContacts(Boolean.valueOf(moduleAccess.getContacts()));
        soapModuleAccess.setDelegateTask(Boolean.valueOf(moduleAccess.getDelegateTask()));
        soapModuleAccess.setDeniedPortal(Boolean.valueOf(moduleAccess.isDeniedPortal()));
        soapModuleAccess.setEditGroup(Boolean.valueOf(moduleAccess.getEditGroup()));
        soapModuleAccess.setEditPassword(Boolean.valueOf(moduleAccess.getEditPassword()));
        soapModuleAccess.setEditPublicFolders(Boolean.valueOf(moduleAccess.getEditPublicFolders()));
        soapModuleAccess.setEditResource(Boolean.valueOf(moduleAccess.getEditResource()));
        soapModuleAccess.setForum(Boolean.valueOf(moduleAccess.getForum()));
        soapModuleAccess.setGlobalAddressBookDisabled(Boolean.valueOf(moduleAccess.isGlobalAddressBookDisabled()));
        soapModuleAccess.setIcal(Boolean.valueOf(moduleAccess.getIcal()));
        soapModuleAccess.setInfostore(Boolean.valueOf(moduleAccess.getInfostore()));
        soapModuleAccess.setMultipleMailAccounts(Boolean.valueOf(moduleAccess.isMultipleMailAccounts()));
        soapModuleAccess.setOLOX20(Boolean.valueOf(moduleAccess.isOLOX20()));
        soapModuleAccess.setPinboardWrite(Boolean.valueOf(moduleAccess.getPinboardWrite()));
        soapModuleAccess.setProjects(Boolean.valueOf(moduleAccess.getProjects()));
        soapModuleAccess.setPublication(Boolean.valueOf(moduleAccess.isPublication()));
        soapModuleAccess.setPublicFolderEditable(Boolean.valueOf(moduleAccess.isPublicFolderEditable()));
        soapModuleAccess.setReadCreateSharedFolders(Boolean.valueOf(moduleAccess.getReadCreateSharedFolders()));
        soapModuleAccess.setRssBookmarks(Boolean.valueOf(moduleAccess.getRssBookmarks()));
        soapModuleAccess.setRssPortal(Boolean.valueOf(moduleAccess.getRssPortal()));
        soapModuleAccess.setSubscription(Boolean.valueOf(moduleAccess.isSubscription()));
        soapModuleAccess.setSyncml(Boolean.valueOf(moduleAccess.getSyncml()));
        soapModuleAccess.setTasks(Boolean.valueOf(moduleAccess.getTasks()));
        soapModuleAccess.setUSM(Boolean.valueOf(moduleAccess.isUSM()));
        soapModuleAccess.setVcard(Boolean.valueOf(moduleAccess.getVcard()));
        soapModuleAccess.setWebdav(Boolean.valueOf(moduleAccess.getWebdav()));
        soapModuleAccess.setWebdavXml(Boolean.valueOf(moduleAccess.getWebdavXml()));
        soapModuleAccess.setWebmail(Boolean.valueOf(moduleAccess.getWebmail()));
        return soapModuleAccess;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<String, Map<String,String>>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<String, String>(entries.size());
        for (final Entry entry : entries) {
            map.put(entry.getKey(), entry.getValue());
        }
        return map;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<SOAPMapEntry>(mapmap.size());
        for (final Map.Entry<String,Map<String,String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<Entry>(map.size());
        for (final Map.Entry<String,String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }

}
