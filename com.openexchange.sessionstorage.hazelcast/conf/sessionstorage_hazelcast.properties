com.openexchange.sessionstorage.hazelcast.enabled = true

# Key to encrypt passwords during transmission during session migration. Change this, and make sure it's the same in the entire cluster
com.openexchange.sessionstorage.hazelcast.encryptionKey=yb#QdT~M~<i]V-VT{"h(J8o=5}1Hwtx(c6fy'*!`kR[Xa=4"=yyBB{h>sw

# session-map configuration
com.openexchange.sessionstorage.hazelcast.map.name = sessions

# Number of backups. If 1 is set as the backup-count for example, then all entries of the map will be copied
# to another JVM for fail-safety. 0 means no backup.
com.openexchange.sessionstorage.hazelcast.map.backupcount = 1 

# Number of async backups. 0 means no backup.
com.openexchange.sessionstorage.hazelcast.map.asyncbackup = 0

# Maximum number of seconds for each entry to stay in the map. Entries that are older than <time-to-live-seconds>
# and not updated for <time-to-live-seconds> will get automatically evicted from the map. Any integer between 0
# and Integer.MAX_VALUE. 0 means infinite. Default is 0.
com.openexchange.sessionstorage.hazelcast.map.ttl = 0

# Maximum number of seconds for each entry to stay idle in the map. Entries that are idle(not touched) for mor
# than <max-idle-seconds> will get automatically evicted from the map. Entry is touched if get, put or containsKey 
# is called. Any integer between 0 and Integer.MAX_VALUE. 0 means infinite.	Default is 0.
com.openexchange.sessionstorage.hazelcast.map.maxidle = 0

# Valid values are:
# NONE (no eviction),
# LRU (Least Recently Used),
# LFU (Least Frequently Used).
# NONE is the default.
com.openexchange.sessionstorage.hazelcast.map.evictionpolicy = NONE

# When max. size is reached, specified percentage of the map will be evicted. Any integer between 0 and 100. If
# 25 is set for example, 25% of	the entries will get evicted.
com.openexchange.sessionstorage.hazelcast.map.evictionpercentage = 25 

# Maximum size of the map. When max size is reached, map is evicted	based on the policy defined. Any integer between
# 0 and Integer.MAX_VALUE. 0 means Integer.MAX_VALUE. Default is 0.
com.openexchange.sessionstorage.hazelcast.map.maxsize = 0

# While recovering from split-brain (network partitioning), map entries	in the small cluster will merge into the
# bigger cluster based on the policy set here. When an entry merge into the cluster, there might an existing entry 
# with the same key already. Values of these entries might be different for	that same key. Which value should be
# set for the key? Conflict is resolved	by the policy set here. Default policy is hz.ADD_NEW_ENTRY. There are built-in 
# merge policies such as
# hz.NO_MERGE ; no entry will merge.
# hz.ADD_NEW_ENTRY ; entry will be added if the merging entry's key doesn't exist in the cluster. 
# hz.HIGHER_HITS ; entry with the higher hits wins.
# hz.LATEST_UPDATE ; entry with the latest update wins.
com.openexchange.sessionstorage.hazelcast.map.mergepolicy = hz.NO_MERGE