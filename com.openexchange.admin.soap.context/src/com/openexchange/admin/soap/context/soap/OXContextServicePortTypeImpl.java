
/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package com.openexchange.admin.soap.context.soap;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.concurrent.atomic.AtomicReference;
import com.openexchange.admin.rmi.OXContextInterface;
import com.openexchange.admin.rmi.exceptions.ContextExistsException;
import com.openexchange.admin.rmi.exceptions.DatabaseUpdateException;
import com.openexchange.admin.rmi.exceptions.InvalidCredentialsException;
import com.openexchange.admin.rmi.exceptions.InvalidDataException;
import com.openexchange.admin.rmi.exceptions.NoSuchContextException;
import com.openexchange.admin.rmi.exceptions.NoSuchDatabaseException;
import com.openexchange.admin.rmi.exceptions.NoSuchFilestoreException;
import com.openexchange.admin.rmi.exceptions.NoSuchReasonException;
import com.openexchange.admin.rmi.exceptions.OXContextException;
import com.openexchange.admin.rmi.exceptions.StorageException;
import com.openexchange.admin.soap.context.dataobjects.Context;
import com.openexchange.admin.soap.context.dataobjects.Credentials;
import com.openexchange.admin.soap.context.dataobjects.Database;
import com.openexchange.admin.soap.context.dataobjects.Entry;
import com.openexchange.admin.soap.context.dataobjects.Filestore;
import com.openexchange.admin.soap.context.dataobjects.Group;
import com.openexchange.admin.soap.context.dataobjects.SOAPMapEntry;
import com.openexchange.admin.soap.context.dataobjects.SOAPStringMap;
import com.openexchange.admin.soap.context.dataobjects.SOAPStringMapMap;
import com.openexchange.admin.soap.context.dataobjects.User;
import com.openexchange.admin.soap.context.dataobjects.UserModuleAccess;

/**
 * This class was generated by Apache CXF 2.6.0
 * 2012-06-01T18:39:08.004+02:00
 * Generated source version: 2.6.0
 * 
 */

@javax.jws.WebService(
                      serviceName = "OXContextService",
                      portName = "OXContextServiceHttpsEndpoint",
                      targetNamespace = "http://soap.admin.openexchange.com",
                      // wsdlLocation = "null",
                      endpointInterface = "com.openexchange.admin.soap.context.soap.OXContextServicePortType")
                      
public class OXContextServicePortTypeImpl implements OXContextServicePortType {

    public static final AtomicReference<OXContextInterface> RMI_REFERENCE = new AtomicReference<OXContextInterface>();

    private static OXContextInterface getContextInterface() throws RemoteException_Exception {
        final OXContextInterface contextInterface = RMI_REFERENCE.get();
        if (null == contextInterface) {
            throw new RemoteException_Exception("Missing "+OXContextInterface.class.getName() + " instance.");
        }
        return contextInterface;
    }

    @Override
    public void change(final Change parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.change(soap2Context(parameters.getCtx()), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public UserModuleAccess getModuleAccess(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return moduleAccess2Soap(contextInterface.getModuleAccess(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void enable(final Enable parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.enable(soap2Context(parameters.getCtx()), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void disableAll(final DisableAll parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , NoSuchReasonException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.disableAll(soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final NoSuchReasonException e) {
            throw new NoSuchReasonException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeModuleAccessByName(final ChangeModuleAccessByName parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.changeModuleAccess(soap2Context(parameters.getCtx()), parameters.getAccessCombinationName(), soap2Credentials(parameters.getAuth()));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<Context> listAll(final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listAll(soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.Integer moveContextDatabase(final Context ctx,final Database dstDatabaseId,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , OXContextException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.moveContextDatabase(soap2Context(ctx), soap2Database(dstDatabaseId), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        } catch (final OXContextException e) {
            throw new OXContextException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public Context createModuleAccess(final Context ctx,final User adminUser,final UserModuleAccess access,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , ContextExistsException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), soap2ModuleAccess(access), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final ContextExistsException e) {
            throw new ContextExistsException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void changeModuleAccess(final ChangeModuleAccess parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.changeModuleAccess(soap2Context(parameters.ctx), soap2ModuleAccess(parameters.access), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public Context createModuleAccessByName(final Context ctx,final User adminUser,final java.lang.String accessCombinationName,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , ContextExistsException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), accessCombinationName, soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final ContextExistsException e) {
            throw new ContextExistsException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void enableAll(final EnableAll parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.enableAll(soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<Context> listByFilestore(final Filestore fs,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception , NoSuchFilestoreException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listByFilestore(soap2Filestore(fs), soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final NoSuchFilestoreException e) {
            throw new NoSuchFilestoreException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.Integer getAdminId(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.getAdminId(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void delete(final Delete parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.delete(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void disable(final Disable parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , NoSuchReasonException_Exception , InvalidDataException_Exception , OXContextException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.disable(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final NoSuchReasonException e) {
            throw new NoSuchReasonException_Exception(e.getMessage(), e);
        } catch (final OXContextException e) {
            throw new OXContextException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.String getAccessCombinationName(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return contextInterface.getAccessCombinationName(soap2Context(ctx), soap2Credentials(auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public void downgrade(final Downgrade parameters) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception , DatabaseUpdateException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            contextInterface.downgrade(soap2Context(parameters.ctx), soap2Credentials(parameters.auth));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final DatabaseUpdateException e) {
            throw new DatabaseUpdateException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public Context create(final Context ctx,final User adminUser,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , ContextExistsException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.create(soap2Context(ctx), soap2User(adminUser), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final ContextExistsException e) {
            throw new ContextExistsException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.Integer moveContextFilestore(final Context ctx,final Filestore dstFilestoreId,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , NoSuchReasonException_Exception , InvalidDataException_Exception , OXContextException_Exception , NoSuchContextException_Exception , RemoteException_Exception , NoSuchFilestoreException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Integer.valueOf(contextInterface.moveContextFilestore(soap2Context(ctx), soap2Filestore(dstFilestoreId), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final NoSuchFilestoreException e) {
            throw new NoSuchReasonException_Exception(e.getMessage(), e);
        } catch (final NoSuchReasonException e) {
            throw new NoSuchReasonException_Exception(e.getMessage(), e);
        } catch (final OXContextException e) {
            throw new OXContextException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<Context> list(final java.lang.String searchPattern,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.list(searchPattern, soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.lang.Boolean exists(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return Boolean.valueOf(contextInterface.exists(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public java.util.List<Context> listByDatabase(final Database db,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , RemoteException_Exception , NoSuchDatabaseException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            final com.openexchange.admin.rmi.dataobjects.Context[] contexts = contextInterface.listByDatabase(soap2Database(db), soap2Credentials(auth));
            if (null == contexts) {
                return Collections.emptyList();
            }
            final java.util.List<Context> list = new ArrayList<Context>(contexts.length);
            for (final com.openexchange.admin.rmi.dataobjects.Context context : contexts) {
                list.add(context2Soap(context));
            }
            return list;
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        } catch (final NoSuchDatabaseException e) {
            throw new NoSuchDatabaseException_Exception(e.getMessage(), e);
        }
    }

    @Override
    public Context getData(final Context ctx,final Credentials auth) throws StorageException_Exception , InvalidCredentialsException_Exception , InvalidDataException_Exception , NoSuchContextException_Exception , RemoteException_Exception    { 
        final OXContextInterface contextInterface = getContextInterface();
        try {
            return context2Soap(contextInterface.getData(soap2Context(ctx), soap2Credentials(auth)));
        } catch (final RemoteException e) {
            throw new RemoteException_Exception(e.getMessage(), e);
        } catch (final InvalidCredentialsException e) {
            throw new InvalidCredentialsException_Exception(e.getMessage(), e);
        } catch (final NoSuchContextException e) {
            throw new NoSuchContextException_Exception(e.getMessage(), e);
        } catch (final StorageException e) {
            throw new StorageException_Exception(e.getMessage(), e);
        } catch (final InvalidDataException e) {
            throw new InvalidDataException_Exception(e.getMessage(), e);
        }
    }

    private static com.openexchange.admin.rmi.dataobjects.Credentials soap2Credentials(final Credentials soapCredentials) {
        if (null == soapCredentials) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Credentials credentials = new com.openexchange.admin.rmi.dataobjects.Credentials();
        credentials.setLogin(soapCredentials.getLogin());
        credentials.setPassword(soapCredentials.getPassword());
        return credentials;
    }

    private static com.openexchange.admin.rmi.dataobjects.Filestore soap2Filestore(final Filestore soapFilestore) {
        if (null == soapFilestore) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Filestore filestore = new com.openexchange.admin.rmi.dataobjects.Filestore();
        filestore.setCurrentContexts(soapFilestore.getCurrentContexts());
        filestore.setId(soapFilestore.getId());
        filestore.setMaxContexts(soapFilestore.getMaxContexts());
        filestore.setReserved(soapFilestore.getReserved());
        filestore.setSize(soapFilestore.getSize());
        filestore.setUrl(soapFilestore.getUrl());
        filestore.setUsed(soapFilestore.getUsed());
        return filestore;
    }

    private static com.openexchange.admin.rmi.dataobjects.User soap2User(final User soapUser) {
        if (null == soapUser) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.User user = new com.openexchange.admin.rmi.dataobjects.User();
        user.setGui_spam_filter_enabled(soapUser.isGuiSpamFilterEnabled());
        user.setAliasesForSOAP(soapUser.getAliases());
        user.setAnniversary(soapUser.getAnniversary().toGregorianCalendar().getTime());
        user.setAssistant_name(soapUser.getAssistantName());
        user.setBirthday(soapUser.getBirthday().toGregorianCalendar().getTime());
        user.setBranches(soapUser.getBranches());
        user.setBusiness_category(soapUser.getBusinessCategory());
        user.setCategories(soapUser.getCategories());
        user.setCellular_telephone1(soapUser.getCellularTelephone1());
        user.setCellular_telephone2(soapUser.getCellularTelephone2());
        user.setCity_business(soapUser.getCityBusiness());
        user.setCity_home(soapUser.getCityHome());
        user.setCity_other(soapUser.getCityOther());
        user.setCommercial_register(soapUser.getCommercialRegister());
        user.setCompany(soapUser.getCompany());
        user.setContextadmin(null == soapUser.isContextadmin() ? false : soapUser.isContextadmin().booleanValue());
        user.setCountry_business(soapUser.getCountryBusiness());
        user.setCountry_home(soapUser.getCountryHome());
        user.setCountry_other(soapUser.getCountryOther());
        user.setDefaultSenderAddress(soapUser.getDefaultSenderAddress());
        user.setDefault_group(soap2Group(soapUser.getDefaultGroup()));
        user.setDepartment(soapUser.getDepartment());
        user.setDisplay_name(soapUser.getDisplayName());
        user.setEmail1(soapUser.getEmail1());
        user.setEmail2(soapUser.getEmail2());
        user.setEmail3(soapUser.getEmail3());
        user.setEmployeeType(soapUser.getEmployeeType());
        user.setFax_business(soapUser.getFaxBusiness());
        user.setFax_home(soapUser.getFaxHome());
        user.setFax_other(soapUser.getFaxOther());
        user.setFolderTree(soapUser.getFolderTree());
        user.setGiven_name(soapUser.getGivenName());
        user.setGuiPreferences(soap2Map(soapUser.getGuiPreferencesForSoap()));
        user.setId(soapUser.getId());
        user.setImapLogin(soapUser.getImapLogin());
        user.setImapServer(soapUser.getImapServer());
        user.setInfo(soapUser.getInfo());
        user.setInstant_messenger1(soapUser.getInstantMessenger1());
        user.setInstant_messenger2(soapUser.getInstantMessenger2());
        user.setLanguage(soapUser.getLanguage());
        user.setMail_folder_confirmed_ham_name(soapUser.getMailFolderConfirmedHamName());
        user.setMail_folder_confirmed_spam_name(soapUser.getMailFolderConfirmedSpamName());
        user.setMail_folder_drafts_name(soapUser.getMailFolderDraftsName());
        user.setMail_folder_sent_name(soapUser.getMailFolderSentName());
        user.setMail_folder_spam_name(soapUser.getMailFolderSpamName());
        user.setMail_folder_trash_name(soapUser.getMailFolderTrashName());
        user.setMailenabled(soapUser.isMailenabled());
        user.setManager_name(soapUser.getManagerName());
        user.setMarital_status(soapUser.getMaritalStatus());
        user.setMiddle_name(soapUser.getMiddleName());
        user.setName(soapUser.getName());
        user.setNickname(soapUser.getNickname());
        user.setNote(soapUser.getNote());
        user.setNumber_of_children(soapUser.getNumberOfChildren());
        user.setNumber_of_employee(soapUser.getNumberOfEmployee());
        user.setPassword(soapUser.getPassword());
        user.setPasswordMech(soapUser.getPasswordMech());
        user.setPassword_expired(soapUser.isPasswordExpired());
        user.setPosition(soapUser.getPosition());
        user.setPostal_code_business(soapUser.getPostalCodeBusiness());
        user.setPostal_code_home(soapUser.getPostalCodeHome());
        user.setPostal_code_other(soapUser.getPostalCodeOther());
        user.setPrimaryEmail(soapUser.getPrimaryEmail());
        user.setProfession(soapUser.getProfession());
        user.setRoom_number(soapUser.getRoomNumber());
        user.setSales_volume(soapUser.getSalesVolume());
        user.setSmtpServer(soapUser.getSmtpServer());
        user.setSpouse_name(soapUser.getSpouseName());
        user.setState_business(soapUser.getStateBusiness());
        user.setState_home(soapUser.getStateHome());
        user.setState_other(soapUser.getStateOther());
        user.setStreet_business(soapUser.getStreetBusiness());
        user.setStreet_home(soapUser.getStreetHome());
        user.setStreet_other(soapUser.getStreetOther());
        user.setSuffix(soapUser.getSuffix());
        user.setSur_name(soapUser.getSurName());
        user.setTax_id(soapUser.getTaxId());
        user.setTelephone_assistant(soapUser.getTelephoneAssistant());
        user.setTelephone_business1(soapUser.getTelephoneBusiness1());
        user.setTelephone_business2(soapUser.getTelephoneBusiness2());
        user.setTelephone_callback(soapUser.getTelephoneCallback());
        user.setTelephone_car(soapUser.getTelephoneCar());
        user.setTelephone_company(soapUser.getTelephoneCompany());
        user.setTelephone_home1(soapUser.getTelephoneHome1());
        user.setTelephone_home2(soapUser.getTelephoneHome2());
        user.setTelephone_ip(soapUser.getTelephoneIp());
        user.setTelephone_isdn(soapUser.getTelephoneIsdn());
        user.setTelephone_other(soapUser.getTelephoneOther());
        user.setTelephone_pager(soapUser.getTelephonePager());
        user.setTelephone_primary(soapUser.getTelephonePrimary());
        user.setTelephone_radio(soapUser.getTelephoneRadio());
        user.setTelephone_telex(soapUser.getTelephoneTelex());
        user.setTelephone_ttytdd(soapUser.getTelephoneTtytdd());
        user.setTimezone(soapUser.getTimezone());
        user.setTitle(soapUser.getTitle());
        user.setUploadFileSizeLimit(soapUser.getUploadFileSizeLimit());
        user.setUploadFileSizeLimitPerFile(soapUser.getUploadFileSizeLimitPerFile());
        user.setUrl(soapUser.getUrl());
        user.setUserAttributes(soap2MapMap(soapUser.getUserAttributes()));
        user.setUserfield01(soapUser.getUserfield01());
        user.setUserfield02(soapUser.getUserfield02());
        user.setUserfield03(soapUser.getUserfield03());
        user.setUserfield04(soapUser.getUserfield04());
        user.setUserfield05(soapUser.getUserfield05());
        user.setUserfield06(soapUser.getUserfield06());
        user.setUserfield07(soapUser.getUserfield07());
        user.setUserfield08(soapUser.getUserfield08());
        user.setUserfield09(soapUser.getUserfield09());
        user.setUserfield10(soapUser.getUserfield10());
        user.setUserfield11(soapUser.getUserfield11());
        user.setUserfield12(soapUser.getUserfield12());
        user.setUserfield13(soapUser.getUserfield13());
        user.setUserfield14(soapUser.getUserfield14());
        user.setUserfield15(soapUser.getUserfield15());
        user.setUserfield16(soapUser.getUserfield16());
        user.setUserfield17(soapUser.getUserfield17());
        user.setUserfield18(soapUser.getUserfield18());
        user.setUserfield19(soapUser.getUserfield19());
        user.setUserfield20(soapUser.getUserfield20());
        return user;
    }

    private static com.openexchange.admin.rmi.dataobjects.Group soap2Group(final Group soapGroup) {
        if (null == soapGroup) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Group group = new com.openexchange.admin.rmi.dataobjects.Group();
        group.setDisplayname(soapGroup.getDisplayname());
        group.setId(soapGroup.getId());
        group.setMembers(soapGroup.getMembers().toArray(new Integer[0]));
        group.setName(soapGroup.getName());
        return group;
    }

    private static com.openexchange.admin.rmi.dataobjects.Context soap2Context(final Context soapContext) {
        if (null == soapContext) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Context ret = new com.openexchange.admin.rmi.dataobjects.Context();
        ret.setAverage_size(soapContext.getAverageSize());
        ret.setEnabled(soapContext.isEnabled());
        ret.setFilestore_name(soapContext.getFilestoreName());
        ret.setFilestoreId(soapContext.getFilestoreId());
        ret.setId(soapContext.getId());
        ret.setLoginMappings(new HashSet<String>(soapContext.getLoginMappings()));
        ret.setMaxQuota(soapContext.getMaxQuota());
        ret.setName(soapContext.getName());
        ret.setUsedQuota(soapContext.getUsedQuota());
        ret.setReadDatabase(soap2Database(soapContext.getReadDatabase()));
        ret.setWriteDatabase(soap2Database(soapContext.getWriteDatabase()));
        ret.setUserAttributes(soap2MapMap(soapContext.getUserAttributes()));
        return ret;
    }

    private static com.openexchange.admin.rmi.dataobjects.Database soap2Database(final Database soapDatabase) {
        if (null == soapDatabase) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.Database ret = new com.openexchange.admin.rmi.dataobjects.Database();
        ret.setClusterWeight(soapDatabase.getClusterWeight());
        ret.setCurrentUnits(soapDatabase.getCurrentUnits());
        ret.setDriver(soapDatabase.getDriver());
        ret.setId(soapDatabase.getId());
        ret.setLogin(soapDatabase.getLogin());
        ret.setMaster(soapDatabase.isMaster());
        ret.setMasterId(soapDatabase.getMasterId());
        ret.setMaxUnits(soapDatabase.getMaxUnits());
        ret.setName(soapDatabase.getName());
        ret.setPassword(soapDatabase.getPassword());
        ret.setPoolHardLimit(soapDatabase.getPoolHardLimit());
        ret.setPoolInitial(soapDatabase.getPoolInitial());
        ret.setPoolMax(soapDatabase.getPoolMax());
        ret.setRead_id(soapDatabase.getReadId());
        ret.setScheme(soapDatabase.getScheme());
        ret.setUrl(soapDatabase.getUrl());
        return ret;
    }

    private static Map<String, Map<String, String>> soap2MapMap(final SOAPStringMapMap soapStringMapMap) {
        if (null == soapStringMapMap) {
            return null;
        }
        final java.util.List<SOAPMapEntry> entries = soapStringMapMap.getEntries();
        final Map<String, Map<String, String>> map = new HashMap<String, Map<String,String>>(entries.size());
        for (final SOAPMapEntry soapMapEntry : entries) {
            map.put(soapMapEntry.getKey(), soap2Map(soapMapEntry.getValue()));
        }
        return map;
    }

    private static Map<String, String> soap2Map(final SOAPStringMap soapStringMap) {
        if (null == soapStringMap) {
            return null;
        }
        final java.util.List<Entry> entries = soapStringMap.getEntries();
        final Map<String, String> map = new HashMap<String, String>(entries.size());
        for (final Entry entry : entries) {
            map.put(entry.getKey(), entry.getValue());
        }
        return map;
    }

    private static com.openexchange.admin.rmi.dataobjects.UserModuleAccess soap2ModuleAccess(final UserModuleAccess soapModuleAccess) {
        if (null == soapModuleAccess) {
            return null;
        }
        final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess = new com.openexchange.admin.rmi.dataobjects.UserModuleAccess();
        moduleAccess.setActiveSync(booleanValue(soapModuleAccess.isActiveSync()));
        moduleAccess.setCalendar(booleanValue(soapModuleAccess.isCalendar()));
        moduleAccess.setCollectEmailAddresses(booleanValue(soapModuleAccess.isCollectEmailAddresses()));
        moduleAccess.setContacts(booleanValue(soapModuleAccess.isContacts()));
        moduleAccess.setDelegateTask(booleanValue(soapModuleAccess.isDelegateTask()));
        moduleAccess.setDeniedPortal(booleanValue(soapModuleAccess.isDeniedPortal()));
        moduleAccess.setEditGroup(booleanValue(soapModuleAccess.isEditGroup()));
        moduleAccess.setEditPassword(booleanValue(soapModuleAccess.isEditPassword()));
        moduleAccess.setEditPublicFolders(booleanValue(soapModuleAccess.isEditPublicFolders()));
        moduleAccess.setEditResource(booleanValue(soapModuleAccess.isEditResource()));
        moduleAccess.setForum(booleanValue(soapModuleAccess.isForum()));
        moduleAccess.setGlobalAddressBookDisabled(booleanValue(soapModuleAccess.isGlobalAddressBookDisabled()));
        moduleAccess.setIcal(booleanValue(soapModuleAccess.isIcal()));
        moduleAccess.setInfostore(booleanValue(soapModuleAccess.isInfostore()));
        moduleAccess.setMultipleMailAccounts(booleanValue(soapModuleAccess.isMultipleMailAccounts()));
        moduleAccess.setOLOX20(booleanValue(soapModuleAccess.isOLOX20()));
        moduleAccess.setPinboardWrite(booleanValue(soapModuleAccess.isPinboardWrite()));
        moduleAccess.setProjects(booleanValue(soapModuleAccess.isProjects()));
        moduleAccess.setPublication(booleanValue(soapModuleAccess.isPublication()));
        moduleAccess.setPublicFolderEditable(booleanValue(soapModuleAccess.isPublicFolderEditable()));
        moduleAccess.setReadCreateSharedFolders(booleanValue(soapModuleAccess.isReadCreateSharedFolders()));
        moduleAccess.setRssBookmarks(booleanValue(soapModuleAccess.isRssBookmarks()));
        moduleAccess.setRssPortal(booleanValue(soapModuleAccess.isRssPortal()));
        moduleAccess.setSubscription(booleanValue(soapModuleAccess.isSubscription()));
        moduleAccess.setSyncml(booleanValue(soapModuleAccess.isSyncml()));
        moduleAccess.setTasks(booleanValue(soapModuleAccess.isTasks()));
        moduleAccess.setUSM(booleanValue(soapModuleAccess.isUSM()));
        moduleAccess.setVcard(booleanValue(soapModuleAccess.isVcard()));
        moduleAccess.setWebdav(booleanValue(soapModuleAccess.isWebdav()));
        moduleAccess.setWebdavXml(booleanValue(soapModuleAccess.isWebdavXml()));
        moduleAccess.setWebmail(booleanValue(soapModuleAccess.isWebmail()));
        return moduleAccess;
    }

    private static boolean booleanValue(final Boolean b) {
        return null == b ? false : b.booleanValue();
    }

    private static UserModuleAccess moduleAccess2Soap(final com.openexchange.admin.rmi.dataobjects.UserModuleAccess moduleAccess) {
        if (null == moduleAccess) {
            return null;
        }
        final UserModuleAccess soapModuleAccess = new UserModuleAccess();
        soapModuleAccess.setActiveSync(Boolean.valueOf(moduleAccess.isActiveSync()));
        soapModuleAccess.setCalendar(Boolean.valueOf(moduleAccess.getCalendar()));
        soapModuleAccess.setCollectEmailAddresses(Boolean.valueOf(moduleAccess.isCollectEmailAddresses()));
        soapModuleAccess.setContacts(Boolean.valueOf(moduleAccess.getContacts()));
        soapModuleAccess.setDelegateTask(Boolean.valueOf(moduleAccess.getDelegateTask()));
        soapModuleAccess.setDeniedPortal(Boolean.valueOf(moduleAccess.isDeniedPortal()));
        soapModuleAccess.setEditGroup(Boolean.valueOf(moduleAccess.getEditGroup()));
        soapModuleAccess.setEditPassword(Boolean.valueOf(moduleAccess.getEditPassword()));
        soapModuleAccess.setEditPublicFolders(Boolean.valueOf(moduleAccess.getEditPublicFolders()));
        soapModuleAccess.setEditResource(Boolean.valueOf(moduleAccess.getEditResource()));
        soapModuleAccess.setForum(Boolean.valueOf(moduleAccess.getForum()));
        soapModuleAccess.setGlobalAddressBookDisabled(Boolean.valueOf(moduleAccess.isGlobalAddressBookDisabled()));
        soapModuleAccess.setIcal(Boolean.valueOf(moduleAccess.getIcal()));
        soapModuleAccess.setInfostore(Boolean.valueOf(moduleAccess.getInfostore()));
        soapModuleAccess.setMultipleMailAccounts(Boolean.valueOf(moduleAccess.isMultipleMailAccounts()));
        soapModuleAccess.setOLOX20(Boolean.valueOf(moduleAccess.isOLOX20()));
        soapModuleAccess.setPinboardWrite(Boolean.valueOf(moduleAccess.getPinboardWrite()));
        soapModuleAccess.setProjects(Boolean.valueOf(moduleAccess.getProjects()));
        soapModuleAccess.setPublication(Boolean.valueOf(moduleAccess.isPublication()));
        soapModuleAccess.setPublicFolderEditable(Boolean.valueOf(moduleAccess.isPublicFolderEditable()));
        soapModuleAccess.setReadCreateSharedFolders(Boolean.valueOf(moduleAccess.getReadCreateSharedFolders()));
        soapModuleAccess.setRssBookmarks(Boolean.valueOf(moduleAccess.getRssBookmarks()));
        soapModuleAccess.setRssPortal(Boolean.valueOf(moduleAccess.getRssPortal()));
        soapModuleAccess.setSubscription(Boolean.valueOf(moduleAccess.isSubscription()));
        soapModuleAccess.setSyncml(Boolean.valueOf(moduleAccess.getSyncml()));
        soapModuleAccess.setTasks(Boolean.valueOf(moduleAccess.getTasks()));
        soapModuleAccess.setUSM(Boolean.valueOf(moduleAccess.isUSM()));
        soapModuleAccess.setVcard(Boolean.valueOf(moduleAccess.getVcard()));
        soapModuleAccess.setWebdav(Boolean.valueOf(moduleAccess.getWebdav()));
        soapModuleAccess.setWebdavXml(Boolean.valueOf(moduleAccess.getWebdavXml()));
        soapModuleAccess.setWebmail(Boolean.valueOf(moduleAccess.getWebmail()));
        return soapModuleAccess;
    }

    private static Context context2Soap(final com.openexchange.admin.rmi.dataobjects.Context context) {
        if (null == context) {
            return null;
        }
        final Context soapContext = new Context();
        soapContext.setAverageSize(context.getAverage_size());
        soapContext.setEnabled(context.getEnabled());
        soapContext.setFilestoreId(context.getFilestoreId());
        soapContext.setFilestoreName(context.getFilestore_name());
        soapContext.setId(context.getId());
        soapContext.setMaxQuota(context.getMaxQuota());
        soapContext.setName(context.getName());
        soapContext.setReadDatabase(database2Soap(context.getReadDatabase()));
        soapContext.setUsedQuota(context.getUsedQuota());
        soapContext.setUserAttributes(mapmap2Soap(context.getUserAttributes()));
        soapContext.setWriteDatabase(database2Soap(context.getWriteDatabase()));
        return soapContext;
    }

    private static Database database2Soap(final com.openexchange.admin.rmi.dataobjects.Database database) {
        if (null == database) {
            return null;
        }
        final Database soapDatabase = new Database();
        soapDatabase.setClusterWeight(database.getClusterWeight());
        soapDatabase.setCurrentUnits(database.getCurrentUnits());
        soapDatabase.setDriver(database.getDriver());
        soapDatabase.setId(database.getId());
        soapDatabase.setLogin(database.getLogin());
        soapDatabase.setMaster(database.getMaster());
        soapDatabase.setMasterId(database.getMasterId());
        soapDatabase.setMaxUnits(database.getMaxUnits());
        soapDatabase.setName(database.getName());
        soapDatabase.setPassword(database.getPassword());
        soapDatabase.setPoolHardLimit(database.getPoolHardLimit());
        soapDatabase.setPoolInitial(database.getPoolInitial());
        soapDatabase.setPoolMax(database.getPoolMax());
        soapDatabase.setReadId(database.getRead_id());
        soapDatabase.setScheme(database.getScheme());
        soapDatabase.setUrl(database.getUrl());
        return soapDatabase;
    }

    private static SOAPStringMapMap mapmap2Soap(final Map<String, Map<String, String>> mapmap) {
        if (null == mapmap) {
            return null;
        }
        final SOAPStringMapMap soapMapMap = new SOAPStringMapMap();
        final java.util.List<SOAPMapEntry> entries = new ArrayList<SOAPMapEntry>(mapmap.size());
        for (final Map.Entry<String,Map<String,String>> mapmapEntry : mapmap.entrySet()) {
            final SOAPMapEntry mapEntry = new SOAPMapEntry();
            mapEntry.setKey(mapmapEntry.getKey());
            mapEntry.setValue(map2Soap(mapmapEntry.getValue()));
            entries.add(mapEntry);
        }
        soapMapMap.setEntries(entries);
        return soapMapMap;
    }

    private static SOAPStringMap map2Soap(final Map<String, String> map) {
        if (null == map) {
            return null;
        }
        final SOAPStringMap soapMap = new SOAPStringMap();
        final java.util.List<Entry> entries = new ArrayList<Entry>(map.size());
        for (final Map.Entry<String,String> mapEntry : map.entrySet()) {
            final Entry entry = new Entry();
            entry.setKey(mapEntry.getKey());
            entry.setValue(mapEntry.getValue());
            entries.add(entry);
        }
        soapMap.setEntries(entries);
        return soapMap;
    }

}
